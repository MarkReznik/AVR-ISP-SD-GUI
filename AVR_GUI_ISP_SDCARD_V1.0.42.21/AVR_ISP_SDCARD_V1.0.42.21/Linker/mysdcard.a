;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0

	.DSEG
;void init_sd_tim1(void)
; 0003 004A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 004B /* initialize Timer1 overflow interrupts in Mode 0 (Normal) */
; 0003 004C TCCR1A=0x00;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0003 004D /* clkio/1024 */
; 0003 004E //TCCR1B=(1<<CS12)|(1<<CS10);
; 0003 004F /* clkio/64 */
; 0003 0050 TCCR1B=(1<<CS11)|(1<<CS10);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0003 0051 /* timer overflow interrupts will occur with 100Hz frequency */
; 0003 0052 TCNT1H=T1_INIT>>8;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0003 0053 TCNT1L=T1_INIT&0xFF;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0003 0054 /* enable Timer1 overflow interrupt */
; 0003 0055 #ifdef _MEGA64_INCLUDED_
; 0003 0056 TIMSK=1<<TOIE1;
; 0003 0057 #else
; 0003 0058 TIMSK1=1<<TOIE1;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0003 0059 #endif
; 0003 005A }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;void RESerror(FRESULT res)
; 0003 005D {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0003 005E if(res!=0)
;	res -> Y+0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0003 005F StandaloneMode=SDFAIL;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 1
; 0003 0060 #ifdef PRINT_DEBUG
; 0003 0061 if(debug){
; 0003 0062 while(tx_counter);
; 0003 0063 #ifdef PETITFATFS
; 0003 0064 //if ((res>=FR_DISK_ERR) && (res<=FR_NO_FILESYSTEM))
; 0003 0065 #else
; 0003 0066 //if ((res>=FR_DISK_ERR) &&(res<=FR_TIMEOUT))
; 0003 0067 #endif
; 0003 0068 printf("\r\nERROR %d: %p",res, error_msg[res]);
; 0003 0069 while(tx_counter);}
; 0003 006A #endif
; 0003 006B #ifdef PRINT_LCD
; 0003 006C lcd_putsf_row3(3 ,error_msg[res]);
; 0003 006D #endif
; 0003 006E /* stop here */
; 0003 006F //while(1);
; 0003 0070 }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;UCHAR sd_mount(void)
; 0003 0073 {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0003 0074 UCHAR retry=3;
; 0003 0075 while(retry)
;PCODE: $00000028 VOL: 0
;	retry -> R17
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0003 0076 {
; 0003 0077 retry--;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0003 0078 /* initialize SPI interface and card driver */
; 0003 0079 #ifdef PETITFATFS
; 0003 007A if((res=disk_initialize())!=0){
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0003 007B #else
; 0003 007C if((res=disk_initialize(0))!=0){//0=DRIVE NUMBER
; 0003 007D #endif
; 0003 007E #ifdef PRINT_DEBUG
; 0003 007F if(debug){
; 0003 0080 while(tx_counter);
; 0003 0081 printf("\r\nSPI Init Failed. Return status %d.\r\n",res);
; 0003 0082 if (res & STA_NOINIT) printf("Disk init failed");
; 0003 0083 else
; 0003 0084 if (res & STA_NODISK) printf("Card not present");
; 0003 0085 else
; 0003 0086 if (res & STA_PROTECT) printf("Card write\nprotected");
; 0003 0087 while(tx_counter);}
; 0003 0088 #endif
; 0003 0089 #ifdef PRINT_LCD
; 0003 008A if (res & STA_NOINIT) lcd_putsf_row3(3,"Disk init failed");
; 0003 008B else
; 0003 008C if (res & STA_NODISK) lcd_putsf_row3(3,"Card not present");
; 0003 008D else
; 0003 008E if (res & STA_PROTECT) lcd_putsf_row3(3,"Card write prot");
; 0003 008F #endif
; 0003 0090 if(retry){
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0003 0091 continue;
;PCODE: $00000036 VOL: 0
; 0003 0092 }
; 0003 0093 else{
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0003 0094 delay_ms(500);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0003 0095 StandaloneMode=SDFAIL;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 1
; 0003 0096 return FALSE;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0003 0097 }
;PCODE: $00000041 VOL: 0
; 0003 0098 }
; 0003 0099 /* mount logical drive 0: */
; 0003 009A #ifdef PETITFATFS
; 0003 009B if ((res=pf_mount(&fs))==FR_OK)
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0003 009C #else
; 0003 009D if((res=f_mount(0,&fat))==FR_OK)
; 0003 009E #endif
; 0003 009F {
; 0003 00A0 #ifdef PRINT_DEBUG
; 0003 00A1 if(debug){
; 0003 00A2 while(tx_counter);
; 0003 00A3 printf("\r\nLogical drive 0: mounted OK\r\n");
; 0003 00A4 while(tx_counter);}
; 0003 00A5 #endif
; 0003 00A6 }
; 0003 00A7 else{
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0003 00A8 if(retry)
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0003 00A9 continue;
;PCODE: $0000004D VOL: 0
; 0003 00AA else
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0003 00AB /* an error occured, display it and stop */
; 0003 00AC goto print_error;
;PCODE: $00000050 VOL: 0
; 0003 00AD }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0003 00AE return TRUE;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0003 00AF }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0003 00B0 print_error:
;PCODE: $00000058 VOL: 0
; 0003 00B1 RESerror(res);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0003 00B2 return FALSE;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0003 00B3 }
;PCODE: $0000005F VOL: 0
;UCHAR SetRollValue(void)
; 0003 00B6 {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0003 00B7 //char *pvalue=NULL,*pkey;
; 0003 00B8 UINT  i;//buffer index
; 0003 00B9 UCHAR retry=0,rollValue;//ROLL_WINDOW;
; 0003 00BA debug=1;
;PCODE: $00000062 VOL: 0
;	i -> R16,R17
;	retry -> R19
;	rollValue -> R18
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0003 00BB #ifdef PRINT_DEBUG
; 0003 00BC if(debug){
; 0003 00BD while(tx_counter);
; 0003 00BE printf("\r\ntmpimage.RollCounter=%d, ",tmpimage.RollCounter);
; 0003 00BF while(tx_counter);}
; 0003 00C0 #endif
; 0003 00C1 if(fileOpen()==0)
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0003 00C2 goto print_error;
;PCODE: $0000006A VOL: 0
; 0003 00C3 SetConfigArea();
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0003 00C4 #ifndef  PETITFATFS
; 0003 00C5 res=f_read(&file,buffer,sizeof(buffer),&nbytes);
; 0003 00C6 #else
; 0003 00C7 res=pf_read(buffer,sizeof(buffer),&nbytes);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0003 00C8 #endif
; 0003 00C9 if(res)
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0003 00CA goto print_error;
;PCODE: $00000078 VOL: 0
; 0003 00CB buffer[nbytes]=NULL;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0003 00CC while(retry<ROLL_SIZE)//RollCounterToCheck < ROLL_SIZE)
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0003 00CD {
; 0003 00CE #ifdef PRINT_DEBUG
; 0003 00CF if(debug){
; 0003 00D0 while(tx_counter);
; 0003 00D1 printf("\r\nRollCounterToCheck=%d, ",RollCounterToCheck);
; 0003 00D2 while(tx_counter);}
; 0003 00D3 #endif
; 0003 00D4 memcpy(tmpbytes,buffer,strlenf("[settings]"));
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0003 00D5 rollValue=roll[retry];
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0003 00D6 for(i=0;(i<strlenf("[settings]"))&& (rollValue>0) ;i++)
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0003 00D7 {
; 0003 00D8 #ifdef PRINT_DEBUG
; 0003 00D9 if(debug){
; 0003 00DA while(tx_counter);
; 0003 00DB printf("\r\n%d=%02x, %02x ",i,tmpbytes[i],buffer[i]);
; 0003 00DC while(tx_counter);}
; 0003 00DD #endif
; 0003 00DE tmpbytes[i]=(tmpbytes[i]<<1)|(tmpbytes[i]>>7);  //ROL
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0003 00DF tmpbytes[i]^=rollValue;        //XOR
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0003 00E0 #ifdef PRINT_DEBUG
; 0003 00E1 if(debug){
; 0003 00E2 while(tx_counter);
; 0003 00E3 printf("\r\n%d=%02x, %c",i,tmpbytes[i],tmpbytes[i]);
; 0003 00E4 while(tx_counter);}
; 0003 00E5 #endif
; 0003 00E6 }
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0003 00E7 if(strncmpf(tmpbytes,"[settings]",strlenf("[settings]"))==0){
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0003 00E8 break;
;PCODE: $000000C9 VOL: 0
; 0003 00E9 }
; 0003 00EA retry++;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0003 00EB }
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0003 00EC 
; 0003 00ED if(retry>=ROLL_SIZE)//return null in case of reach roll counter window
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0003 00EE goto print_error;
;PCODE: $000000D2 VOL: 0
; 0003 00EF tmpimage.rollValue=rollValue;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0003 00F0 if(rollValue>0){
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0003 00F1 for(i=0; i<nbytes ;i++)
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0003 00F2 {
; 0003 00F3 buffer[i]=(buffer[i]<<1)|(buffer[i]>>7);  //ROL
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0003 00F4 buffer[i]^=rollValue;        //XOR
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0003 00F5 }
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0003 00F6 }
; 0003 00F7 #ifdef PRINT_DEBUG
; 0003 00F8 if(debug){
; 0003 00F9 while(tx_counter);
; 0003 00FA buffer[nbytes-1]=0;
; 0003 00FB printf("\r\n%s",buffer);
; 0003 00FC while(tx_counter);}
; 0003 00FD #endif
; 0003 00FE return TRUE;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0003 00FF print_error:
;PCODE: $00000101 VOL: 0
; 0003 0100 #ifndef  PETITFATFS
; 0003 0101 f_close(&file);
; 0003 0102 #endif
; 0003 0103 RESerror(res);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0003 0104 #ifdef PRINT_LCD
; 0003 0105 //lcd_putsf_row(1,"No project file");
; 0003 0106 #endif
; 0003 0107 return FALSE;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0003 0108 }
;PCODE: $00000109 VOL: 0
;UCHAR fileOpen()
; 0003 010B {
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0003 010C UCHAR retry=3;
; 0003 010D /* open the file in read mode */
; 0003 010E #ifndef  PETITFATFS
; 0003 010F strcpyf(path,"0:/1/project.txt");
; 0003 0110 path[3]=dirnum+'0';
; 0003 0111 #else
; 0003 0112 //strcpyf(path,"/00/00.dat");
; 0003 0113 strcpyf(path,"/");
;PCODE: $0000010C VOL: 0
;	retry -> R17
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0003 0114 //itoa(folderCounter,tmpbytes);
; 0003 0115 itoa(dirnum,tmpbytes);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0003 0116 strcat(path,tmpbytes);// "/1"
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0003 0117 strcatf(path,"/");// "/1/"
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0003 0118 //strcat(path,tmpbytes);// "/1/1"
; 0003 0119 
; 0003 011A strcatf(path,"flash.dat");// "/1/1.dat"
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0003 011B #endif
; 0003 011C while(retry)
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0003 011D {
; 0003 011E retry--;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0003 011F /* open the file in read mode */
; 0003 0120 #ifndef  PETITFATFS
; 0003 0121 if((res=f_open(&file,path,FA_READ|FA_OPEN_EXISTING))==FR_OK)
; 0003 0122 #else
; 0003 0123 if ((res=pf_open(path))==FR_OK)
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0003 0124 #endif
; 0003 0125 {
; 0003 0126 #ifdef PRINT_DEBUG
; 0003 0127 if(debug){
; 0003 0128 while(tx_counter);
; 0003 0129 printf("\r\nFile %s opened OK.\r\n",path);
; 0003 012A //printf("\r\n%s key to find - %p",CopyKey,Key);
; 0003 012B while(tx_counter);}
; 0003 012C #endif
; 0003 012D #ifdef  PETITFATFS
; 0003 012E if((res=pf_lseek(0))!=FR_OK)
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0003 012F goto print_error;//RESerror(res);
;PCODE: $0000013D VOL: 0
; 0003 0130 #endif
; 0003 0131 break;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0003 0132 }
; 0003 0133 else{
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0003 0134 /* an error occured, display it and stop */
; 0003 0135 #ifdef PRINT_DEBUG
; 0003 0136 if(debug){
; 0003 0137 while(tx_counter);
; 0003 0138 printf("\r\nWrong path: %s\r\n",path);
; 0003 0139 while(tx_counter);}
; 0003 013A #endif
; 0003 013B if(retry)
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0003 013C continue;
;PCODE: $00000144 VOL: 0
; 0003 013D else
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0003 013E goto print_error;//RESerror(res);
;PCODE: $00000147 VOL: 0
; 0003 013F }
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0003 0140 }
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0003 0141 return 1;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0003 0142 print_error:
;PCODE: $0000014F VOL: 0
; 0003 0143 RESerror(res);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0003 0144 return 0;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0003 0145 }
;PCODE: $00000156 VOL: 0
;UCHAR SetFlashArea()
; 0003 0148 {
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0003 0149 #ifdef  PETITFATFS
; 0003 014A if((res=pf_lseek(1000))!=FR_OK){
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0003 014B RESerror(res);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0003 014C return FALSE;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0003 014D }
; 0003 014E #endif
; 0003 014F return TRUE;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0003 0150 }
;PCODE: $00000167 VOL: 0
;UCHAR SetConfigArea()
; 0003 0152 {
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0003 0153 #ifdef  PETITFATFS
; 0003 0154 if((res=pf_lseek(0))!=FR_OK){
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0003 0155 RESerror(res);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0003 0156 return FALSE;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0003 0157 }
; 0003 0158 #endif
; 0003 0159 return TRUE;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0003 015A }
;PCODE: $00000178 VOL: 0
;UCHAR SetFileOffset(DWORD offset)
; 0003 015C {
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0003 015D #ifdef  PETITFATFS
; 0003 015E offset+=1000L;
;	offset -> Y+0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0003 015F if((res=pf_lseek(offset))!=FR_OK){
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0003 0160 RESerror(res);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0003 0161 return FALSE;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0003 0162 }
; 0003 0163 #endif
; 0003 0164 return TRUE;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0003 0165 }
;PCODE: $0000018E VOL: 0
;UCHAR SetBinFileOffset(DWORD offset)
; 0003 0167 {
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0003 0168 #ifdef  PETITFATFS
; 0003 0169 if((res=pf_lseek( offset ))!=FR_OK){
;	offset -> Y+0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0003 016A RESerror(res);
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0003 016B return FALSE;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0003 016C }
; 0003 016D #endif
; 0003 016E return TRUE;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0003 016F }
;PCODE: $000001A1 VOL: 0
;UCHAR SetBinFlashOffset(DWORD offset)
; 0003 0171 {
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0003 0172 #ifdef  PETITFATFS
; 0003 0173 if((res=pf_lseek((DWORD)1024L + offset ))!=FR_OK){
;	offset -> Y+0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0003 0174 RESerror(res);
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0003 0175 return FALSE;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0003 0176 }
; 0003 0177 #endif
; 0003 0178 return TRUE;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0003 0179 }
;PCODE: $000001B5 VOL: 0
;UCHAR fileRead(void)
; 0003 017B {
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0003 017C /* read and display the file's content.
; 0003 017D make sure to leave space for a NULL terminator
; 0003 017E in the buffer, so maximum sizeof(buffer)-1 bytes can be read */
; 0003 017F UINT  i;//buffer index
; 0003 0180 UCHAR rollVal=tmpimage.rollValue;//roll[(tmpimage.RollCounter)%ROLL_SIZE];
; 0003 0181 #ifndef  PETITFATFS
; 0003 0182 res=f_read(&file,buffer,sizeof(buffer),&nbytes);
; 0003 0183 #else
; 0003 0184 res=pf_read(buffer,sizeof(buffer),&nbytes);
;PCODE: $000001B8 VOL: 0
;	i -> R16,R17
;	rollVal -> R19
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0003 0185 #endif
; 0003 0186 if ((res)==FR_OK){
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0003 0187 if(rollVal!=0){
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0003 0188 for(i=0;i<(nbytes);i++)
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0003 0189 {
; 0003 018A buffer[i]=(buffer[i]<<1)|(buffer[i]>>7);  //ROL
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0003 018B buffer[i]^=rollVal;        //XOR
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0003 018C }
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0003 018D }
; 0003 018E }
;PCODE: $000001EB VOL: 0
; 0003 018F else
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0003 0190 goto print_error;
;PCODE: $000001EE VOL: 0
; 0003 0191 //buffer[nbytes]=NULL;
; 0003 0192 LastOffset+=nbytes;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0003 0193 nbytesCounter=0;
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0003 0194 return TRUE;
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0003 0195 print_error:
;PCODE: $000001FB VOL: 0
; 0003 0196 RESerror(res);
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0003 0197 return FALSE;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0003 0198 }
;PCODE: $00000203 VOL: 0
;UCHAR readPageBin(UINT bytesToRead,UCHAR *pbuffer)
; 0003 019A {
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0003 019B /* read and display the file's content.
; 0003 019C make sure to leave space for a NULL terminator
; 0003 019D in the buffer, so maximum sizeof(buffer)-1 bytes can be read */
; 0003 019E UINT  i;//buffer index
; 0003 019F UCHAR rollValue=tmpimage.rollValue;
; 0003 01A0 if(SetBinFileOffset(LastOffset)==FALSE)
;PCODE: $00000206 VOL: 0
;	bytesToRead -> Y+6
;	*pbuffer -> Y+4
;	i -> R16,R17
;	rollValue -> R19
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0003 01A1 goto print_error;
;PCODE: $0000020F VOL: 0
; 0003 01A2 #ifndef  PETITFATFS
; 0003 01A3 res=f_read(&file,pbuffer,bytesToRead,&nbytes);
; 0003 01A4 #else
; 0003 01A5 res=pf_read(pbuffer,bytesToRead,&nbytes);
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0003 01A6 #endif
; 0003 01A7 if ((res)==FR_OK){
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0003 01A8 for(i=0;i<(nbytes);i++)
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0003 01A9 {
; 0003 01AA if(rollValue!=0){
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0003 01AB pbuffer[i]=(pbuffer[i]<<1)|(pbuffer[i]>>7);  //ROL
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0003 01AC pbuffer[i]^=rollValue;        //XOR
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0003 01AD }
; 0003 01AE g_Addr+=pbuffer[i];
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0003 01AF }
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0003 01B0 }
; 0003 01B1 else
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0003 01B2 goto print_error;
;PCODE: $0000024F VOL: 0
; 0003 01B3 for(i=nbytes;i<bytesToRead;i++)
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0003 01B4 {
; 0003 01B5 pbuffer[i]=0xFF;
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0003 01B6 }
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0003 01B7 //buffer[nbytes]=NULL;
; 0003 01B8 LastOffset+=nbytes;
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0003 01B9 nbytesCounter=0;
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0003 01BA return 1;
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0003 01BB print_error:
;PCODE: $0000026F VOL: 0
; 0003 01BC RESerror(res);
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0003 01BD return 0;
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0003 01BE }
;PCODE: $00000277 VOL: 0
;UCHAR fileReadBin(void)
; 0003 01C0 {
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0003 01C1 /* read and display the file's content.
; 0003 01C2 make sure to leave space for a NULL terminator
; 0003 01C3 in the buffer, so maximum sizeof(buffer)-1 bytes can be read */
; 0003 01C4 UINT  i;//buffer index
; 0003 01C5 #ifndef  PETITFATFS
; 0003 01C6 res=f_read(&file,buffer,sizeof(buffer),&nbytes);
; 0003 01C7 #else
; 0003 01C8 res=pf_read(buffer,sizeof(buffer),&nbytes);
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;	i -> R16,R17
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0003 01C9 #endif
; 0003 01CA if ((res)!=FR_OK){ //
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0003 01CB goto print_error;
;PCODE: $00000287 VOL: 0
; 0003 01CC }
; 0003 01CD //buffer[nbytes]=NULL;
; 0003 01CE nbytesCounter=0;
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0003 01CF return 1;
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0003 01D0 print_error:
;PCODE: $0000028E VOL: 0
; 0003 01D1 RESerror(res);
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0003 01D2 return 0;
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0003 01D3 }
;PCODE: $00000295 VOL: 0
;void fileClose(void)
; 0003 01D6 {
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0003 01D7 /* close the file */
; 0003 01D8 #ifndef  PETITFATFS
; 0003 01D9 if ((res=f_close(&file))==FR_OK)
; 0003 01DA {
; 0003 01DB #ifdef PRINT_DEBUG
; 0003 01DC if(debug){
; 0003 01DD printf("\r\nFile %s closed OK.",path);
; 0003 01DE while(tx_counter);}
; 0003 01DF #endif
; 0003 01E0 }
; 0003 01E1 else
; 0003 01E2 /* an error occured, display it and stop */
; 0003 01E3 RESerror(res);
; 0003 01E4 #endif
; 0003 01E5 }
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;UCHAR pgm_read_byte_sd(void)
; 0003 01E7 {
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0003 01E8 UCHAR result;
; 0003 01E9 if(nbytesCounter>=nbytes){
;PCODE: $0000029C VOL: 0
;	result -> R17
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0003 01EA fileRead();
;PCODE: $000002A1 VOL: 0
; 0003 01EB }
; 0003 01EC result=buffer[nbytesCounter++];
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0003 01ED ReadByteCounter++;
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0003 01EE return result;
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0003 01EF }
;PCODE: $000002B1 VOL: 0
;UCHAR ReadFileToBuffer()
; 0003 01F3 {
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0003 01F4 /* open the file in read mode */
; 0003 01F5 #ifndef  PETITFATFS
; 0003 01F6 if((res=f_open(&file,path,FA_READ|FA_OPEN_EXISTING))==FR_OK)
; 0003 01F7 #else
; 0003 01F8 if ((res=pf_open(path))==FR_OK)
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0003 01F9 #endif
; 0003 01FA {
; 0003 01FB #ifdef PRINT_DEBUG
; 0003 01FC if(debug){
; 0003 01FD while(tx_counter);
; 0003 01FE printf("\r\nFile %s opened OK.\r\n",path);
; 0003 01FF while(tx_counter);}
; 0003 0200 #endif
; 0003 0201 }
; 0003 0202 else{
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0003 0203 /* an error occured, display it and stop */
; 0003 0204 #ifdef PRINT_DEBUG
; 0003 0205 if(debug){
; 0003 0206 while(tx_counter);
; 0003 0207 printf("\r\nWrong path: %s\r\n",path);
; 0003 0208 while(tx_counter);}
; 0003 0209 #endif
; 0003 020A goto print_error;//RESerror(res);
;PCODE: $000002BC VOL: 0
; 0003 020B }
;PCODE: $000002BD VOL: 0
; 0003 020C #ifdef  PETITFATFS
; 0003 020D if((res=pf_lseek(0))!=FR_OK)
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0003 020E goto print_error;//RESerror(res);
;PCODE: $000002C4 VOL: 0
; 0003 020F #endif
; 0003 0210 /* read and display the file's content.
; 0003 0211 make sure to leave space for a NULL terminator
; 0003 0212 in the buffer, so maximum sizeof(buffer)-1 bytes can be read */
; 0003 0213 #ifndef  PETITFATFS
; 0003 0214 if((res=f_read(&file,buffer,sizeof(buffer),&nbytes))==FR_OK)
; 0003 0215 #else
; 0003 0216 if((res=pf_read(buffer,sizeof(buffer),&nbytes))==FR_OK)
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0003 0217 #endif
; 0003 0218 //buffer[nbytes]=NULL;
; 0003 0219 nbytesCounter=0;
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0003 021A return TRUE;
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0003 021B print_error:
;PCODE: $000002D5 VOL: 0
; 0003 021C #ifndef  PETITFATFS
; 0003 021D f_close(&file);
; 0003 021E RESerror(res);
; 0003 021F #endif
; 0003 0220 return FALSE;
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0003 0221 }
;PCODE: $000002D8 VOL: 0
;char *FindValuePointerByKeyFromBuffer(flash char *Key)
; 0003 0224 {
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0003 0225 char *pvalue=NULL;
; 0003 0226 if((pvalue=strstrf(buffer,Key))==NULL){
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;	*Key -> Y+2
;	*pvalue -> R16,R17
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0003 0227 #ifdef PRINT_DEBUG
; 0003 0228 if(debug){
; 0003 0229 while(tx_counter);
; 0003 022A printf("\r\n%p Key not found.",Key);
; 0003 022B while(tx_counter);}
; 0003 022C #endif
; 0003 022D }
; 0003 022E else
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0003 022F pvalue+=(strlenf(Key)+1);
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0003 0230 return pvalue;
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0003 0231 }
;PCODE: $000002F7 VOL: 0
;char *ReadValue(flash char *Key)
; 0003 0235 {
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0003 0236 char *pvalue=NULL;
; 0003 0237 if((pvalue=FindValuePointerByKeyFromBuffer(Key))!=NULL)
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;	*Key -> Y+2
;	*pvalue -> R16,R17
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0003 0238 {
; 0003 0239 strncpy(tmpbytes,pvalue,32);//copy string from value pointer to tmpbytes 32 bytes
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0003 023A pvalue=tmpbytes;//set pointer to tmpbytes
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
; 0003 023B pvalue[strpos(pvalue,'\r')]=NULL;
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0003 023C #ifdef PRINT_DEBUG
; 0003 023D while(tx_counter);
; 0003 023E if(debug){
; 0003 023F while(tx_counter);
; 0003 0240 printf(" Found Key %p=%s.\r\n",Key,pvalue);
; 0003 0241 while(tx_counter);}
; 0003 0242 #endif
; 0003 0243 }
; 0003 0244 else
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0003 0245 goto print_error;
;PCODE: $00000315 VOL: 0
; 0003 0246 
; 0003 0247 return pvalue;
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0003 0248 print_error:
;PCODE: $0000031E VOL: 0
; 0003 0249 #ifndef  PETITFATFS
; 0003 024A f_close(&file);
; 0003 024B RESerror(res);
; 0003 024C #endif
; 0003 024D return pvalue;
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0003 024E }
;PCODE: $00000326 VOL: 0
;UCHAR WriteConfigValue(flash char *Key,char *Values, UINT len)
; 0003 0255 {
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0003 0256 char *pvalue=NULL;
; 0003 0257 if(ReadFileToBuffer()==NULL)
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;	*Key -> Y+6
;	*Values -> Y+4
;	len -> Y+2
;	*pvalue -> R16,R17
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
; 0003 0258 goto print_error;
;PCODE: $00000330 VOL: 0
; 0003 0259 if((pvalue=FindValuePointerByKeyFromBuffer(Key))!=NULL)
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0003 025A {   //*(pvalue)=ready_val;//=xxxxxxxxh
; 0003 025B while(len){
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0003 025C *pvalue=*Values;
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0003 025D pvalue++;
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
; 0003 025E Values++;
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0003 025F len--;
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0003 0260 }
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0003 0261 #ifdef  PETITFATFS
; 0003 0262 if((res=pf_lseek(0))!=FR_OK)
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0003 0263 goto print_error;//RESerror(res);
;PCODE: $00000350 VOL: 0
; 0003 0264 if((res=pf_write(buffer,(nbytes-1),&nbytes))!=FR_OK)
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0003 0265 goto print_error;
;PCODE: $0000035D VOL: 0
; 0003 0266 if((res=pf_write(0,0,&nbytes))!=FR_OK)
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
; 0003 0267 goto print_error;
;PCODE: $00000369 VOL: 0
; 0003 0268 #endif
; 0003 0269 //pvalue[strpos(pvalue,'\r')]=NULL;
; 0003 026A #ifdef PRINT_DEBUG
; 0003 026B if(debug){
; 0003 026C printf(" Found Key %p=%s.\r\n",Key,pvalue);
; 0003 026D while(tx_counter);}
; 0003 026E #endif
; 0003 026F }
;PCODE: $0000036A VOL: 0
; 0003 0270 else
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
; 0003 0271 goto print_error;
;PCODE: $0000036D VOL: 0
; 0003 0272 /* close the file */
; 0003 0273 #ifndef  PETITFATFS
; 0003 0274 if ((res=f_close(&file))==FR_OK)
; 0003 0275 {
; 0003 0276 #ifdef PRINT_DEBUG
; 0003 0277 if(debug){
; 0003 0278 printf("\r\nFile %s closed OK.\r\n",path);
; 0003 0279 while(tx_counter);}
; 0003 027A #endif
; 0003 027B }
; 0003 027C else
; 0003 027D /* an error occured, display it and stop */
; 0003 027E goto print_error;//RESerror(res);
; 0003 027F #endif
; 0003 0280 //goto print_error;//return the pointer to value
; 0003 0281 return TRUE;
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
; 0003 0282 print_error:
;PCODE: $00000376 VOL: 0
; 0003 0283 #ifndef  PETITFATFS
; 0003 0284 f_close(&file);
; 0003 0285 RESerror(res);
; 0003 0286 #endif
; 0003 0287 return FALSE;
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
; 0003 0288 }
;PCODE: $0000037E VOL: 0
