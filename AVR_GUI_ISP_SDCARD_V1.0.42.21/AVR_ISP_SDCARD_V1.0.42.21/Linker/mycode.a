;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void error(flash char *str)
; 0002 003A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 003B #ifdef PRINT_DEBUG
; 0002 003C if(debug){
; 0002 003D while(tx_counter);
; 0002 003E printf("\r\nError.fptr=%u,buf[0]=%02x,buf[1]=%02x\r\n",(fs.fptr),buffer[0],buffer[1]);
; 0002 003F printf(str);
; 0002 0040 while(tx_counter);}
; 0002 0041 #endif
; 0002 0042 #ifdef PRINT_LCD
; 0002 0043 //lcd_putsf_row(3,str);
; 0002 0044 #endif
; 0002 0045 //while(1);
; 0002 0046 }
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;UCHAR pgm_read_byte(UCHAR *addr)
; 0002 004A {
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0002 004B return *addr;
;	*addr -> Y+0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0002 004C }
;PCODE: $00000018 VOL: 0
;UCHAR hextext_read_byte(void)
; 0002 0050 {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0002 0051 #ifdef BOOTEEPROM
; 0002 0052 return *hextext++;
; 0002 0053 #else
; 0002 0054 return pgm_read_byte_sd();
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0002 0055 #endif
; 0002 0056 }
;PCODE: $0000001D VOL: 0
;UCHAR hexton (UCHAR h)
; 0002 005A {
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0002 005B if (h >= '0' && h <= '9')
;	h -> Y+0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0002 005C return(h - '0');
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0002 005D if (h >= 'A' && h <= 'F')
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0002 005E return((h - 'A') + 10);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0002 005F #ifdef PRINT_DEBUG
; 0002 0060 if(debug){
; 0002 0061 while(tx_counter);
; 0002 0062 printf("\r\nBad hex=%02x\r\n",h);
; 0002 0063 while(tx_counter);}
; 0002 0064 #endif
; 0002 0065 error("Bad hex digit!");
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0002 0066 return 0;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0002 0067 }
;PCODE: $00000045 VOL: 0
;CHAR ntohexchar (UCHAR n)
; 0002 0069 {
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0002 006A n&=0x0f;
;	n -> Y+0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0002 006B if (n >= 0 && n <= 9)
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0002 006C return(n + '0');
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0002 006D if (n >= 0xA && n <= 0xF){
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0002 006E return (n-0x0A+'A');
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0002 006F }
; 0002 0070 return 'X';
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0002 0071 }
;PCODE: $0000006C VOL: 0
;UCHAR * ntohexstr (UCHAR n)
; 0002 0073 {
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0002 0074 static UCHAR str[3];
; 0002 0075 str[0]=ntohexchar(n>>4);
;	n -> Y+0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0002 0076 str[1]=ntohexchar(n&0x0f);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0002 0077 str[2]=0;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0002 0078 return str;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0002 0079 }
;PCODE: $00000080 VOL: 0
;UCHAR hextobyte(char *str)
; 0002 007C {
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0002 007D return hexton(*str)<<4 | hexton(*(str+sizeof(UCHAR))); //read 0xFF  1=F, 1=F sizeof(UCHAR)=1 byte
;	*str -> Y+0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0002 007E }
;PCODE: $00000091 VOL: 0
;void hextobytese(char *str,eeprom UCHAR *arr,UCHAR len)
; 0002 0082 {
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0002 0083 UCHAR i;
; 0002 0084 for(i=0;i<len;i++){
;PCODE: $00000094 VOL: 0
;	*str -> Y+4
;	*arr -> Y+2
;	len -> Y+1
;	i -> R17
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0002 0085 arr[i]=hextobyte(str+(i*2*sizeof(UCHAR)));
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0002 0086 }
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0002 0087 }
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;void hextobytes(char *str,UCHAR *arr,UCHAR len)
; 0002 008B {
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0002 008C UCHAR i;
; 0002 008D for(i=0;i<len;i++){
;PCODE: $000000B7 VOL: 0
;	*str -> Y+4
;	*arr -> Y+2
;	len -> Y+1
;	i -> R17
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0002 008E arr[i]=hextobyte(str+(i*2*sizeof(UCHAR)));
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0002 008F }
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0002 0090 }
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;UINT hextouint(char *str)
; 0002 0094 {
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0002 0095 return (UINT)((UINT)hextobyte(str)<<8 | (UINT)hextobyte(str+2*sizeof(UCHAR))); //read 0xFFFF 1=F 2=F, 1=F 2=F   sizeof(UINT)=2 bytes
;	*str -> Y+0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0002 0096 }
;PCODE: $000000E8 VOL: 0
;ULONG hextoulong(char *str)
; 0002 009A {
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0002 009B return (ULONG)((ULONG)hextouint(str)<<16 | (ULONG)hextouint(str+2*sizeof(UINT)));//read 0xFFFFFFFF 1=F 2=F 3=F 4=F, 1=F 2=F 3=F 4=F sizeof(ULONG)=4 bytes
;	*str -> Y+0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0002 009C }
;PCODE: $000000FA VOL: 0
;void strcpye(eeprom char *str1,char *str2)
; 0002 00A0 {
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0002 00A1 while(*str2){
;	*str1 -> Y+2
;	*str2 -> Y+0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0002 00A2 *str1= *str2;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0002 00A3 str1++;str2++;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0002 00A4 }
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0002 00A5 str1=0;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0002 00A6 }
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;void memcpye(eeprom UCHAR *str1,UCHAR *str2,UCHAR len)
; 0002 00AA {
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0002 00AB while(len){
;	*str1 -> Y+3
;	*str2 -> Y+1
;	len -> Y+0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0002 00AC *str1= *str2;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0002 00AD str1++;str2++;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0002 00AE len--;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0002 00AF }
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0002 00B0 }
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;void strecpy(char *str1,eeprom char *str2)
; 0002 00B4 {
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0002 00B5 while(*str2){
;	*str1 -> Y+2
;	*str2 -> Y+0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0002 00B6 *str1= *str2;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0002 00B7 str1++;str2++;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0002 00B8 }
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0002 00B9 str2=0;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0002 00BA }
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;void strencpy(char *str1,eeprom char *str2,char num)
; 0002 00BD {
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0002 00BE while(*str2 && num){
;	*str1 -> Y+3
;	*str2 -> Y+1
;	num -> Y+0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0002 00BF *str1= *str2;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0002 00C0 str1++;str2++;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0002 00C1 num--;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0002 00C2 }
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0002 00C3 str2=0;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0002 00C4 }
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;void memecpy(UCHAR *str1,eeprom UCHAR *str2,UCHAR len)
; 0002 00C7 {
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0002 00C8 while(len){
;	*str1 -> Y+3
;	*str2 -> Y+1
;	len -> Y+0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0002 00C9 *str1= *str2;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0002 00CA str1++;str2++;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0002 00CB len--;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0002 00CC }
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0002 00CD }
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;signed char strcmpe(char *str1,eeprom char *str2)
; 0002 00D1 {
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0002 00D2 while(*str1 && *str2){
;	*str1 -> Y+2
;	*str2 -> Y+0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0002 00D3 if(*str1> *str2)return 1;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0002 00D4 if(*str1< *str2)return -1;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0002 00D5 str1++;str2++;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0002 00D6 }
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0002 00D7 return 0;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0002 00D8 }
;PCODE: $000001AB VOL: 0
;void PrintImage(void){
; 0002 00DA void PrintImage(void){
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0002 00DB #ifdef PRINT_DEBUG
; 0002 00DC if(debug){
; 0002 00DD printf("\r\ndebug=%d",tmpimage.debug);
; 0002 00DE while(tx_counter);
; 0002 00DF printf("\r\nfilename = %s",tmpimage.hexfile);
; 0002 00E0 while(tx_counter);
; 0002 00E1 printf("\r\nfw_ver = %s",tmpimage.fw_ver);
; 0002 00E2 while(tx_counter);
; 0002 00E3 printf("\r\nchipname = %s",tmpimage.chipname);
; 0002 00E4 while(tx_counter);
; 0002 00E5 printf("\r\nchipcode = 0x%x",tmpimage.chipcode);
; 0002 00E6 while(tx_counter);
; 0002 00E7 printf("\r\nsignature = %02x %02x %02x",tmpimage.signature[0],tmpimage.signature[1],tmpimage.signature[2]);
; 0002 00E8 while(tx_counter);
; 0002 00E9 printf("\r\nprogfuses = %02x %02x %02x %02x",tmpimage.progfuses[0],tmpimage.progfuses[1],tmpimage.progfuses[2],tmpimage.progfuses[3]);
; 0002 00EA while(tx_counter);
; 0002 00EB //memecpy(normfuses,myimage.normfuses,4);
; 0002 00EC printf("\r\nnormfuses = %02x %02x %02x %02x",tmpimage.normfuses[0],tmpimage.normfuses[1],tmpimage.normfuses[2],tmpimage.normfuses[3]);
; 0002 00ED while(tx_counter);
; 0002 00EE //memecpy(maskfuses,myimage.maskfuses,4);
; 0002 00EF printf("\r\nmaskfuses = %02x %02x %02x %02x",tmpimage.maskfuses[0],tmpimage.maskfuses[1],tmpimage.maskfuses[2],tmpimage.maskfuses[3]);
; 0002 00F0 while(tx_counter);
; 0002 00F1 printf("\r\nchipsizebytes = %lu",tmpimage.chipsize);
; 0002 00F2 while(tx_counter);
; 0002 00F3 printf("\r\npagesizebytes = %u",tmpimage.pagesizebytes);
; 0002 00F4 while(tx_counter);
; 0002 00F5 printf("\r\neepromsizebytes = %lu",tmpimage.eepromsizebytes);
; 0002 00F6 while(tx_counter);
; 0002 00F7 printf("\r\nProgramming Done = %lu",myimage[dirnum].ProgCounterDone);
; 0002 00F8 while(tx_counter);
; 0002 00F9 printf("\r\nProgramming Available = %lu",tmpimage.ProgCounterTotal);
; 0002 00FA while(tx_counter);
; 0002 00FB }
; 0002 00FC #endif
; 0002 00FD }
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;void SetHiSpeed(void)
; 0002 010E {
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0002 010F //UBRR0L = 6; //0b0000.0110  = SCK 1Mhz
; 0002 0110 //UBRR0L = 3; //0b0000.0011  = SCK 2Mhz
; 0002 0111 //UBRR0L = 1; //0b0000.0001  = SCK 3Mhz
; 0002 0112 UBRR0L=0; // SCK = FOSC/2 = (8MHz Int RC)/2 = 4Mhz
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0002 0113 //if(spidiv<5)
; 0002 0114 if(spidiv<6)
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0002 0115 {
; 0002 0116 if(UBRR0L==0 && spidiv==1){
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0002 0117 UBRR0L=1;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0002 0118 }
; 0002 0119 else if(UBRR0L==0 && spidiv>1){
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0002 011A UBRR0L=1;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0002 011B UBRR0L <<= (spidiv-1);
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0002 011C }
; 0002 011D else
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0002 011E UBRR0L <<= spidiv;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0002 011F }
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0002 0120 else
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0002 0121 SetLowSpeed();
;PCODE: $000001E6 VOL: 0
; 0002 0122 }
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;void SetLowSpeed(void)
; 0002 0124 {
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0002 0125 UBRR0L = 0xFF;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0002 0126 }
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;UCHAR TryDecSpeed(void)
; 0002 0128 {
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0002 0129 if((UBRR0L&0x80)==0){
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0002 012A spidiv++;
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0002 012B SetHiSpeed();
;PCODE: $000001F8 VOL: 0
; 0002 012C return TRUE;
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0002 012D }
; 0002 012E else
;PCODE: $000001FB VOL: 0
; 0002 012F return FALSE;
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0002 0130 }
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;UCHAR Call_EnterProgMode(UCHAR IsLowSpeed)
; 0002 0132 {
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0002 0133 UCHAR retry=1;
; 0002 0134 if(IsLowSpeed)
;PCODE: $00000203 VOL: 0
;	IsLowSpeed -> Y+1
;	retry -> R17
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0002 0135 SetLowSpeed();
;PCODE: $00000209 VOL: 0
; 0002 0136 else
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0002 0137 SetHiSpeed();
;PCODE: $0000020C VOL: 0
; 0002 0138 while(retry){
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0002 0139 
; 0002 013A #ifdef PRINT_DEBUG
; 0002 013B printFlashString("\r\nStarting Program Mode... ");
; 0002 013C #endif
; 0002 013D #ifdef PRINT_LCD
; 0002 013E if(CanShow){
; 0002 013F itoa((int)((int)(g_CpuFreq/2)/((int)(UBRR0L)+(int)1)),tmpbytes);   // 1=0,1 2=0,1,2
; 0002 0140 strcatf(tmpbytes,"Khz  ");
; 0002 0141 lcd_puts_row(3,tmpbytes);
; 0002 0142 delay_ms(LCD_MSG_LONG_DELAY);
; 0002 0143 }
; 0002 0144 delay_ms(50);
; 0002 0145 lcd_putsf_row(3,"Enter Prog Mode");
; 0002 0146 if(CanShow)
; 0002 0147 delay_ms(LCD_MSG_SHORT_DELAY);
; 0002 0148 #endif
; 0002 0149 AVR910_Standalone("P");//send enter to prog mode -> should answer 0x0D=ACK  /* Turn on target power */
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0002 014A if(g_txBuf[0]!=ACK){
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0002 014B if(TryDecSpeed())
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0002 014C continue;
;PCODE: $0000021B VOL: 0
; 0002 014D retry=0;
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0002 014E #ifdef PRINT_DEBUG
; 0002 014F printFlashString("FAIL");
; 0002 0150 #endif
; 0002 0151 #ifdef PRINT_LCD
; 0002 0152 lcd_putsf_row3(3,"No target");
; 0002 0153 #endif
; 0002 0154 }
; 0002 0155 else if(Call_ReadSignature()==FALSE){
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0002 0156 if(TryDecSpeed())
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0002 0157 continue;
;PCODE: $00000227 VOL: 0
; 0002 0158 retry=0;
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0002 0159 }
; 0002 015A else
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0002 015B break;
;PCODE: $0000022D VOL: 0
; 0002 015C }
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0002 015D if(retry==0)
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0002 015E return FALSE;
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0002 015F #ifdef PRINT_DEBUG
; 0002 0160 printFlashString(" OK.");
; 0002 0161 #endif
; 0002 0162 #ifdef PRINT_LCD
; 0002 0163 lcd_putsf(" Done");
; 0002 0164 #endif
; 0002 0165 if(IsLowSpeed==FALSE)
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0002 0166 tmpimage.spidiv=spidiv;
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0002 0167 return TRUE;
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0002 0168 }
;PCODE: $00000246 VOL: 0
;UCHAR Call_GetConfig(void){
; 0002 0169 UCHAR Call_GetConfig(void){
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0002 016A #ifdef PRINT_LCD
; 0002 016B lcd_init(16);
; 0002 016C lcd_gotoxy(0,0);
; 0002 016D #endif
; 0002 016E if(sd_mount()==FALSE){// if sdcard is missing
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0002 016F #ifdef PRINT_DEBUG
; 0002 0170 printFlashString("\r\nCall sd_mount func failed \r\n");
; 0002 0171 #endif
; 0002 0172 Beeps(2,1,1);
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0002 0173 goto print_error;
;PCODE: $00000253 VOL: 0
; 0002 0174 }
; 0002 0175 else{//try to copy image definitions from sdcard to eeprom and reset to bootloader to load hex to flash
;PCODE: $00000254 VOL: 0
; 0002 0176 #ifdef PRINT_DEBUG
; 0002 0177 ("\r\nCall sd_mount func ok \r\n");
; 0002 0178 #endif
; 0002 0179 strcpyf(path,"/0/config.ini");
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0002 017A if(ReadFileToBuffer()==FALSE)
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0002 017B goto print_error;
;PCODE: $0000025E VOL: 0
; 0002 017C tador=0;
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0002 017D if((value=ReadValue("upO"))!=NULL)
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0002 017E if(atoi(value)==1)
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0002 017F if((value=ReadValue("downO"))!=NULL)
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0002 0180 if(atoi(value)==1)
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0002 0181 tador=1;
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0002 0182 if(tador!=1){
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0002 0183 if((value=ReadValue("tador"))==NULL)
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0002 0184 tador=0;
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0002 0185 else{
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0002 0186 tador=atoi(value);
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0002 0187 }
;PCODE: $00000292 VOL: 0
; 0002 0188 }
; 0002 0189 
; 0002 018A if(tador==0){
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0002 018B //clear eeprom case
; 0002 018C if((value=ReadValue("up0"))!=NULL)
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0002 018D if(atoi(value)==1)
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0002 018E if((value=ReadValue("down0"))!=NULL)
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0002 018F if(atoi(value)==1)
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0002 0190 {
; 0002 0191 for(folderCounter=0;folderCounter<MAX_FOLDERS;folderCounter++)
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0002 0192 {
; 0002 0193 #ifdef PRINT_LCD_DEBUG
; 0002 0194 lcd_putsf_row(1,"");
; 0002 0195 //lcd_puts_hex(buffer[9]);
; 0002 0196 lcd_puts_hex(buffer[9]&0x0f);
; 0002 0197 //lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[1]);
; 0002 0198 lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[1]&0x0f);
; 0002 0199 lcd_puts_hex(buffer[10]);
; 0002 019A lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[2]);
; 0002 019B //delay_ms(250);
; 0002 019C #endif
; 0002 019D myimage[folderCounter].FolderUniqueValue[0]=0xFF;
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0002 019E myimage[folderCounter].FolderUniqueValue[1]=0xFF;
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0002 019F myimage[folderCounter].FolderUniqueValue[2]=0xFF;
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0002 01A0 }
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0002 01A1 #ifdef PRINT_LCD
; 0002 01A2 lcd_putsf_row(0,"Device erased");
; 0002 01A3 lcd_putsf_row(1,"Remove eras SD");
; 0002 01A4 lcd_putsf_row(2,"Insert norm  SD");
; 0002 01A5 lcd_putsf_row(3,"Power cycle");
; 0002 01A6 #endif
; 0002 01A7 StandaloneMode=PASS;
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 1
; 0002 01A8 Beeps(1,1,1500);
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0002 01A9 while(1);
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0002 01AA }
; 0002 01AB //check if virgin case
; 0002 01AC if((value=ReadValue("virgin"))!=NULL)
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0002 01AD {
; 0002 01AE if( eeprom_read_byte(4) != 0x44 )
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0002 01AF {
; 0002 01B0 eeprom_update_byte(4,0x44);
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0002 01B1 }
; 0002 01B2 //check remove virgin case
; 0002 01B3 if( eeprom_read_byte(4) == 0x44 ){
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0002 01B4 #ifdef PRINT_LCD
; 0002 01B5 lcd_putsf_row(0,"Device unlocked");
; 0002 01B6 lcd_putsf_row(1,"Remove unlck SD");
; 0002 01B7 lcd_putsf_row(2,"Insert norm  SD");
; 0002 01B8 lcd_putsf_row(3,"Power cycle");
; 0002 01B9 #endif
; 0002 01BA StandaloneMode=PASS;
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 1
; 0002 01BB Beeps(1,1,1500);;
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0002 01BC }
; 0002 01BD else{
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0002 01BE #ifdef PRINT_LCD
; 0002 01BF lcd_putsf_row(0,"Failed unlock");
; 0002 01C0 lcd_putsf_row(1,"EEPROM issue");
; 0002 01C1 #endif
; 0002 01C2 StandaloneMode=FAIL;
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 1
; 0002 01C3 Beeps(3,3,500);
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0002 01C4 }
;PCODE: $0000030E VOL: 0
; 0002 01C5 while(1);
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0002 01C6 }
; 0002 01C7 
; 0002 01C8 }//end if(tador==0)
;PCODE: $00000312 VOL: 0
; 0002 01C9 if((value=ReadValue("up"))==NULL)
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0002 01CA if((value=ReadValue("upo"))==NULL)
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0002 01CB if((value=ReadValue("upO"))==NULL)
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0002 01CC if((value=ReadValue("up0"))==NULL)
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
; 0002 01CD goto print_error;
;PCODE: $00000330 VOL: 0
; 0002 01CE g_UpSkip=atoi(value);
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
; 0002 01CF if((value=ReadValue("down"))==NULL)
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0002 01D0 if((value=ReadValue("downo"))==NULL)
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0002 01D1 if((value=ReadValue("downO"))==NULL)
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0002 01D2 if((value=ReadValue("down0"))==NULL)
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0002 01D3 goto print_error;
;PCODE: $00000355 VOL: 0
; 0002 01D4 g_DownSkip=atoi(value);
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0002 01D5 if((value=ReadValue("maxfolders"))==NULL)
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0002 01D6 goto print_error;
;PCODE: $00000365 VOL: 0
; 0002 01D7 g_MaxFolders=atoi(value);
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0002 01D8 if(g_MaxFolders>MAX_FOLDERS)
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
; 0002 01D9 g_MaxFolders=MAX_FOLDERS;
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
; 0002 01DA if((value=ReadValue("cpu_freq"))==NULL)
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0002 01DB g_CpuFreq=8000;//goto print_error;
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0002 01DC else{
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0002 01DD g_CpuFreq=atoi(value);
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
; 0002 01DE }
;PCODE: $00000380 VOL: 0
; 0002 01DF return TRUE;
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
; 0002 01E0 }
;PCODE: $00000383 VOL: 0
; 0002 01E1 #ifdef PRINT_DEBUG
; 0002 01E2 if(debug){
; 0002 01E3 while(tx_counter);
; 0002 01E4 printf("\r\nconfig: Up=%d Down=%d MaxFolders=%d",g_UpSkip,g_DownSkip,g_MaxFolders);
; 0002 01E5 while(tx_counter);}
; 0002 01E6 #endif
; 0002 01E7 print_error:
;PCODE: $00000384 VOL: 0
; 0002 01E8 return FALSE;
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0002 01E9 }
;PCODE: $00000387 VOL: 0
;UCHAR Call_GetDir(void){
; 0002 01EB UCHAR Call_GetDir(void){
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
; 0002 01EC UCHAR i;
; 0002 01ED ResetGlobals();
;PCODE: $0000038A VOL: 0
;	i -> R17
;PCODE: $0000038B VOL: 0
; 0002 01EE if(sd_mount()==FALSE){// if sdcard is missing
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
; 0002 01EF #ifdef PRINT_DEBUG
; 0002 01F0 printFlashString("\r\nCall sd_mount func failed \r\n");
; 0002 01F1 #endif
; 0002 01F2 Beeps(2,1,2);
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0002 01F3 return FALSE;
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0002 01F4 }
; 0002 01F5 else{//try to copy image definitions from sdcard to eeprom and reset to bootloader to load hex to flash
;PCODE: $00000399 VOL: 0
; 0002 01F6 #ifdef PRINT_DEBUG
; 0002 01F7 printFlashString("\r\nCall sd_mount func ok \r\n");
; 0002 01F8 #endif
; 0002 01F9 //myimage[dirnum].RollCounter=63;//test case
; 0002 01FA //tmpimage.RollCounter=myimage[dirnum].RollCounter; //63
; 0002 01FB if( SetRollValue()==FALSE )
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0002 01FC return FALSE;
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
; 0002 01FD #ifdef PRINT_DEBUG
; 0002 01FE if(debug){
; 0002 01FF while(tx_counter);
; 0002 0200 printf("\r\nbuffer\r\n%s",buffer);
; 0002 0201 while(tx_counter);}
; 0002 0202 #endif
; 0002 0203 
; 0002 0204 
; 0002 0205 if((value=ReadValue("pagesize"))==NULL)
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0002 0206 return FALSE;
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
; 0002 0207 tmpimage.pagesizebytes=(atoi(value))<<1;
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
; 0002 0208 //tmpimage.pagesizebytes=hextouint(value);
; 0002 0209 if((value=ReadValue("chipsize"))==NULL)
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
; 0002 020A return FALSE;
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
; 0002 020B tmpimage.chipsize=atol(value);
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
; 0002 020C if((value=ReadValue("eepromsize"))==NULL)
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
; 0002 020D return FALSE;
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
; 0002 020E tmpimage.eepromsizebytes=atol(value);
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
; 0002 020F //tmpimage.chipsize=hextoulong(value);
; 0002 0210 if((value=ReadValue("maskfuses"))==NULL)
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
; 0002 0211 return FALSE;
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
; 0002 0212 hextobytes(value,tmpimage.maskfuses,MAX_FUSES);
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
; 0002 0213 if((value=ReadValue("normfuses"))==NULL)
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
; 0002 0214 return FALSE;
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
; 0002 0215 hextobytes(value,tmpimage.normfuses,MAX_FUSES);
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
; 0002 0216 if((value=ReadValue("progfuses"))==NULL)
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0002 0217 return FALSE;
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
; 0002 0218 hextobytes(value,tmpimage.progfuses,MAX_FUSES);
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0002 0219 if((value=ReadValue("signature"))==NULL)
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
; 0002 021A return FALSE;
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
; 0002 021B hextobytes(value,tmpimage.signature,3);
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
; 0002 021C tmpimage.spidiv=0;
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
; 0002 021D if((value=ReadValue("spidiv"))!=NULL)
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
; 0002 021E {
; 0002 021F tmpimage.spidiv=atoi(value);
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
; 0002 0220 //tmpimage.spidiv=hextobyte(value);
; 0002 0221 }
; 0002 0222 if(tmpimage.spidiv>7)
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
; 0002 0223 tmpimage.spidiv=0;
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
; 0002 0224 spidiv=tmpimage.spidiv;
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0002 0225 strncpy(tmpimage.fw_ver,value=ReadValue("proginfo"),30);
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
; 0002 0226 strncpy(tmpimage.progname,value=ReadValue("progname"),12);
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0002 0227 
; 0002 0228 if(fileRead()==FALSE)
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
; 0002 0229 return FALSE;//from byte 512+
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
; 0002 022A 
; 0002 022B 
; 0002 022C buffer[0]^=0x77;
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
; 0002 022D buffer[1]^=0x77;
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
; 0002 022E buffer[2]^=0x77;
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
; 0002 022F buffer[3]^=0x77;
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
; 0002 0230 buffer[4]^=0x77;
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
; 0002 0231 buffer[5]^=0x77;
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
; 0002 0232 buffer[6]^=0x77;
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
; 0002 0233 buffer[7]^=0x77;
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
; 0002 0234 buffer[8]^=0x77;
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
; 0002 0235 buffer[9]^=0x77;
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
; 0002 0236 buffer[10]^=0x77;
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
; 0002 0237 buffer[11]^=0x77;
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
; 0002 0238 
; 0002 0239 #ifdef PRINT_LCD_DEBUG
; 0002 023A lcd_putsf_row(2,"");
; 0002 023B lcd_puts_hex(buffer[1]);
; 0002 023C lcd_puts_hex(buffer[2]);
; 0002 023D lcd_puts_hex(buffer[4]);
; 0002 023E lcd_puts_hex(buffer[5]);
; 0002 023F lcd_puts_hex(buffer[9]);
; 0002 0240 lcd_puts_hex(buffer[10]);
; 0002 0241 //lcd_puts_hex(g_MaxFolders);
; 0002 0242 delay_ms(1000);
; 0002 0243 #endif
; 0002 0244 if(tador==0){
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
; 0002 0245 //check for unique file name
; 0002 0246 for(folderCounter=0;folderCounter<MAX_FOLDERS;folderCounter++)
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
; 0002 0247 {
; 0002 0248 #ifdef PRINT_LCD_DEBUG
; 0002 0249 lcd_putsf_row(1,"");
; 0002 024A //lcd_puts_hex(buffer[9]);
; 0002 024B lcd_puts_hex(buffer[9]&0x0f);
; 0002 024C //lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[1]);
; 0002 024D lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[1]&0x0f);
; 0002 024E lcd_puts_hex(buffer[10]);
; 0002 024F lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[2]);
; 0002 0250 //delay_ms(250);
; 0002 0251 #endif
; 0002 0252 if((myimage[folderCounter].FolderUniqueValue[1]&0x0f)==(buffer[9]&0x0f))
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
; 0002 0253 if((myimage[folderCounter].FolderUniqueValue[2])==(buffer[10]))
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
; 0002 0254 break;
;PCODE: $000004C5 VOL: 0
; 0002 0255 }
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0002 0256 //if not found then check for empty eeprom space for new entry
; 0002 0257 if(folderCounter==MAX_FOLDERS)
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
; 0002 0258 {
; 0002 0259 for(folderCounter=0;folderCounter<MAX_FOLDERS;folderCounter++)
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
; 0002 025A {
; 0002 025B if(((((myimage[folderCounter].FolderUniqueValue[1])&0x0F)==0x0F)&&(myimage[folderCounter].FolderUniqueValue[2]==0xFF))||
; 0002 025C ((myimage[folderCounter].FolderUniqueValue[0]==0xFF)&&((myimage[folderCounter].FolderUniqueValue[1]&0xF0)==0xF0)))
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
; 0002 025D {
; 0002 025E myimage[folderCounter].FolderUniqueValue[0] = buffer[1];
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
; 0002 025F /*
; 0002 0260 myimage[folderCounter].FolderUniqueValue[1] |= buffer[2]&0xf0;
; 0002 0261 myimage[folderCounter].FolderUniqueValue[1] &=~(buffer[2]&0xf0);
; 0002 0262 myimage[folderCounter].FolderUniqueValue[1]|=buffer[9]&0x0F;
; 0002 0263 myimage[folderCounter].FolderUniqueValue[1]&=~(buffer[9]&0x0F);
; 0002 0264 */
; 0002 0265 myimage[folderCounter].FolderUniqueValue[1]=(buffer[2]&0xF0)|(buffer[9]&0x0F);
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
; 0002 0266 myimage[folderCounter].FolderUniqueValue[2]=buffer[10];
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
; 0002 0267 if(buffer[3]!=0)
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
; 0002 0268 myimage[folderCounter].ProgCounterDone=0;
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
; 0002 0269 break;
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
; 0002 026A }
; 0002 026B }
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
; 0002 026C if(folderCounter==MAX_FOLDERS){
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
; 0002 026D #ifdef PRINT_LCD
; 0002 026E lcd_putsf_row(3,"no eespace ");
; 0002 026F lcd_puts_hex(buffer[9]&0x0f);
; 0002 0270 lcd_puts_hex(buffer[10]);
; 0002 0271 #endif
; 0002 0272 return FALSE;
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
; 0002 0273 }
; 0002 0274 }
;PCODE: $00000543 VOL: 0
; 0002 0275 
; 0002 0276 if(buffer[0]==1)
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
; 0002 0277 { //force change encryptcounter to next one
; 0002 0278 if(tmpimage.ProgCounterTotal!=0 || eeprom_read_byte(4)!=0x44)
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
; 0002 0279 {
; 0002 027A if(buffer[1] <= myimage[folderCounter].FolderUniqueValue[0])
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
; 0002 027B {
; 0002 027C if((buffer[1] < myimage[folderCounter].FolderUniqueValue[0])
; 0002 027D ||((buffer[1] == myimage[folderCounter].FolderUniqueValue[0])
; 0002 027E &&((buffer[2]&0xf0) < (myimage[folderCounter].FolderUniqueValue[1]&0xf0))))
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
; 0002 027F {
; 0002 0280 //copy values from SD to eeprom
; 0002 0281 if((buffer[1]) != (myimage[folderCounter].FolderUniqueValue[0]))
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
; 0002 0282 myimage[folderCounter].FolderUniqueValue[0] = buffer[1];
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
; 0002 0283 if((buffer[2]&0xf0) != (myimage[folderCounter].FolderUniqueValue[1]&0xf0))
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
; 0002 0284 {
; 0002 0285 myimage[folderCounter].FolderUniqueValue[1] &= 0x0F;
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
; 0002 0286 myimage[folderCounter].FolderUniqueValue[1] |= (buffer[2]&0xF0);
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
; 0002 0287 }
; 0002 0288 //check if need reset licenses
; 0002 0289 if(buffer[3]!=0)
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
; 0002 028A {
; 0002 028B //myimage[folderCounter].ProgCounterDone=0;
; 0002 028C }
; 0002 028D }
;PCODE: $000005C5 VOL: 0
; 0002 028E }
;PCODE: $000005C6 VOL: 0
; 0002 028F }
;PCODE: $000005C7 VOL: 0
; 0002 0290 }
;PCODE: $000005C8 VOL: 0
; 0002 0291 //check&print if file counter reach 0xFFE, 1 before last 0xFFF.
; 0002 0292 if(myimage[folderCounter].FolderUniqueValue[0]==0xFF){
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
; 0002 0293 if((myimage[folderCounter].FolderUniqueValue[1]&0xF0)==0xE0)
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
; 0002 0294 { //ask reset the encrypt counter
; 0002 0295 #ifdef PRINT_LCD
; 0002 0296 lcd_putsf_row(3,"last enc.");
; 0002 0297 #endif
; 0002 0298 //return FALSE;
; 0002 0299 }
; 0002 029A }
;PCODE: $000005DD VOL: 0
; 0002 029B tmpimage.ProgCounterTotal=(UINT)((buffer[4]<<8)|buffer[5]); //copy total license
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
; 0002 029C //check file counter first two nibbles 0xFF is not less than in eeprom
; 0002 029D if((tmpimage.ProgCounterTotal!=0 || eeprom_read_byte(4)!=0x44)&&(buffer[1] < myimage[folderCounter].FolderUniqueValue[0])){  // 0x01,0x23
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
; 0002 029E #ifdef PRINT_LCD
; 0002 029F lcd_putsf_row(2,"");
; 0002 02A0 lcd_puts_hex(buffer[1]>>4);
; 0002 02A1 lcd_puts_hex((buffer[1]<<4)|(buffer[2]>>4));
; 0002 02A2 lcd_putsf("<");
; 0002 02A3 lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[0]>>4);
; 0002 02A4 lcd_puts_hex((myimage[folderCounter].FolderUniqueValue[0]<<4)|
; 0002 02A5 (myimage[folderCounter].FolderUniqueValue[1]>>4));
; 0002 02A6 #endif
; 0002 02A7 #ifdef PRINT_LCD
; 0002 02A8 lcd_putsf_row(3,"file is too old");
; 0002 02A9 #endif
; 0002 02AA #ifdef PRINT_LCD_DEBUG
; 0002 02AB lcd_putsf_row(3,"0<");
; 0002 02AC lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[0]);
; 0002 02AD lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[1]);
; 0002 02AE lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[2]);
; 0002 02AF //delay_ms(1000);
; 0002 02B0 #endif
; 0002 02B1 return FALSE;
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
; 0002 02B2 }
; 0002 02B3 //check file counter first two nibbles 0xFF is equal to in eeprom
; 0002 02B4 if((tmpimage.ProgCounterTotal!=0 || eeprom_read_byte(4)!=0x44)&&(buffer[1] == myimage[folderCounter].FolderUniqueValue[0])){
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
; 0002 02B5 //check file counter 3rd nibble 0xF0 is not less than in eeprom
; 0002 02B6 if((buffer[2]&0xf0) < (myimage[folderCounter].FolderUniqueValue[1]&0xf0))
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
; 0002 02B7 {
; 0002 02B8 #ifdef PRINT_LCD
; 0002 02B9 lcd_putsf_row(2,"");
; 0002 02BA lcd_puts_hex(buffer[1]>>4);
; 0002 02BB lcd_puts_hex((buffer[1]<<4)|(buffer[2]>>4));
; 0002 02BC lcd_putsf("<");
; 0002 02BD lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[0]>>4);
; 0002 02BE lcd_puts_hex((myimage[folderCounter].FolderUniqueValue[0]<<4)|
; 0002 02BF (myimage[folderCounter].FolderUniqueValue[1]>>4));
; 0002 02C0 #endif
; 0002 02C1 #ifdef PRINT_LCD
; 0002 02C2 lcd_putsf_row(3,"file is old one");
; 0002 02C3 #endif
; 0002 02C4 #ifdef PRINT_LCD_DEBUG
; 0002 02C5 lcd_putsf_row(3,"=<");
; 0002 02C6 lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[0]);
; 0002 02C7 lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[1]);
; 0002 02C8 lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[2]);
; 0002 02C9 //delay_ms(1000);
; 0002 02CA #endif
; 0002 02CB return FALSE;
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
; 0002 02CC }
; 0002 02CD //check file counter 3rd nibble 0x0F is bigger than in eeprom
; 0002 02CE else if((buffer[2]&0xf0) > (myimage[folderCounter].FolderUniqueValue[1]&0xf0))
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
; 0002 02CF {
; 0002 02D0 //copy values from SD to eeprom
; 0002 02D1 myimage[folderCounter].FolderUniqueValue[1] &= 0x0F;
;PCODE: $0000063F VOL: 0
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
; 0002 02D2 myimage[folderCounter].FolderUniqueValue[1] |= (buffer[2]&0xF0);
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
; 0002 02D3 //check if need reset licenses
; 0002 02D4 if(buffer[3]!=0)
;PCODE: $00000657 VOL: 0
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
;PCODE: $0000065A VOL: 0
; 0002 02D5 myimage[folderCounter].ProgCounterDone=0;
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
; 0002 02D6 #ifdef PRINT_LCD_DEBUG
; 0002 02D7 lcd_putsf_row(3,"=>");
; 0002 02D8 lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[0]);
; 0002 02D9 lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[1]);
; 0002 02DA lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[2]);
; 0002 02DB delay_ms(1000);
; 0002 02DC #endif
; 0002 02DD }
;PCODE: $00000662 VOL: 0
; 0002 02DE }
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
; 0002 02DF //file counter first two nibbles 0xFF is bigger than in eeprom
; 0002 02E0 else{//buffer[1] > myimage[folderCounter].FolderUniqueValue[0]
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
; 0002 02E1 //copy values from SD to eeprom
; 0002 02E2 myimage[folderCounter].FolderUniqueValue[0] = buffer[1];
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
; 0002 02E3 if((buffer[2]&0xf0) != (myimage[folderCounter].FolderUniqueValue[1]&0xf0))
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
; 0002 02E4 {
; 0002 02E5 myimage[folderCounter].FolderUniqueValue[1] &= 0x0F;
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
; 0002 02E6 myimage[folderCounter].FolderUniqueValue[1] |= (buffer[2]&0xF0);
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
; 0002 02E7 }
; 0002 02E8 //check if need reset licenses
; 0002 02E9 if(buffer[3]!=0){
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
; 0002 02EA myimage[folderCounter].ProgCounterDone=0;
;PCODE: $0000069B VOL: 0
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
; 0002 02EB }
; 0002 02EC #ifdef PRINT_LCD_DEBUG
; 0002 02ED lcd_putsf_row(3,"0>");
; 0002 02EE lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[0]);
; 0002 02EF lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[1]);
; 0002 02F0 lcd_puts_hex(myimage[folderCounter].FolderUniqueValue[2]);
; 0002 02F1 delay_ms(1000);
; 0002 02F2 #endif
; 0002 02F3 }
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
; 0002 02F4 if(myimage[folderCounter].ProgCounterDone==0xffff)
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
;PCODE: $000006AB VOL: 0
; 0002 02F5 myimage[folderCounter].ProgCounterDone=0;
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
;PCODE: $000006AE VOL: 0
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
; 0002 02F6 tmpimage.ProgCounterDone=myimage[folderCounter].ProgCounterDone;
;PCODE: $000006B3 VOL: 0
;PCODE: $000006B4 VOL: 0
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
;PCODE: $000006BB VOL: 0
; 0002 02F7 tmpimage.ProgCounterTotal=(UINT)((buffer[4]<<8)|buffer[5]);
;PCODE: $000006BC VOL: 0
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
;PCODE: $000006C5 VOL: 0
; 0002 02F8 }// end if(tador==0)
; 0002 02F9 else{
;PCODE: $000006C6 VOL: 0
;PCODE: $000006C7 VOL: 0
; 0002 02FA tmpimage.ProgCounterDone=0;
;PCODE: $000006C8 VOL: 0
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
; 0002 02FB tmpimage.ProgCounterTotal=0;
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
;PCODE: $000006CD VOL: 0
; 0002 02FC }
;PCODE: $000006CE VOL: 0
; 0002 02FD if(tmpimage.rollValue==0)
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
;PCODE: $000006D2 VOL: 0
; 0002 02FE tmpimage.ProgCounterTotal=0;
;PCODE: $000006D3 VOL: 0
;PCODE: $000006D4 VOL: 0
;PCODE: $000006D5 VOL: 0
; 0002 02FF tmpimage.eepromfile=buffer[6];
;PCODE: $000006D6 VOL: 0
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
; 0002 0300 tmpimage.save_serial=buffer[7];
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
;PCODE: $000006DD VOL: 0
;PCODE: $000006DE VOL: 0
; 0002 0301 tmpimage.save_calib=buffer[8];
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
; 0002 0302 /*
; 0002 0303 lcd_putsf_row(3,"");
; 0002 0304 lcd_puts_hex(dirnum);
; 0002 0305 lcd_puts_hex(tmpimage.ProgCounterTotal>>8);
; 0002 0306 lcd_puts_hex(tmpimage.ProgCounterTotal);
; 0002 0307 lcd_puts_hex(myimage[dirnum].ProgCounterDone>>8);
; 0002 0308 lcd_puts_hex(myimage[dirnum].ProgCounterDone);
; 0002 0309 lcd_puts_hex(myimage[dirnum].EncryptCounter>>8);
; 0002 030A lcd_puts_hex(myimage[dirnum].EncryptCounter);
; 0002 030B delay_ms(3000);
; 0002 030C */
; 0002 030D /*
; 0002 030E if(buffer[10]!=dirnum){// buffer[9]<<8|buffer[10]=dirnum
; 0002 030F #ifdef PRINT_LCD
; 0002 0310 lcd_putsf_row(3,"Wrong file dir.");
; 0002 0311 //delay_ms(3000);
; 0002 0312 #endif
; 0002 0313 return FALSE;
; 0002 0314 }
; 0002 0315 */
; 0002 0316 #ifdef PRINT_DEBUG
; 0002 0317 if(debug){
; 0002 0318 while(tx_counter);
; 0002 0319 while(tx_counter);
; 0002 031A printf("\r\nproginfo=%s",tmpimage.fw_ver);
; 0002 031B printf("\r\nspidiv=%d",tmpimage.spidiv);
; 0002 031C while(tx_counter);}
; 0002 031D #endif
; 0002 031E print_image:
;PCODE: $000006E3 VOL: 0
; 0002 031F #ifdef BOOTEEPROM
; 0002 0320 CopyEepromToRam();
; 0002 0321 #endif
; 0002 0322 #ifdef PRINT_DEBUG
; 0002 0323 PrintImage();
; 0002 0324 #endif
; 0002 0325 #ifdef BOOTEEPROM
; 0002 0326 myimage.FlashStartAddrByte=FLASH_START_ADDR_WORD<<1;
; 0002 0327 AVR910_Standalone("E");//reboot  to bootloader
; 0002 0328 #endif
; 0002 0329 }
;PCODE: $000006E4 VOL: 0
; 0002 032A return TRUE;
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
; 0002 032B }
;PCODE: $000006E8 VOL: 0
;void ResetGlobals(void)
; 0002 032E {
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
; 0002 032F CanContinueRead=0;
;PCODE: $000006EB VOL: 0
;PCODE: $000006EC VOL: 0
; 0002 0330 EndOfFile=0;
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
; 0002 0331 g_Operation = OPERATION_READ;
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
; 0002 0332 g_BlockMode = FALSE;
;PCODE: $000006F1 VOL: 0
;PCODE: $000006F2 VOL: 0
; 0002 0333 OffsetX16=0;
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
; 0002 0334 blankpage=FALSE;
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
; 0002 0335 pageaddr=0;//reset address byte counter
;PCODE: $000006F7 VOL: 0
;PCODE: $000006F8 VOL: 0
; 0002 0336 }
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
;UCHAR Call_ReadSignature(void)
; 0002 0338 {
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
; 0002 0339 //delay_ms(200);
; 0002 033A AVR910_Standalone("s");//send read signature -> Figure out what kind of CPU
;PCODE: $000006FD VOL: 0
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
; 0002 033B #ifdef PRINT_DEBUG
; 0002 033C if(debug){
; 0002 033D while(tx_counter);
; 0002 033E printf("\r\nTarget signature is: %02x %02x %02x",g_txBuf[0],g_txBuf[1],g_txBuf[2]);
; 0002 033F while(tx_counter);}
; 0002 0340 #endif
; 0002 0341 //AVR910 ReadSignature order is 02(3) 97(2) 1E(1) so need to reverse it
; 0002 0342 if((tmpimage.signature[1]!=g_txBuf[1])||(tmpimage.signature[2]!=g_txBuf[2])){
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
;PCODE: $00000703 VOL: 0
;PCODE: $00000704 VOL: 0
;PCODE: $00000705 VOL: 0
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
;PCODE: $00000708 VOL: 0
;PCODE: $00000709 VOL: 0
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
;PCODE: $0000070D VOL: 0
;PCODE: $0000070E VOL: 0
; 0002 0343 #ifdef PRINT_DEBUG
; 0002 0344 printFlashString(" Wrong target\r\n");
; 0002 0345 #endif
; 0002 0346 delay_ms(1000);
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
; 0002 0347 #ifdef PRINT_LCD
; 0002 0348 lcd_putsf_row(3,"Wrong target");
; 0002 0349 #endif
; 0002 034A return FALSE;
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
; 0002 034B }
; 0002 034C #ifdef PRINT_DEBUG
; 0002 034D printFlashString("\r\nReading signature: OK.");
; 0002 034E #endif
; 0002 034F #ifdef PRINT_LCD
; 0002 0350 lcd_putsf_row(3,"Signature OK.");
; 0002 0351 #endif
; 0002 0352 AVR910_SendRxToUart();// reset get spi  buffer
;PCODE: $00000714 VOL: 0
;PCODE: $00000715 VOL: 0
; 0002 0353 return TRUE;
;PCODE: $00000716 VOL: 0
;PCODE: $00000717 VOL: 0
; 0002 0354 }
;PCODE: $00000718 VOL: 0
;UCHAR Call_ReadCalibrationByte(void)
; 0002 0356 {
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
; 0002 0357 delay_ms(200);
;PCODE: $0000071B VOL: 0
;PCODE: $0000071C VOL: 0
;PCODE: $0000071D VOL: 0
; 0002 0358 AVR910_Standalone("W");//send read calibration bytes
;PCODE: $0000071E VOL: 0
;PCODE: $0000071F VOL: 0
;PCODE: $00000720 VOL: 0
;PCODE: $00000721 VOL: 0
; 0002 0359 g_CalibBytes[0]=g_txBuf[0];
;PCODE: $00000722 VOL: 0
;PCODE: $00000723 VOL: 0
; 0002 035A g_CalibBytes[1]=g_txBuf[1];
;PCODE: $00000724 VOL: 0
;PCODE: $00000725 VOL: 0
;PCODE: $00000726 VOL: 0
;PCODE: $00000727 VOL: 0
; 0002 035B g_CalibBytes[2]=g_txBuf[2];
;PCODE: $00000728 VOL: 0
;PCODE: $00000729 VOL: 0
;PCODE: $0000072A VOL: 0
;PCODE: $0000072B VOL: 0
; 0002 035C g_CalibBytes[3]=g_txBuf[3];
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
;PCODE: $0000072E VOL: 0
;PCODE: $0000072F VOL: 0
; 0002 035D #ifdef PRINT_DEBUG
; 0002 035E if(debug){
; 0002 035F while(tx_counter);
; 0002 0360 printf("\r\nTarget signature is: %02x %02x %02x %02x",g_txBuf[0],g_txBuf[1],g_txBuf[2],g_txBuf[3]);
; 0002 0361 while(tx_counter);}
; 0002 0362 #endif
; 0002 0363 //AVR910 ReadSignature order is 02(3) 97(2) 1E(1) so need to reverse it
; 0002 0364 #ifdef PRINT_DEBUG
; 0002 0365 printFlashString("\r\nReading calibration bytes: OK.");
; 0002 0366 #endif
; 0002 0367 #ifdef PRINT_LCD
; 0002 0368 if(CanShow){
; 0002 0369 lcd_putsf_row(3,"CLB:");
; 0002 036A lcd_puts_hex(g_CalibBytes[0]);
; 0002 036B lcd_puts_hex(g_CalibBytes[1]);
; 0002 036C lcd_puts_hex(g_CalibBytes[2]);
; 0002 036D lcd_puts_hex(g_CalibBytes[3]);
; 0002 036E delay_ms(LCD_MSG_LONG_DELAY);
; 0002 036F }
; 0002 0370 #endif
; 0002 0371 AVR910_SendRxToUart();
;PCODE: $00000730 VOL: 0
; 0002 0372 return TRUE;
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
; 0002 0373 }
;PCODE: $00000733 VOL: 0
;void Call_Erase(void)
; 0002 0375 {
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
; 0002 0376 //delay_ms(200);
; 0002 0377 #ifdef PRINT_DEBUG
; 0002 0378 printFlashString("\r\nErasing please wait... ");
; 0002 0379 #endif
; 0002 037A #ifdef PRINT_LCD
; 0002 037B lcd_putsf_row(3,"Erasing... ");
; 0002 037C #endif
; 0002 037D AVR910_Standalone("e");//chip erase
;PCODE: $00000736 VOL: 0
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
;PCODE: $00000739 VOL: 0
; 0002 037E #ifdef PRINT_DEBUG
; 0002 037F if(debug){
; 0002 0380 printf("Done.");
; 0002 0381 while(tx_counter);}
; 0002 0382 #endif
; 0002 0383 #ifdef PRINT_LCD
; 0002 0384 lcd_putsf("Done");
; 0002 0385 #endif
; 0002 0386 AVR910_ResetTXData();
;PCODE: $0000073A VOL: 0
; 0002 0387 }
;PCODE: $0000073B VOL: 0
;PCODE: $0000073C VOL: 0
;UCHAR Call_SetDevType(void)
; 0002 0389 {
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
; 0002 038A g_DevicePollCode=tmpimage.pagesizebytes/2;
;PCODE: $0000073F VOL: 0
;PCODE: $00000740 VOL: 0
;PCODE: $00000741 VOL: 0
;PCODE: $00000742 VOL: 0
; 0002 038B g_DeviceType=MEGA;
;PCODE: $00000743 VOL: 0
;PCODE: $00000744 VOL: 0
; 0002 038C return TRUE;
;PCODE: $00000745 VOL: 0
;PCODE: $00000746 VOL: 0
; 0002 038D }
;PCODE: $00000747 VOL: 0
;UCHAR Call_WriteProgFuses(void)
; 0002 038F {
;PCODE: $00000748 VOL: 0
;PCODE: $00000749 VOL: 0
; 0002 0390 SetLowSpeed();
;PCODE: $0000074A VOL: 0
; 0002 0391 //delay_ms(100);
; 0002 0392 #ifdef PRINT_LCD
; 0002 0393 if(CanShow){
; 0002 0394 lcd_putsf_row(3,"Prog Fuses ");
; 0002 0395 }
; 0002 0396 #endif
; 0002 0397 if (! programFuses(tmpimage.progfuses, tmpimage.maskfuses)){        // get fuses ready to program
;PCODE: $0000074B VOL: 0
;PCODE: $0000074C VOL: 0
;PCODE: $0000074D VOL: 0
;PCODE: $0000074E VOL: 0
;PCODE: $0000074F VOL: 0
;PCODE: $00000750 VOL: 0
;PCODE: $00000751 VOL: 0
;PCODE: $00000752 VOL: 0
;PCODE: $00000753 VOL: 0
; 0002 0398 error("\r\nProgram Fuses fail");
;PCODE: $00000754 VOL: 0
;PCODE: $00000755 VOL: 0
;PCODE: $00000756 VOL: 0
;PCODE: $00000757 VOL: 0
; 0002 0399 #ifdef PRINT_LCD
; 0002 039A lcd_putsf_row3(3,"Prog Fuses fail");
; 0002 039B #endif
; 0002 039C return FALSE;
;PCODE: $00000758 VOL: 0
;PCODE: $00000759 VOL: 0
; 0002 039D }
; 0002 039E if (! verifyFuses(tmpimage.progfuses, tmpimage.maskfuses) ) {
;PCODE: $0000075A VOL: 0
;PCODE: $0000075B VOL: 0
;PCODE: $0000075C VOL: 0
;PCODE: $0000075D VOL: 0
;PCODE: $0000075E VOL: 0
;PCODE: $0000075F VOL: 0
;PCODE: $00000760 VOL: 0
;PCODE: $00000761 VOL: 0
;PCODE: $00000762 VOL: 0
;PCODE: $00000763 VOL: 0
; 0002 039F error("\r\nFailed to verify fuses");
;PCODE: $00000764 VOL: 0
;PCODE: $00000765 VOL: 0
;PCODE: $00000766 VOL: 0
;PCODE: $00000767 VOL: 0
; 0002 03A0 #ifdef PRINT_LCD
; 0002 03A1 lcd_putsf_row3(3,"Chk Fuses fail");
; 0002 03A2 #endif
; 0002 03A3 return FALSE;
;PCODE: $00000768 VOL: 0
;PCODE: $00000769 VOL: 0
; 0002 03A4 }
; 0002 03A5 #ifdef PRINT_DEBUG
; 0002 03A6 printFlashString("\r\nProgram Fuses Verified OK.");
; 0002 03A7 #endif
; 0002 03A8 if(CanShow){
;PCODE: $0000076A VOL: 0
;PCODE: $0000076B VOL: 0
;PCODE: $0000076C VOL: 0
;PCODE: $0000076D VOL: 0
; 0002 03A9 #ifdef PRINT_LCD
; 0002 03AA lcd_putsf("done");
; 0002 03AB #endif
; 0002 03AC }
; 0002 03AD return TRUE;
;PCODE: $0000076E VOL: 0
;PCODE: $0000076F VOL: 0
;PCODE: $00000770 VOL: 0
; 0002 03AE }
;PCODE: $00000771 VOL: 0
;UCHAR Call_WriteFlash(void)
; 0002 03B0 {
;PCODE: $00000772 VOL: 0
;PCODE: $00000773 VOL: 0
; 0002 03B1 //here g_DeviceCode=chipcode, g_DevicePollCode=PageSize in words, g_DeviceType = MEGA
; 0002 03B2 //['A',0x10,0x00]=SetAddr(); g_Addr=0x1000;
; 0002 03B3 /*Set g_Addr=0 start address for BlockMode*/
; 0002 03B4 SetHiSpeed();
;PCODE: $00000774 VOL: 0
; 0002 03B5 delay_ms(100);
;PCODE: $00000775 VOL: 0
;PCODE: $00000776 VOL: 0
;PCODE: $00000777 VOL: 0
; 0002 03B6 AVR910_SendRxToUart();FIFO_Write('A');FIFO_Write(0);FIFO_Write(0);AVR910_Command();
;PCODE: $00000778 VOL: 0
;PCODE: $00000779 VOL: 0
;PCODE: $0000077A VOL: 0
;PCODE: $0000077B VOL: 0
;PCODE: $0000077C VOL: 0
;PCODE: $0000077D VOL: 0
;PCODE: $0000077E VOL: 0
;PCODE: $0000077F VOL: 0
;PCODE: $00000780 VOL: 0
;PCODE: $00000781 VOL: 0
;PCODE: $00000782 VOL: 0
; 0002 03B7 if(g_txBuf[0]!=ACK){
;PCODE: $00000783 VOL: 0
;PCODE: $00000784 VOL: 0
;PCODE: $00000785 VOL: 0
; 0002 03B8 #ifdef PRINT_DEBUG
; 0002 03B9 printFlashString("\r\nSetAddr FAIL");
; 0002 03BA #endif
; 0002 03BB return FALSE;
;PCODE: $00000786 VOL: 0
;PCODE: $00000787 VOL: 0
; 0002 03BC }
; 0002 03BD //here g_Addr=0;
; 0002 03BE //['B',0x00,0x80,'F'] WriteBlockCommand();g_BlockMode=TRUE;g_Operation=OPERATION_WRITE;g_BlockSize=0x0080;g_WordCount=0;g_MemType='Flash'(/2) -> BlockSize=0x0040
; 0002 03BF AVR910_SendRxToUart();//clear uart
;PCODE: $00000788 VOL: 0
;PCODE: $00000789 VOL: 0
; 0002 03C0 /*Set BlockMode chip size in bytes and type of memory Flash F or Eeprom E*/
; 0002 03C1 FIFO_Write('B');FIFO_Write(tmpimage.chipsize>>16);FIFO_Write(tmpimage.chipsize>>8);FIFO_Write(tmpimage.chipsize&0xFF);FIFO_Write('F');AVR910_Command();
;PCODE: $0000078A VOL: 0
;PCODE: $0000078B VOL: 0
;PCODE: $0000078C VOL: 0
;PCODE: $0000078D VOL: 0
;PCODE: $0000078E VOL: 0
;PCODE: $0000078F VOL: 0
;PCODE: $00000790 VOL: 0
;PCODE: $00000791 VOL: 0
;PCODE: $00000792 VOL: 0
;PCODE: $00000793 VOL: 0
;PCODE: $00000794 VOL: 0
;PCODE: $00000795 VOL: 0
;PCODE: $00000796 VOL: 0
;PCODE: $00000797 VOL: 0
;PCODE: $00000798 VOL: 0
;PCODE: $00000799 VOL: 0
;PCODE: $0000079A VOL: 0
;PCODE: $0000079B VOL: 0
;PCODE: $0000079C VOL: 0
;PCODE: $0000079D VOL: 0
;PCODE: $0000079E VOL: 0
;PCODE: $0000079F VOL: 0
;PCODE: $000007A0 VOL: 0
; 0002 03C2 //AVR910_Command();
; 0002 03C3 //here should be g_BlockSize(words)=chipsize/2, g_MemType='F'=flash, g_BlockMode=TRUE, g_Operation=Write, g_WordCount=0
; 0002 03C4 //do while pageaddr in bytes less than chipsize in bytes
; 0002 03C5 printFlashString("\r\nWriting flash...");
;PCODE: $000007A1 VOL: 0
;PCODE: $000007A2 VOL: 0
;PCODE: $000007A3 VOL: 0
;PCODE: $000007A4 VOL: 0
; 0002 03C6 #ifdef PRINT_LCD
; 0002 03C7 if(CanShow){
; 0002 03C8 itoa((int)((int)(g_CpuFreq/2)/((int)(UBRR0L)+(int)1)),tmpbytes);   // 1=0,1 2=0,1,2
; 0002 03C9 strcatf(tmpbytes,"Khz  ");
; 0002 03CA lcd_puts_row(3,tmpbytes);
; 0002 03CB lcd_putchar((spidiv)+'0');
; 0002 03CC delay_ms(LCD_MSG_LONG_DELAY);
; 0002 03CD }
; 0002 03CE lcd_putsf_row(3,"Flashing");
; 0002 03CF #endif
; 0002 03D0 if(fileOpen()==0)
;PCODE: $000007A5 VOL: 0
;PCODE: $000007A6 VOL: 0
;PCODE: $000007A7 VOL: 0
; 0002 03D1 return FALSE;
;PCODE: $000007A8 VOL: 0
;PCODE: $000007A9 VOL: 0
; 0002 03D2 #ifdef PRINT_DEBUG
; 0002 03D3 printFlashString("\r\nAfter fileOpen\r\n");
; 0002 03D4 #endif
; 0002 03D5 if(SetFlashArea()==0)
;PCODE: $000007AA VOL: 0
;PCODE: $000007AB VOL: 0
;PCODE: $000007AC VOL: 0
;PCODE: $000007AD VOL: 0
; 0002 03D6 return FALSE;
;PCODE: $000007AE VOL: 0
;PCODE: $000007AF VOL: 0
; 0002 03D7 #ifdef PRINT_DEBUG
; 0002 03D8 printFlashString("\r\nAfter set adr 1000\r\n");
; 0002 03D9 #endif
; 0002 03DA if(fileRead()==0)
;PCODE: $000007B0 VOL: 0
;PCODE: $000007B1 VOL: 0
;PCODE: $000007B2 VOL: 0
;PCODE: $000007B3 VOL: 0
; 0002 03DB return FALSE;
;PCODE: $000007B4 VOL: 0
;PCODE: $000007B5 VOL: 0
; 0002 03DC while (pageaddr < tmpimage.chipsize) {
;PCODE: $000007B6 VOL: 0
;PCODE: $000007B7 VOL: 0
;PCODE: $000007B8 VOL: 0
;PCODE: $000007B9 VOL: 0
;PCODE: $000007BA VOL: 0
;PCODE: $000007BB VOL: 0
;PCODE: $000007BC VOL: 0
; 0002 03DD //puts("\r\nBuffering page "); puthexchars(pageaddr);
; 0002 03DE //hextextpos = readImagePage (hextext, pageaddr, pagesize, pageBuffer);
; 0002 03DF 
; 0002 03E0 if(readImagePageSD (pageaddr, tmpimage.pagesizebytes, pageBuffer)==0){
;PCODE: $000007BD VOL: 0
;PCODE: $000007BE VOL: 0
;PCODE: $000007BF VOL: 0
;PCODE: $000007C0 VOL: 0
;PCODE: $000007C1 VOL: 0
;PCODE: $000007C2 VOL: 0
;PCODE: $000007C3 VOL: 0
;PCODE: $000007C4 VOL: 0
;PCODE: $000007C5 VOL: 0
;PCODE: $000007C6 VOL: 0
; 0002 03E1 #ifdef PRINT_DEBUG
; 0002 03E2 printFlashString("\r\nFlash programming failed");
; 0002 03E3 #endif
; 0002 03E4 #ifndef BOOTEEPROM
; 0002 03E5 fileClose();
;PCODE: $000007C7 VOL: 0
; 0002 03E6 #endif
; 0002 03E7 return FALSE;
;PCODE: $000007C8 VOL: 0
;PCODE: $000007C9 VOL: 0
; 0002 03E8 }
; 0002 03E9 #ifdef DEBUG_PROTEUS
; 0002 03EA #ifdef PRINT_DEBUG
; 0002 03EB if(debug){
; 0002 03EC while(tx_counter);
; 0002 03ED printf("\r\nPage addr=%lu",pageaddr);
; 0002 03EE while(tx_counter);}
; 0002 03EF #endif
; 0002 03F0 #endif
; 0002 03F1 if (FALSE == blankpage) {//if there data to write the all page buffer to flash
;PCODE: $000007CA VOL: 0
;PCODE: $000007CB VOL: 0
;PCODE: $000007CC VOL: 0
;PCODE: $000007CD VOL: 0
; 0002 03F2 if (! flashPage(pageBuffer, tmpimage.pagesizebytes)){//
;PCODE: $000007CE VOL: 0
;PCODE: $000007CF VOL: 0
;PCODE: $000007D0 VOL: 0
;PCODE: $000007D1 VOL: 0
;PCODE: $000007D2 VOL: 0
;PCODE: $000007D3 VOL: 0
;PCODE: $000007D4 VOL: 0
;PCODE: $000007D5 VOL: 0
; 0002 03F3 #ifdef PRINT_DEBUG
; 0002 03F4 printFlashString("\r\nFlash programming failed");
; 0002 03F5 #endif
; 0002 03F6 #ifndef BOOTEEPROM
; 0002 03F7 fileClose();
;PCODE: $000007D6 VOL: 0
; 0002 03F8 #endif
; 0002 03F9 return FALSE;
;PCODE: $000007D7 VOL: 0
;PCODE: $000007D8 VOL: 0
; 0002 03FA }
; 0002 03FB }
;PCODE: $000007D9 VOL: 0
; 0002 03FC else{//if no data to write, just increment the address in words by pagesize in words, and decrement remain g_BlockSize
;PCODE: $000007DA VOL: 0
;PCODE: $000007DB VOL: 0
; 0002 03FD g_Addr = (pageaddr+tmpimage.pagesizebytes)/2;
;PCODE: $000007DC VOL: 0
;PCODE: $000007DD VOL: 0
;PCODE: $000007DE VOL: 0
;PCODE: $000007DF VOL: 0
;PCODE: $000007E0 VOL: 0
;PCODE: $000007E1 VOL: 0
;PCODE: $000007E2 VOL: 0
;PCODE: $000007E3 VOL: 0
; 0002 03FE g_BlockSize-=(tmpimage.pagesizebytes/2);
;PCODE: $000007E4 VOL: 0
;PCODE: $000007E5 VOL: 0
;PCODE: $000007E6 VOL: 0
;PCODE: $000007E7 VOL: 0
;PCODE: $000007E8 VOL: 0
;PCODE: $000007E9 VOL: 0
;PCODE: $000007EA VOL: 0
; 0002 03FF }
;PCODE: $000007EB VOL: 0
; 0002 0400 if(EndOfFile)
;PCODE: $000007EC VOL: 0
;PCODE: $000007ED VOL: 0
;PCODE: $000007EE VOL: 0
; 0002 0401 break;
;PCODE: $000007EF VOL: 0
; 0002 0402 #ifdef PRINT_LCD
; 0002 0403 if(CanShow){
; 0002 0404 lcd_gotoxy(9,3);
; 0002 0405 itoa((int)((float)pageaddr/(float)tmpimage.chipsize*(float)100),&temptext[0]);
; 0002 0406 if((strlen(temptext))<3){
; 0002 0407 lcd_puts(temptext);
; 0002 0408 lcd_putsf("%");
; 0002 0409 }
; 0002 040A }
; 0002 040B #endif
; 0002 040C pageaddr += tmpimage.pagesizebytes;//increment the address in bytes by pagesize in bytes
;PCODE: $000007F0 VOL: 0
;PCODE: $000007F1 VOL: 0
;PCODE: $000007F2 VOL: 0
;PCODE: $000007F3 VOL: 0
;PCODE: $000007F4 VOL: 0
;PCODE: $000007F5 VOL: 0
;PCODE: $000007F6 VOL: 0
; 0002 040D 
; 0002 040E 
; 0002 040F }
;PCODE: $000007F7 VOL: 0
;PCODE: $000007F8 VOL: 0
; 0002 0410 #ifdef PRINT_LCD
; 0002 0411 lcd_putsf_row(3,"");
; 0002 0412 #endif
; 0002 0413 #ifdef PRINT_DEBUG
; 0002 0414 printFlashString(" Done.");
; 0002 0415 #endif
; 0002 0416 #ifndef BOOTEEPROM
; 0002 0417 fileClose();
;PCODE: $000007F9 VOL: 0
; 0002 0418 #endif
; 0002 0419 return TRUE;
;PCODE: $000007FA VOL: 0
;PCODE: $000007FB VOL: 0
; 0002 041A }
;PCODE: $000007FC VOL: 0
;UCHAR Call_WriteFlashBin(void)
; 0002 041C {
;PCODE: $000007FD VOL: 0
;PCODE: $000007FE VOL: 0
; 0002 041D SetHiSpeed();
;PCODE: $000007FF VOL: 0
; 0002 041E //delay_ms(100);
; 0002 041F #ifdef PRINT_LCD
; 0002 0420 if(CanShow){
; 0002 0421 itoa((int)((int)(g_CpuFreq/2)/((int)(UBRR0L)+(int)1)),tmpbytes);   // 1=0,1 2=0,1,2
; 0002 0422 strcatf(tmpbytes,"Khz  ");
; 0002 0423 lcd_puts_row(3,tmpbytes);
; 0002 0424 lcd_putchar((spidiv)+'0');
; 0002 0425 delay_ms(LCD_MSG_LONG_DELAY);
; 0002 0426 }
; 0002 0427 lcd_putsf_row(3,"Writing FLASH..");
; 0002 0428 #endif
; 0002 0429 if(WriteBlockBin()==FALSE){
;PCODE: $00000800 VOL: 0
;PCODE: $00000801 VOL: 0
;PCODE: $00000802 VOL: 0
; 0002 042A #ifdef PRINT_LCD
; 0002 042B lcd_putsf_row(3,"FLASH Failed!!!");
; 0002 042C #endif
; 0002 042D return FALSE;
;PCODE: $00000803 VOL: 0
;PCODE: $00000804 VOL: 0
; 0002 042E }
; 0002 042F #ifdef PRINT_LCD
; 0002 0430 lcd_putsf_row(3,"");
; 0002 0431 #endif
; 0002 0432 #ifdef PRINT_DEBUG
; 0002 0433 printFlashString(" Done.");
; 0002 0434 #endif
; 0002 0435 #ifndef BOOTEEPROM
; 0002 0436 fileClose();
;PCODE: $00000805 VOL: 0
;PCODE: $00000806 VOL: 0
; 0002 0437 #endif
; 0002 0438 return TRUE;
;PCODE: $00000807 VOL: 0
;PCODE: $00000808 VOL: 0
; 0002 0439 }
;PCODE: $00000809 VOL: 0
;UCHAR Call_WriteEeprom(void)
; 0002 043C {
;PCODE: $0000080A VOL: 0
;PCODE: $0000080B VOL: 0
; 0002 043D ResetGlobals();
;PCODE: $0000080C VOL: 0
; 0002 043E SetHiSpeed();
;PCODE: $0000080D VOL: 0
; 0002 043F /* Switch the memory type to EEPROM */
; 0002 0440 g_MemType='E';
;PCODE: $0000080E VOL: 0
;PCODE: $0000080F VOL: 0
; 0002 0441 //delay_ms(100);
; 0002 0442 /*
; 0002 0443 strcpyf(path,"/");
; 0002 0444 itoa(dirnum,tmpbytes);
; 0002 0445 strcat(path,tmpbytes);// "/1"
; 0002 0446 strcatf(path,"/");// "/1/"
; 0002 0447 strcatf(path,"eeprom.hex");// "/1/config.ini"
; 0002 0448 */
; 0002 0449 /*Try Read the eeprom.hex file first time*/
; 0002 044A //if(ReadFileToBuffer()==FALSE)
; 0002 044B //    return TRUE;
; 0002 044C /* Set g_Addr=0 */
; 0002 044D AVR910_SendRxToUart();FIFO_Write('A');FIFO_Write(0);FIFO_Write(0);AVR910_Command();
;PCODE: $00000810 VOL: 0
;PCODE: $00000811 VOL: 0
;PCODE: $00000812 VOL: 0
;PCODE: $00000813 VOL: 0
;PCODE: $00000814 VOL: 0
;PCODE: $00000815 VOL: 0
;PCODE: $00000816 VOL: 0
;PCODE: $00000817 VOL: 0
;PCODE: $00000818 VOL: 0
;PCODE: $00000819 VOL: 0
;PCODE: $0000081A VOL: 0
; 0002 044E if(g_txBuf[0]!=ACK){
;PCODE: $0000081B VOL: 0
;PCODE: $0000081C VOL: 0
;PCODE: $0000081D VOL: 0
; 0002 044F printFlashString("\r\nSetAddr FAIL");
;PCODE: $0000081E VOL: 0
;PCODE: $0000081F VOL: 0
;PCODE: $00000820 VOL: 0
;PCODE: $00000821 VOL: 0
; 0002 0450 return FALSE;
;PCODE: $00000822 VOL: 0
;PCODE: $00000823 VOL: 0
; 0002 0451 }
; 0002 0452 /*Write Eeprom memory byte by byte*/
; 0002 0453 #ifdef PRINT_DEBUG
; 0002 0454 printFlashString("\r\nWriting eeprom...");
; 0002 0455 #endif
; 0002 0456 #ifdef PRINT_LCD
; 0002 0457 lcd_putsf_row(3,"Writing EEPROM.");
; 0002 0458 #endif
; 0002 0459 pageaddr = 0;
;PCODE: $00000824 VOL: 0
;PCODE: $00000825 VOL: 0
;PCODE: $00000826 VOL: 0
; 0002 045A blankpage = FALSE;
;PCODE: $00000827 VOL: 0
;PCODE: $00000828 VOL: 0
; 0002 045B #ifdef PRINT_DEBUG
; 0002 045C if(debug){
; 0002 045D while(tx_counter);
; 0002 045E printf("\r\nPage addr=%lu , eeprom size=%u\r\n",pageaddr,tmpimage.eepromsizebytes);
; 0002 045F while(tx_counter);}
; 0002 0460 #endif
; 0002 0461 LastOffset=0x40800L;
;PCODE: $00000829 VOL: 0
;PCODE: $0000082A VOL: 0
; 0002 0462 if(SetBinFileOffset(LastOffset)==FALSE)
;PCODE: $0000082B VOL: 0
;PCODE: $0000082C VOL: 0
;PCODE: $0000082D VOL: 0
;PCODE: $0000082E VOL: 0
;PCODE: $0000082F VOL: 0
; 0002 0463 return FALSE;
;PCODE: $00000830 VOL: 0
;PCODE: $00000831 VOL: 0
; 0002 0464 if(fileRead()==FALSE)
;PCODE: $00000832 VOL: 0
;PCODE: $00000833 VOL: 0
;PCODE: $00000834 VOL: 0
;PCODE: $00000835 VOL: 0
; 0002 0465 return FALSE;
;PCODE: $00000836 VOL: 0
;PCODE: $00000837 VOL: 0
; 0002 0466 /*
; 0002 0467 lcd_putsf_row(1,"");
; 0002 0468 lcd_puts_hex(buffer[0]);
; 0002 0469 lcd_puts_hex(buffer[1]);
; 0002 046A lcd_puts_hex(buffer[2]);
; 0002 046B lcd_puts_hex(buffer[3]);
; 0002 046C lcd_putsf_row(2,"");
; 0002 046D lcd_puts_hex(LastOffset>>16);
; 0002 046E lcd_puts_hex(LastOffset>>8);
; 0002 046F lcd_puts_hex(LastOffset);
; 0002 0470 lcd_puts_hex(nbytes>>8);
; 0002 0471 lcd_puts_hex(nbytes);
; 0002 0472 */
; 0002 0473 while (pageaddr < tmpimage.eepromsizebytes) {
;PCODE: $00000838 VOL: 0
;PCODE: $00000839 VOL: 0
;PCODE: $0000083A VOL: 0
;PCODE: $0000083B VOL: 0
;PCODE: $0000083C VOL: 0
;PCODE: $0000083D VOL: 0
;PCODE: $0000083E VOL: 0
;PCODE: $0000083F VOL: 0
; 0002 0474 AVR910_ResetTXData();
;PCODE: $00000840 VOL: 0
; 0002 0475 if(readImagePageSD (pageaddr, PAGE_SIZE_BYTES, pageBuffer)==0){
;PCODE: $00000841 VOL: 0
;PCODE: $00000842 VOL: 0
;PCODE: $00000843 VOL: 0
;PCODE: $00000844 VOL: 0
;PCODE: $00000845 VOL: 0
;PCODE: $00000846 VOL: 0
;PCODE: $00000847 VOL: 0
;PCODE: $00000848 VOL: 0
;PCODE: $00000849 VOL: 0
; 0002 0476 #ifdef PRINT_DEBUG
; 0002 0477 printFlashString("\r\nEEPROM programming failed");
; 0002 0478 #endif
; 0002 0479 #ifndef BOOTEEPROM
; 0002 047A fileClose();
;PCODE: $0000084A VOL: 0
; 0002 047B #endif
; 0002 047C return FALSE;
;PCODE: $0000084B VOL: 0
;PCODE: $0000084C VOL: 0
; 0002 047D }
; 0002 047E #ifdef PRINT_DEBUG
; 0002 047F if(debug){
; 0002 0480 while(tx_counter);
; 0002 0481 printf("\r\nPage addr=%lu , eeprom size=%u",pageaddr,tmpimage.eepromsizebytes);
; 0002 0482 while(tx_counter);}
; 0002 0483 #endif
; 0002 0484 if (FALSE == blankpage) {//if there data to write the all page buffer to flash
;PCODE: $0000084D VOL: 0
;PCODE: $0000084E VOL: 0
;PCODE: $0000084F VOL: 0
;PCODE: $00000850 VOL: 0
; 0002 0485 if(WriteChipEeprom(pageBuffer,PAGE_SIZE_BYTES,pageaddr)==FALSE){
;PCODE: $00000851 VOL: 0
;PCODE: $00000852 VOL: 0
;PCODE: $00000853 VOL: 0
;PCODE: $00000854 VOL: 0
;PCODE: $00000855 VOL: 0
;PCODE: $00000856 VOL: 0
;PCODE: $00000857 VOL: 0
;PCODE: $00000858 VOL: 0
;PCODE: $00000859 VOL: 0
; 0002 0486 #ifdef PRINT_DEBUG
; 0002 0487 printFlashString("\r\nEEPROM programming failed");
; 0002 0488 #endif
; 0002 0489 #ifndef BOOTEEPROM
; 0002 048A fileClose();
;PCODE: $0000085A VOL: 0
; 0002 048B #endif
; 0002 048C return FALSE;
;PCODE: $0000085B VOL: 0
;PCODE: $0000085C VOL: 0
; 0002 048D }
; 0002 048E }
;PCODE: $0000085D VOL: 0
; 0002 048F else{
;PCODE: $0000085E VOL: 0
;PCODE: $0000085F VOL: 0
; 0002 0490 #ifdef PRINT_DEBUG
; 0002 0491 printFlashString("\r\nIs blank.\r\n");
; 0002 0492 #endif
; 0002 0493 }
;PCODE: $00000860 VOL: 0
; 0002 0494 if(EndOfFile){
;PCODE: $00000861 VOL: 0
;PCODE: $00000862 VOL: 0
;PCODE: $00000863 VOL: 0
; 0002 0495 #ifdef PRINT_DEBUG
; 0002 0496 printFlashString("\r\nEnd of file.\r\n");
; 0002 0497 break;
; 0002 0498 #endif
; 0002 0499 }
; 0002 049A pageaddr += PAGE_SIZE_BYTES;//increment the address in bytes by pagesize in bytes
;PCODE: $00000864 VOL: 0
;PCODE: $00000865 VOL: 0
;PCODE: $00000866 VOL: 0
;PCODE: $00000867 VOL: 0
; 0002 049B }
;PCODE: $00000868 VOL: 0
;PCODE: $00000869 VOL: 0
; 0002 049C #ifdef PRINT_DEBUG
; 0002 049D printFlashString(" Done.");
; 0002 049E #endif
; 0002 049F #ifndef BOOTEEPROM
; 0002 04A0 fileClose();
;PCODE: $0000086A VOL: 0
; 0002 04A1 #endif
; 0002 04A2 return TRUE;
;PCODE: $0000086B VOL: 0
;PCODE: $0000086C VOL: 0
; 0002 04A3 }
;PCODE: $0000086D VOL: 0
;UCHAR Call_VerifyEeprom(void)
; 0002 04A6 {
;PCODE: $0000086E VOL: 0
;PCODE: $0000086F VOL: 0
; 0002 04A7 ResetGlobals();
;PCODE: $00000870 VOL: 0
; 0002 04A8 SetHiSpeed();
;PCODE: $00000871 VOL: 0
; 0002 04A9 g_MemType='E';
;PCODE: $00000872 VOL: 0
;PCODE: $00000873 VOL: 0
; 0002 04AA //delay_ms(100);
; 0002 04AB /*
; 0002 04AC strcpyf(path,"/");
; 0002 04AD itoa(dirnum,tmpbytes);
; 0002 04AE strcat(path,tmpbytes);// "/1"
; 0002 04AF strcatf(path,"/");// "/1/"
; 0002 04B0 strcatf(path,"eeprom.hex");// "/1/config.ini"
; 0002 04B1 */
; 0002 04B2 /*Try Read the eeprom.hex file first time*/
; 0002 04B3 //if(ReadFileToBuffer()==FALSE)
; 0002 04B4 //    return TRUE;
; 0002 04B5 /* Switch the memory type to EEPROM */
; 0002 04B6 AVR910_SendRxToUart();FIFO_Write('A');FIFO_Write(0);FIFO_Write(0);AVR910_Command();
;PCODE: $00000874 VOL: 0
;PCODE: $00000875 VOL: 0
;PCODE: $00000876 VOL: 0
;PCODE: $00000877 VOL: 0
;PCODE: $00000878 VOL: 0
;PCODE: $00000879 VOL: 0
;PCODE: $0000087A VOL: 0
;PCODE: $0000087B VOL: 0
;PCODE: $0000087C VOL: 0
;PCODE: $0000087D VOL: 0
;PCODE: $0000087E VOL: 0
; 0002 04B7 if(g_txBuf[0]!=ACK){
;PCODE: $0000087F VOL: 0
;PCODE: $00000880 VOL: 0
;PCODE: $00000881 VOL: 0
; 0002 04B8 #ifdef PRINT_DEBUG
; 0002 04B9 printFlashString("\r\nSetAddr FAIL");
; 0002 04BA #endif
; 0002 04BB return FALSE;
;PCODE: $00000882 VOL: 0
;PCODE: $00000883 VOL: 0
; 0002 04BC }
; 0002 04BD //here g_Addr=0;
; 0002 04BE AVR910_SendRxToUart();//clear uart
;PCODE: $00000884 VOL: 0
;PCODE: $00000885 VOL: 0
; 0002 04BF /*Write Eeprom memory byte by byte*/
; 0002 04C0 #ifdef PRINT_DEBUG
; 0002 04C1 printFlashString("\r\nVerify eeprom...");
; 0002 04C2 #endif
; 0002 04C3 #ifdef PRINT_LCD
; 0002 04C4 lcd_putsf_row(3,"Verify EEPROM");
; 0002 04C5 #endif
; 0002 04C6 pageaddr = 0;
;PCODE: $00000886 VOL: 0
;PCODE: $00000887 VOL: 0
; 0002 04C7 blankpage = FALSE;
;PCODE: $00000888 VOL: 0
;PCODE: $00000889 VOL: 0
; 0002 04C8 LastOffset=0x40800L;
;PCODE: $0000088A VOL: 0
;PCODE: $0000088B VOL: 0
; 0002 04C9 if(SetBinFileOffset(LastOffset)==FALSE)
;PCODE: $0000088C VOL: 0
;PCODE: $0000088D VOL: 0
;PCODE: $0000088E VOL: 0
;PCODE: $0000088F VOL: 0
;PCODE: $00000890 VOL: 0
; 0002 04CA return FALSE;
;PCODE: $00000891 VOL: 0
;PCODE: $00000892 VOL: 0
; 0002 04CB if(fileRead()==FALSE)
;PCODE: $00000893 VOL: 0
;PCODE: $00000894 VOL: 0
;PCODE: $00000895 VOL: 0
;PCODE: $00000896 VOL: 0
; 0002 04CC return FALSE;
;PCODE: $00000897 VOL: 0
;PCODE: $00000898 VOL: 0
; 0002 04CD while (pageaddr < tmpimage.eepromsizebytes) {
;PCODE: $00000899 VOL: 0
;PCODE: $0000089A VOL: 0
;PCODE: $0000089B VOL: 0
;PCODE: $0000089C VOL: 0
;PCODE: $0000089D VOL: 0
;PCODE: $0000089E VOL: 0
;PCODE: $0000089F VOL: 0
;PCODE: $000008A0 VOL: 0
; 0002 04CE if(readImagePageSD (pageaddr, PAGE_SIZE_BYTES, pageBuffer)==0){
;PCODE: $000008A1 VOL: 0
;PCODE: $000008A2 VOL: 0
;PCODE: $000008A3 VOL: 0
;PCODE: $000008A4 VOL: 0
;PCODE: $000008A5 VOL: 0
;PCODE: $000008A6 VOL: 0
;PCODE: $000008A7 VOL: 0
;PCODE: $000008A8 VOL: 0
;PCODE: $000008A9 VOL: 0
; 0002 04CF #ifdef PRINT_DEBUG
; 0002 04D0 printFlashString("\r\nEEPROM verifying failed");
; 0002 04D1 #endif
; 0002 04D2 #ifndef BOOTEEPROM
; 0002 04D3 fileClose();
;PCODE: $000008AA VOL: 0
; 0002 04D4 #endif
; 0002 04D5 return FALSE;
;PCODE: $000008AB VOL: 0
;PCODE: $000008AC VOL: 0
; 0002 04D6 }
; 0002 04D7 #ifdef DEBUG_PROTEUS
; 0002 04D8 #ifdef PRINT_DEBUG
; 0002 04D9 if(debug){
; 0002 04DA while(tx_counter);
; 0002 04DB printf("\r\nPage addr=%lu",pageaddr);
; 0002 04DC while(tx_counter);}
; 0002 04DD #endif
; 0002 04DE #endif
; 0002 04DF if (FALSE == blankpage) {//if there data to write the all page buffer to flash
;PCODE: $000008AD VOL: 0
;PCODE: $000008AE VOL: 0
;PCODE: $000008AF VOL: 0
;PCODE: $000008B0 VOL: 0
; 0002 04E0 if(VerifyChipEeprom(pageBuffer,PAGE_SIZE_BYTES,pageaddr)==FALSE){
;PCODE: $000008B1 VOL: 0
;PCODE: $000008B2 VOL: 0
;PCODE: $000008B3 VOL: 0
;PCODE: $000008B4 VOL: 0
;PCODE: $000008B5 VOL: 0
;PCODE: $000008B6 VOL: 0
;PCODE: $000008B7 VOL: 0
;PCODE: $000008B8 VOL: 0
;PCODE: $000008B9 VOL: 0
; 0002 04E1 #ifdef PRINT_DEBUG
; 0002 04E2 printFlashString("\r\nEeprom verifying failed");
; 0002 04E3 #endif
; 0002 04E4 #ifndef BOOTEEPROM
; 0002 04E5 fileClose();
;PCODE: $000008BA VOL: 0
; 0002 04E6 #endif
; 0002 04E7 #ifdef PRINT_LCD
; 0002 04E8 lcd_putsf_row3(3,"Verify ee failed");
; 0002 04E9 #endif
; 0002 04EA return FALSE;
;PCODE: $000008BB VOL: 0
;PCODE: $000008BC VOL: 0
; 0002 04EB }
; 0002 04EC }
;PCODE: $000008BD VOL: 0
; 0002 04ED if(EndOfFile){
;PCODE: $000008BE VOL: 0
;PCODE: $000008BF VOL: 0
;PCODE: $000008C0 VOL: 0
;PCODE: $000008C1 VOL: 0
; 0002 04EE #ifdef PRINT_DEBUG
; 0002 04EF printFlashString("\r\nEnd of file.\r\n");
; 0002 04F0 #endif
; 0002 04F1 break;
;PCODE: $000008C2 VOL: 0
; 0002 04F2 }
; 0002 04F3 pageaddr += PAGE_SIZE_BYTES;//increment the address in bytes by pagesize in bytes
;PCODE: $000008C3 VOL: 0
;PCODE: $000008C4 VOL: 0
;PCODE: $000008C5 VOL: 0
;PCODE: $000008C6 VOL: 0
; 0002 04F4 }
;PCODE: $000008C7 VOL: 0
;PCODE: $000008C8 VOL: 0
; 0002 04F5 #ifdef PRINT_DEBUG
; 0002 04F6 printFlashString(" Done.");
; 0002 04F7 #endif
; 0002 04F8 #ifndef BOOTEEPROM
; 0002 04F9 fileClose();
;PCODE: $000008C9 VOL: 0
; 0002 04FA #endif
; 0002 04FB return TRUE;
;PCODE: $000008CA VOL: 0
;PCODE: $000008CB VOL: 0
; 0002 04FC }
;PCODE: $000008CC VOL: 0
;UCHAR Call_ResetChip(UCHAR IsLowSpeed)
; 0002 04FF {
;PCODE: $000008CD VOL: 0
;PCODE: $000008CE VOL: 0
; 0002 0500 #ifdef PRINT_DEBUG
; 0002 0501 printFlashString("\r\nReseting chip...\r\n");
; 0002 0502 #endif
; 0002 0503 AVR910_ResetTXData();
;	IsLowSpeed -> Y+0
;PCODE: $000008CF VOL: 0
; 0002 0504 AVR910_Standalone("L");//end_pmode();
;PCODE: $000008D0 VOL: 0
;PCODE: $000008D1 VOL: 0
;PCODE: $000008D2 VOL: 0
;PCODE: $000008D3 VOL: 0
; 0002 0505 return Call_EnterProgMode(IsLowSpeed);
;PCODE: $000008D4 VOL: 0
;PCODE: $000008D5 VOL: 0
;PCODE: $000008D6 VOL: 0
;PCODE: $000008D7 VOL: 0
;PCODE: $000008D8 VOL: 0
; 0002 0506 }
;PCODE: $000008D9 VOL: 0
;void printFlashString(flash char *str)
; 0002 0508 {
;PCODE: $000008DA VOL: 0
;PCODE: $000008DB VOL: 0
; 0002 0509 #ifdef PRINT_DEBUG
; 0002 050A if(debug){
; 0002 050B while(tx_counter);
; 0002 050C putsf(str);
; 0002 050D while(tx_counter);}
; 0002 050E #endif
; 0002 050F }
;PCODE: $000008DC VOL: 0
;PCODE: $000008DD VOL: 0
;PCODE: $000008DE VOL: 0
;UCHAR SaveSerialToEepromAndInc()
; 0002 0511 {
;PCODE: $000008DF VOL: 0
;PCODE: $000008E0 VOL: 0
; 0002 0512 UINT    EepromStartAddress;
; 0002 0513 ULONG   SerialToWriteToEeprom;
; 0002 0514 ResetGlobals();
;PCODE: $000008E1 VOL: 0
;PCODE: $000008E2 VOL: 0
;PCODE: $000008E3 VOL: 0
;	EepromStartAddress -> R16,R17
;	SerialToWriteToEeprom -> Y+2
;PCODE: $000008E4 VOL: 0
; 0002 0515 g_MemType='E';
;PCODE: $000008E5 VOL: 0
;PCODE: $000008E6 VOL: 0
; 0002 0516 strcpyf(path,"/");
;PCODE: $000008E7 VOL: 0
;PCODE: $000008E8 VOL: 0
;PCODE: $000008E9 VOL: 0
;PCODE: $000008EA VOL: 0
;PCODE: $000008EB VOL: 0
;PCODE: $000008EC VOL: 0
; 0002 0517 itoa(dirnum,tmpbytes);
;PCODE: $000008ED VOL: 0
;PCODE: $000008EE VOL: 0
;PCODE: $000008EF VOL: 0
;PCODE: $000008F0 VOL: 0
;PCODE: $000008F1 VOL: 0
;PCODE: $000008F2 VOL: 0
; 0002 0518 strcat(path,tmpbytes);// "/1"
;PCODE: $000008F3 VOL: 0
;PCODE: $000008F4 VOL: 0
;PCODE: $000008F5 VOL: 0
;PCODE: $000008F6 VOL: 0
;PCODE: $000008F7 VOL: 0
; 0002 0519 strcatf(path,"/");// "/1/"
;PCODE: $000008F8 VOL: 0
;PCODE: $000008F9 VOL: 0
;PCODE: $000008FA VOL: 0
;PCODE: $000008FB VOL: 0
;PCODE: $000008FC VOL: 0
;PCODE: $000008FD VOL: 0
; 0002 051A //strcat(path,tmpbytes);// "/1/1"
; 0002 051B strcatf(path,"serial.txt");// "/1/config.ini"
;PCODE: $000008FE VOL: 0
;PCODE: $000008FF VOL: 0
;PCODE: $00000900 VOL: 0
;PCODE: $00000901 VOL: 0
;PCODE: $00000902 VOL: 0
;PCODE: $00000903 VOL: 0
; 0002 051C /*Read last saved serial from serial.txt file*/
; 0002 051D if(ReadFileToBuffer()==FALSE)
;PCODE: $00000904 VOL: 0
;PCODE: $00000905 VOL: 0
;PCODE: $00000906 VOL: 0
; 0002 051E return FALSE; // if file not exists then no need to write serial to eeprom
;PCODE: $00000907 VOL: 0
;PCODE: $00000908 VOL: 0
;PCODE: $00000909 VOL: 0
;PCODE: $0000090A VOL: 0
;PCODE: $0000090B VOL: 0
;PCODE: $0000090C VOL: 0
;PCODE: $0000090D VOL: 0
; 0002 051F /* Read start address where to put the serial in eeprom */
; 0002 0520 if((value=ReadValue("startaddress"))==NULL)
;PCODE: $0000090E VOL: 0
;PCODE: $0000090F VOL: 0
;PCODE: $00000910 VOL: 0
;PCODE: $00000911 VOL: 0
;PCODE: $00000912 VOL: 0
;PCODE: $00000913 VOL: 0
;PCODE: $00000914 VOL: 0
;PCODE: $00000915 VOL: 0
; 0002 0521 return FALSE;
;PCODE: $00000916 VOL: 0
;PCODE: $00000917 VOL: 0
;PCODE: $00000918 VOL: 0
;PCODE: $00000919 VOL: 0
;PCODE: $0000091A VOL: 0
;PCODE: $0000091B VOL: 0
;PCODE: $0000091C VOL: 0
; 0002 0522 EepromStartAddress=hextouint(value);
;PCODE: $0000091D VOL: 0
;PCODE: $0000091E VOL: 0
;PCODE: $0000091F VOL: 0
;PCODE: $00000920 VOL: 0
;PCODE: $00000921 VOL: 0
; 0002 0523 #ifdef PRINT_DEBUG
; 0002 0524 if(debug){
; 0002 0525 while(tx_counter);
; 0002 0526 printf("\r\startaddress = %lu",EepromStartAddress);
; 0002 0527 while(tx_counter);}
; 0002 0528 #endif
; 0002 0529 /* Read the serial that need to write in eeprom */
; 0002 052A if((value=ReadValue("nextserial"))==NULL)
;PCODE: $00000922 VOL: 0
;PCODE: $00000923 VOL: 0
;PCODE: $00000924 VOL: 0
;PCODE: $00000925 VOL: 0
;PCODE: $00000926 VOL: 0
;PCODE: $00000927 VOL: 0
;PCODE: $00000928 VOL: 0
; 0002 052B return FALSE;
;PCODE: $00000929 VOL: 0
;PCODE: $0000092A VOL: 0
;PCODE: $0000092B VOL: 0
;PCODE: $0000092C VOL: 0
;PCODE: $0000092D VOL: 0
;PCODE: $0000092E VOL: 0
;PCODE: $0000092F VOL: 0
; 0002 052C SerialToWriteToEeprom = hextoulong(value);
;PCODE: $00000930 VOL: 0
;PCODE: $00000931 VOL: 0
;PCODE: $00000932 VOL: 0
;PCODE: $00000933 VOL: 0
;PCODE: $00000934 VOL: 0
; 0002 052D #ifdef PRINT_DEBUG
; 0002 052E if(debug){
; 0002 052F while(tx_counter);
; 0002 0530 printf("\r\nread 'nextserial' that will put to eeprom = %lu",SerialToWriteToEeprom);
; 0002 0531 while(tx_counter);}
; 0002 0532 #endif
; 0002 0533 if(SerialToWriteToEeprom==0)
;PCODE: $00000935 VOL: 0
;PCODE: $00000936 VOL: 0
;PCODE: $00000937 VOL: 0
; 0002 0534 return TRUE;
;PCODE: $00000938 VOL: 0
;PCODE: $00000939 VOL: 0
;PCODE: $0000093A VOL: 0
;PCODE: $0000093B VOL: 0
;PCODE: $0000093C VOL: 0
;PCODE: $0000093D VOL: 0
;PCODE: $0000093E VOL: 0
; 0002 0535 /*Convert ascii ulong value to ulong(4 bytes) byte by byte*/
; 0002 0536 tmpbytes[0]=(hexton(value[0])<<4)|(hexton(value[1])&0x0f);
;PCODE: $0000093F VOL: 0
;PCODE: $00000940 VOL: 0
;PCODE: $00000941 VOL: 0
;PCODE: $00000942 VOL: 0
;PCODE: $00000943 VOL: 0
;PCODE: $00000944 VOL: 0
;PCODE: $00000945 VOL: 0
;PCODE: $00000946 VOL: 0
;PCODE: $00000947 VOL: 0
;PCODE: $00000948 VOL: 0
;PCODE: $00000949 VOL: 0
;PCODE: $0000094A VOL: 0
;PCODE: $0000094B VOL: 0
;PCODE: $0000094C VOL: 0
;PCODE: $0000094D VOL: 0
; 0002 0537 tmpbytes[1]=(hexton(value[2])<<4)|(hexton(value[3])&0x0f);
;PCODE: $0000094E VOL: 0
;PCODE: $0000094F VOL: 0
;PCODE: $00000950 VOL: 0
;PCODE: $00000951 VOL: 0
;PCODE: $00000952 VOL: 0
;PCODE: $00000953 VOL: 0
;PCODE: $00000954 VOL: 0
;PCODE: $00000955 VOL: 0
;PCODE: $00000956 VOL: 0
;PCODE: $00000957 VOL: 0
;PCODE: $00000958 VOL: 0
;PCODE: $00000959 VOL: 0
;PCODE: $0000095A VOL: 0
;PCODE: $0000095B VOL: 0
;PCODE: $0000095C VOL: 0
; 0002 0538 tmpbytes[2]=(hexton(value[4])<<4)|(hexton(value[5])&0x0f);
;PCODE: $0000095D VOL: 0
;PCODE: $0000095E VOL: 0
;PCODE: $0000095F VOL: 0
;PCODE: $00000960 VOL: 0
;PCODE: $00000961 VOL: 0
;PCODE: $00000962 VOL: 0
;PCODE: $00000963 VOL: 0
;PCODE: $00000964 VOL: 0
;PCODE: $00000965 VOL: 0
;PCODE: $00000966 VOL: 0
;PCODE: $00000967 VOL: 0
;PCODE: $00000968 VOL: 0
;PCODE: $00000969 VOL: 0
;PCODE: $0000096A VOL: 0
;PCODE: $0000096B VOL: 0
; 0002 0539 tmpbytes[3]=(hexton(value[6])<<4)|(hexton(value[7])&0x0f);
;PCODE: $0000096C VOL: 0
;PCODE: $0000096D VOL: 0
;PCODE: $0000096E VOL: 0
;PCODE: $0000096F VOL: 0
;PCODE: $00000970 VOL: 0
;PCODE: $00000971 VOL: 0
;PCODE: $00000972 VOL: 0
;PCODE: $00000973 VOL: 0
;PCODE: $00000974 VOL: 0
;PCODE: $00000975 VOL: 0
;PCODE: $00000976 VOL: 0
;PCODE: $00000977 VOL: 0
;PCODE: $00000978 VOL: 0
;PCODE: $00000979 VOL: 0
;PCODE: $0000097A VOL: 0
; 0002 053A /*Write serial byte by byte to eeprom*/
; 0002 053B if(WriteChipEeprom(tmpbytes,4,EepromStartAddress)==FALSE){
;PCODE: $0000097B VOL: 0
;PCODE: $0000097C VOL: 0
;PCODE: $0000097D VOL: 0
;PCODE: $0000097E VOL: 0
;PCODE: $0000097F VOL: 0
;PCODE: $00000980 VOL: 0
;PCODE: $00000981 VOL: 0
;PCODE: $00000982 VOL: 0
; 0002 053C #ifdef PRINT_DEBUG
; 0002 053D printFlashString("\r\nWrite serial to eeprom failed");
; 0002 053E #endif
; 0002 053F #ifdef PRINT_LCD
; 0002 0540 lcd_putsf_row3(3,"EE write fail");
; 0002 0541 #endif
; 0002 0542 return FALSE;
;PCODE: $00000983 VOL: 0
;PCODE: $00000984 VOL: 0
;PCODE: $00000985 VOL: 0
;PCODE: $00000986 VOL: 0
;PCODE: $00000987 VOL: 0
;PCODE: $00000988 VOL: 0
;PCODE: $00000989 VOL: 0
; 0002 0543 }
; 0002 0544 if(VerifyChipEeprom(tmpbytes,4,EepromStartAddress)==FALSE){
;PCODE: $0000098A VOL: 0
;PCODE: $0000098B VOL: 0
;PCODE: $0000098C VOL: 0
;PCODE: $0000098D VOL: 0
;PCODE: $0000098E VOL: 0
;PCODE: $0000098F VOL: 0
;PCODE: $00000990 VOL: 0
;PCODE: $00000991 VOL: 0
;PCODE: $00000992 VOL: 0
; 0002 0545 printFlashString("\r\nVrify serial vs eeprom failed");
;PCODE: $00000993 VOL: 0
;PCODE: $00000994 VOL: 0
;PCODE: $00000995 VOL: 0
;PCODE: $00000996 VOL: 0
; 0002 0546 #ifdef PRINT_LCD
; 0002 0547 lcd_putsf_row3(3,"EE verify fail");
; 0002 0548 #endif
; 0002 0549 return FALSE;
;PCODE: $00000997 VOL: 0
;PCODE: $00000998 VOL: 0
;PCODE: $00000999 VOL: 0
;PCODE: $0000099A VOL: 0
;PCODE: $0000099B VOL: 0
;PCODE: $0000099C VOL: 0
;PCODE: $0000099D VOL: 0
; 0002 054A }
; 0002 054B 
; 0002 054C /*prepare the tmpbytes with next serial in ascii 8 chars*/
; 0002 054D sprintf(tmpbytes,"%08lX",SerialToWriteToEeprom+1);
;PCODE: $0000099E VOL: 0
;PCODE: $0000099F VOL: 0
;PCODE: $000009A0 VOL: 0
;PCODE: $000009A1 VOL: 0
;PCODE: $000009A2 VOL: 0
;PCODE: $000009A3 VOL: 0
;PCODE: $000009A4 VOL: 0
;PCODE: $000009A5 VOL: 0
;PCODE: $000009A6 VOL: 0
;PCODE: $000009A7 VOL: 0
;PCODE: $000009A8 VOL: 0
;PCODE: $000009A9 VOL: 0
;PCODE: $000009AA VOL: 0
; 0002 054E #ifdef PRINT_DEBUG
; 0002 054F if(debug){
; 0002 0550 while(tx_counter);
; 0002 0551 printf("\r\nwill write to serial.txt at 'nextserial' field 'tmpbytes'=%s",tmpbytes);
; 0002 0552 while(tx_counter);}
; 0002 0553 #endif
; 0002 0554 if(WriteConfigValue("nextserial",tmpbytes,8)==FALSE)
;PCODE: $000009AB VOL: 0
;PCODE: $000009AC VOL: 0
;PCODE: $000009AD VOL: 0
;PCODE: $000009AE VOL: 0
;PCODE: $000009AF VOL: 0
;PCODE: $000009B0 VOL: 0
;PCODE: $000009B1 VOL: 0
;PCODE: $000009B2 VOL: 0
;PCODE: $000009B3 VOL: 0
;PCODE: $000009B4 VOL: 0
; 0002 0555 return FALSE;
;PCODE: $000009B5 VOL: 0
;PCODE: $000009B6 VOL: 0
;PCODE: $000009B7 VOL: 0
;PCODE: $000009B8 VOL: 0
;PCODE: $000009B9 VOL: 0
;PCODE: $000009BA VOL: 0
;PCODE: $000009BB VOL: 0
; 0002 0556 if(ReadFileToBuffer()==FALSE)
;PCODE: $000009BC VOL: 0
;PCODE: $000009BD VOL: 0
;PCODE: $000009BE VOL: 0
;PCODE: $000009BF VOL: 0
; 0002 0557 return FALSE;
;PCODE: $000009C0 VOL: 0
;PCODE: $000009C1 VOL: 0
;PCODE: $000009C2 VOL: 0
;PCODE: $000009C3 VOL: 0
;PCODE: $000009C4 VOL: 0
;PCODE: $000009C5 VOL: 0
;PCODE: $000009C6 VOL: 0
; 0002 0558 if((value=ReadValue("nextserial"))==NULL)
;PCODE: $000009C7 VOL: 0
;PCODE: $000009C8 VOL: 0
;PCODE: $000009C9 VOL: 0
;PCODE: $000009CA VOL: 0
;PCODE: $000009CB VOL: 0
;PCODE: $000009CC VOL: 0
;PCODE: $000009CD VOL: 0
;PCODE: $000009CE VOL: 0
; 0002 0559 return FALSE;
;PCODE: $000009CF VOL: 0
;PCODE: $000009D0 VOL: 0
;PCODE: $000009D1 VOL: 0
;PCODE: $000009D2 VOL: 0
;PCODE: $000009D3 VOL: 0
;PCODE: $000009D4 VOL: 0
;PCODE: $000009D5 VOL: 0
; 0002 055A #ifdef PRINT_DEBUG
; 0002 055B if(debug){
; 0002 055C while(tx_counter);
; 0002 055D printf("\r\nread saved in serial.txt 'nextserial'=%lu",hextoulong(value));
; 0002 055E while(tx_counter);}
; 0002 055F #endif
; 0002 0560 #ifdef PRINT_LCD
; 0002 0561 lcd_putsf_row3(3,"SN: ");
; 0002 0562 ltoa(SerialToWriteToEeprom,tmpbytes);
; 0002 0563 lcd_puts(tmpbytes);
; 0002 0564 if(CanShow)
; 0002 0565 delay_ms(LCD_MSG_LONG_DELAY);
; 0002 0566 #endif
; 0002 0567 return TRUE;
;PCODE: $000009D6 VOL: 0
;PCODE: $000009D7 VOL: 0
;PCODE: $000009D8 VOL: 0
;PCODE: $000009D9 VOL: 0
;PCODE: $000009DA VOL: 0
;PCODE: $000009DB VOL: 0
;PCODE: $000009DC VOL: 0
;PCODE: $000009DD VOL: 0
; 0002 0568 }
;PCODE: $000009DE VOL: 0
;UCHAR SaveCalibBytesToEeprom()
; 0002 056A {
;PCODE: $000009DF VOL: 0
;PCODE: $000009E0 VOL: 0
; 0002 056B UINT    EepromStartAddress;
; 0002 056C if(Call_ReadCalibrationByte()==FALSE)
;PCODE: $000009E1 VOL: 0
;PCODE: $000009E2 VOL: 0
;	EepromStartAddress -> R16,R17
;PCODE: $000009E3 VOL: 0
;PCODE: $000009E4 VOL: 0
;PCODE: $000009E5 VOL: 0
; 0002 056D return FALSE;
;PCODE: $000009E6 VOL: 0
;PCODE: $000009E7 VOL: 0
;PCODE: $000009E8 VOL: 0
; 0002 056E ResetGlobals();
;PCODE: $000009E9 VOL: 0
;PCODE: $000009EA VOL: 0
; 0002 056F g_MemType='E';
;PCODE: $000009EB VOL: 0
;PCODE: $000009EC VOL: 0
; 0002 0570 strcpyf(path,"/");
;PCODE: $000009ED VOL: 0
;PCODE: $000009EE VOL: 0
;PCODE: $000009EF VOL: 0
;PCODE: $000009F0 VOL: 0
;PCODE: $000009F1 VOL: 0
;PCODE: $000009F2 VOL: 0
; 0002 0571 itoa(dirnum,tmpbytes);
;PCODE: $000009F3 VOL: 0
;PCODE: $000009F4 VOL: 0
;PCODE: $000009F5 VOL: 0
;PCODE: $000009F6 VOL: 0
;PCODE: $000009F7 VOL: 0
;PCODE: $000009F8 VOL: 0
; 0002 0572 strcat(path,tmpbytes);// "/1"
;PCODE: $000009F9 VOL: 0
;PCODE: $000009FA VOL: 0
;PCODE: $000009FB VOL: 0
;PCODE: $000009FC VOL: 0
;PCODE: $000009FD VOL: 0
; 0002 0573 strcatf(path,"/");// "/1/"
;PCODE: $000009FE VOL: 0
;PCODE: $000009FF VOL: 0
;PCODE: $00000A00 VOL: 0
;PCODE: $00000A01 VOL: 0
;PCODE: $00000A02 VOL: 0
;PCODE: $00000A03 VOL: 0
; 0002 0574 //strcat(path,tmpbytes);// "/1/1"
; 0002 0575 strcatf(path,"calbytes.txt");// "/1/config.ini"
;PCODE: $00000A04 VOL: 0
;PCODE: $00000A05 VOL: 0
;PCODE: $00000A06 VOL: 0
;PCODE: $00000A07 VOL: 0
;PCODE: $00000A08 VOL: 0
;PCODE: $00000A09 VOL: 0
; 0002 0576 /*Read last saved serial from serial.txt file*/
; 0002 0577 if(ReadFileToBuffer()==FALSE)
;PCODE: $00000A0A VOL: 0
;PCODE: $00000A0B VOL: 0
;PCODE: $00000A0C VOL: 0
; 0002 0578 return FALSE;
;PCODE: $00000A0D VOL: 0
;PCODE: $00000A0E VOL: 0
;PCODE: $00000A0F VOL: 0
; 0002 0579 /* Read start address where to put the serial in eeprom */
; 0002 057A if((value=ReadValue("startaddress"))==NULL)
;PCODE: $00000A10 VOL: 0
;PCODE: $00000A11 VOL: 0
;PCODE: $00000A12 VOL: 0
;PCODE: $00000A13 VOL: 0
;PCODE: $00000A14 VOL: 0
;PCODE: $00000A15 VOL: 0
;PCODE: $00000A16 VOL: 0
;PCODE: $00000A17 VOL: 0
; 0002 057B return TRUE;
;PCODE: $00000A18 VOL: 0
;PCODE: $00000A19 VOL: 0
;PCODE: $00000A1A VOL: 0
; 0002 057C EepromStartAddress=hextouint(value);
;PCODE: $00000A1B VOL: 0
;PCODE: $00000A1C VOL: 0
;PCODE: $00000A1D VOL: 0
;PCODE: $00000A1E VOL: 0
;PCODE: $00000A1F VOL: 0
; 0002 057D #ifdef PRINT_DEBUG
; 0002 057E if(debug){
; 0002 057F while(tx_counter);
; 0002 0580 printf("\r\startaddress = %lu",EepromStartAddress);
; 0002 0581 while(tx_counter);}
; 0002 0582 #endif
; 0002 0583 /*Write calib byte by byte to eeprom*/
; 0002 0584 if(WriteChipEeprom(g_CalibBytes,4,EepromStartAddress)==FALSE){
;PCODE: $00000A20 VOL: 0
;PCODE: $00000A21 VOL: 0
;PCODE: $00000A22 VOL: 0
;PCODE: $00000A23 VOL: 0
;PCODE: $00000A24 VOL: 0
;PCODE: $00000A25 VOL: 0
;PCODE: $00000A26 VOL: 0
;PCODE: $00000A27 VOL: 0
; 0002 0585 #ifdef PRINT_DEBUG
; 0002 0586 printFlashString("\r\nWrite calib to eeprom failed");
; 0002 0587 #endif
; 0002 0588 #ifdef PRINT_LCD
; 0002 0589 lcd_putsf_row3(3,"clb wr ee fail");
; 0002 058A delay_ms(LCD_MSG_LONG_DELAY);
; 0002 058B #endif
; 0002 058C return FALSE;
;PCODE: $00000A28 VOL: 0
;PCODE: $00000A29 VOL: 0
;PCODE: $00000A2A VOL: 0
; 0002 058D }
; 0002 058E if(VerifyChipEeprom(g_CalibBytes,4,EepromStartAddress)==FALSE){
;PCODE: $00000A2B VOL: 0
;PCODE: $00000A2C VOL: 0
;PCODE: $00000A2D VOL: 0
;PCODE: $00000A2E VOL: 0
;PCODE: $00000A2F VOL: 0
;PCODE: $00000A30 VOL: 0
;PCODE: $00000A31 VOL: 0
;PCODE: $00000A32 VOL: 0
;PCODE: $00000A33 VOL: 0
; 0002 058F printFlashString("\r\nVrify serial vs eeprom failed");
;PCODE: $00000A34 VOL: 0
;PCODE: $00000A35 VOL: 0
;PCODE: $00000A36 VOL: 0
;PCODE: $00000A37 VOL: 0
; 0002 0590 #ifdef PRINT_LCD
; 0002 0591 lcd_putsf_row3(3,"calib vrf fail");
; 0002 0592 delay_ms(1000);
; 0002 0593 #endif
; 0002 0594 return FALSE;
;PCODE: $00000A38 VOL: 0
;PCODE: $00000A39 VOL: 0
;PCODE: $00000A3A VOL: 0
; 0002 0595 }
; 0002 0596 //sprintf(tmpbytes,"%08lX",(ULONG)g_CalibBytes[0]|(ULONG)g_CalibBytes[1]<<8|(ULONG)g_CalibBytes[2]<<16|(ULONG)g_CalibBytes[2]<<24);
; 0002 0597 //sprintf(tmpbytes,"%08lX",g_CalibBytes;);
; 0002 0598 tmpbytes[0]= ntohexchar(g_CalibBytes[0]>>4);
;PCODE: $00000A3B VOL: 0
;PCODE: $00000A3C VOL: 0
;PCODE: $00000A3D VOL: 0
;PCODE: $00000A3E VOL: 0
;PCODE: $00000A3F VOL: 0
;PCODE: $00000A40 VOL: 0
; 0002 0599 tmpbytes[1]= ntohexchar(g_CalibBytes[0]);
;PCODE: $00000A41 VOL: 0
;PCODE: $00000A42 VOL: 0
;PCODE: $00000A43 VOL: 0
;PCODE: $00000A44 VOL: 0
;PCODE: $00000A45 VOL: 0
; 0002 059A tmpbytes[2]= ntohexchar(g_CalibBytes[1]>>4);
;PCODE: $00000A46 VOL: 0
;PCODE: $00000A47 VOL: 0
;PCODE: $00000A48 VOL: 0
;PCODE: $00000A49 VOL: 0
;PCODE: $00000A4A VOL: 0
;PCODE: $00000A4B VOL: 0
;PCODE: $00000A4C VOL: 0
; 0002 059B tmpbytes[3]= ntohexchar(g_CalibBytes[1]);
;PCODE: $00000A4D VOL: 0
;PCODE: $00000A4E VOL: 0
;PCODE: $00000A4F VOL: 0
;PCODE: $00000A50 VOL: 0
;PCODE: $00000A51 VOL: 0
;PCODE: $00000A52 VOL: 0
; 0002 059C tmpbytes[4]= ntohexchar(g_CalibBytes[2]>>4);
;PCODE: $00000A53 VOL: 0
;PCODE: $00000A54 VOL: 0
;PCODE: $00000A55 VOL: 0
;PCODE: $00000A56 VOL: 0
;PCODE: $00000A57 VOL: 0
;PCODE: $00000A58 VOL: 0
;PCODE: $00000A59 VOL: 0
; 0002 059D tmpbytes[5]= ntohexchar(g_CalibBytes[2]);
;PCODE: $00000A5A VOL: 0
;PCODE: $00000A5B VOL: 0
;PCODE: $00000A5C VOL: 0
;PCODE: $00000A5D VOL: 0
;PCODE: $00000A5E VOL: 0
;PCODE: $00000A5F VOL: 0
; 0002 059E tmpbytes[6]= ntohexchar(g_CalibBytes[3]>>4);
;PCODE: $00000A60 VOL: 0
;PCODE: $00000A61 VOL: 0
;PCODE: $00000A62 VOL: 0
;PCODE: $00000A63 VOL: 0
;PCODE: $00000A64 VOL: 0
;PCODE: $00000A65 VOL: 0
;PCODE: $00000A66 VOL: 0
; 0002 059F tmpbytes[7]= ntohexchar(g_CalibBytes[3]);
;PCODE: $00000A67 VOL: 0
;PCODE: $00000A68 VOL: 0
;PCODE: $00000A69 VOL: 0
;PCODE: $00000A6A VOL: 0
;PCODE: $00000A6B VOL: 0
;PCODE: $00000A6C VOL: 0
; 0002 05A0 if(WriteConfigValue("calibbytes",tmpbytes,8)==FALSE){
;PCODE: $00000A6D VOL: 0
;PCODE: $00000A6E VOL: 0
;PCODE: $00000A6F VOL: 0
;PCODE: $00000A70 VOL: 0
;PCODE: $00000A71 VOL: 0
;PCODE: $00000A72 VOL: 0
;PCODE: $00000A73 VOL: 0
;PCODE: $00000A74 VOL: 0
;PCODE: $00000A75 VOL: 0
;PCODE: $00000A76 VOL: 0
; 0002 05A1 #ifdef PRINT_LCD
; 0002 05A2 lcd_putsf_row3(3,"cal wr conf");
; 0002 05A3 #endif
; 0002 05A4 return FALSE;
;PCODE: $00000A77 VOL: 0
;PCODE: $00000A78 VOL: 0
;PCODE: $00000A79 VOL: 0
; 0002 05A5 }
; 0002 05A6 if(ReadFileToBuffer()==FALSE){
;PCODE: $00000A7A VOL: 0
;PCODE: $00000A7B VOL: 0
;PCODE: $00000A7C VOL: 0
;PCODE: $00000A7D VOL: 0
; 0002 05A7 #ifdef PRINT_LCD
; 0002 05A8 lcd_putsf_row3(3,"cal rd conf");
; 0002 05A9 #endif
; 0002 05AA return FALSE;
;PCODE: $00000A7E VOL: 0
;PCODE: $00000A7F VOL: 0
;PCODE: $00000A80 VOL: 0
; 0002 05AB }
; 0002 05AC if((value=ReadValue("calibbytes"))==NULL){
;PCODE: $00000A81 VOL: 0
;PCODE: $00000A82 VOL: 0
;PCODE: $00000A83 VOL: 0
;PCODE: $00000A84 VOL: 0
;PCODE: $00000A85 VOL: 0
;PCODE: $00000A86 VOL: 0
;PCODE: $00000A87 VOL: 0
;PCODE: $00000A88 VOL: 0
; 0002 05AD #ifdef PRINT_LCD
; 0002 05AE lcd_putsf_row3(3,"cal rd val");
; 0002 05AF #endif
; 0002 05B0 return FALSE;
;PCODE: $00000A89 VOL: 0
;PCODE: $00000A8A VOL: 0
;PCODE: $00000A8B VOL: 0
; 0002 05B1 }
; 0002 05B2 #ifdef PRINT_DEBUG
; 0002 05B3 if(debug){
; 0002 05B4 while(tx_counter);
; 0002 05B5 printf("\r\ncalib saved in calbytes.txt");
; 0002 05B6 while(tx_counter);}
; 0002 05B7 #endif
; 0002 05B8 cal_print:
;PCODE: $00000A8C VOL: 0
;PCODE: $00000A8D VOL: 0
; 0002 05B9 #ifdef PRINT_LCD
; 0002 05BA if(CanShow){
; 0002 05BB lcd_putsf_row3(3,"CLB:");
; 0002 05BC lcd_puts_hex(g_CalibBytes[0]);
; 0002 05BD lcd_puts_hex(g_CalibBytes[1]);
; 0002 05BE lcd_puts_hex(g_CalibBytes[2]);
; 0002 05BF lcd_puts_hex(g_CalibBytes[3]);
; 0002 05C0 delay_ms(LCD_MSG_LONG_DELAY);
; 0002 05C1 }
; 0002 05C2 #endif
; 0002 05C3 return TRUE;
;PCODE: $00000A8E VOL: 0
;PCODE: $00000A8F VOL: 0
;PCODE: $00000A90 VOL: 0
; 0002 05C4 }
;PCODE: $00000A91 VOL: 0
;void StandalonProg(void)
; 0002 05C7 {
;PCODE: $00000A92 VOL: 0
;PCODE: $00000A93 VOL: 0
; 0002 05C8 //char tmpstr[3];
; 0002 05C9 //UCHAR retryVerify;
; 0002 05CA StandaloneMode=RUNNING;
;PCODE: $00000A94 VOL: 0
;PCODE: $00000A95 VOL: 1
; 0002 05CB /* re-initialize Timer1 */
; 0002 05CC //TCNT1H=TCNT1L=0;// 1count=1/2000=
; 0002 05CD /**/
; 0002 05CE spidiv=tmpimage.spidiv;
;PCODE: $00000A96 VOL: 0
;PCODE: $00000A97 VOL: 0
;PCODE: $00000A98 VOL: 0
; 0002 05CF printFlashString("\r\nStart flashing from SDcard...\r\n");
;PCODE: $00000A99 VOL: 0
;PCODE: $00000A9A VOL: 0
;PCODE: $00000A9B VOL: 0
;PCODE: $00000A9C VOL: 0
; 0002 05D0 LED_PASS_OFF();
;PCODE: $00000A9D VOL: 0
;PCODE: $00000A9E VOL: 0
; 0002 05D1 if(tador==0){
;PCODE: $00000A9F VOL: 0
;PCODE: $00000AA0 VOL: 0
;PCODE: $00000AA1 VOL: 0
; 0002 05D2 if((tmpimage.ProgCounterTotal <= myimage[folderCounter].ProgCounterDone)||(myimage[folderCounter].ProgCounterDone==0xFFFE)){    // 0 < 0 false
;PCODE: $00000AA2 VOL: 0
;PCODE: $00000AA3 VOL: 0
;PCODE: $00000AA4 VOL: 0
;PCODE: $00000AA5 VOL: 0
;PCODE: $00000AA6 VOL: 0
;PCODE: $00000AA7 VOL: 0
;PCODE: $00000AA8 VOL: 0
;PCODE: $00000AA9 VOL: 0
;PCODE: $00000AAA VOL: 0
;PCODE: $00000AAB VOL: 0
;PCODE: $00000AAC VOL: 0
;PCODE: $00000AAD VOL: 0
;PCODE: $00000AAE VOL: 0
;PCODE: $00000AAF VOL: 0
;PCODE: $00000AB0 VOL: 0
;PCODE: $00000AB1 VOL: 0
;PCODE: $00000AB2 VOL: 0
;PCODE: $00000AB3 VOL: 0
;PCODE: $00000AB4 VOL: 0
;PCODE: $00000AB5 VOL: 0
; 0002 05D3 if(tmpimage.ProgCounterTotal){// >0 case
;PCODE: $00000AB6 VOL: 0
;PCODE: $00000AB7 VOL: 0
;PCODE: $00000AB8 VOL: 0
;PCODE: $00000AB9 VOL: 0
; 0002 05D4 #ifdef PRINT_DEBUG
; 0002 05D5 if(debug){
; 0002 05D6 while(tx_counter);
; 0002 05D7 printf("\r\nLicenses Total = %lu - Done = %lu",tmpimage.ProgCounterTotal,myimage[folderCounter].ProgCounterDone);
; 0002 05D8 while(tx_counter);}
; 0002 05D9 #endif
; 0002 05DA #ifdef PRINT_LCD
; 0002 05DB lcd_putsf_row3(3,"No licenses");
; 0002 05DC #endif
; 0002 05DD goto end_prog;
;PCODE: $00000ABA VOL: 0
; 0002 05DE }
; 0002 05DF if(eeprom_read_byte(4)!=0x44 && myimage[folderCounter].ProgCounterDone>=10){
;PCODE: $00000ABB VOL: 0
;PCODE: $00000ABC VOL: 0
;PCODE: $00000ABD VOL: 0
;PCODE: $00000ABE VOL: 0
;PCODE: $00000ABF VOL: 0
;PCODE: $00000AC0 VOL: 0
;PCODE: $00000AC1 VOL: 0
;PCODE: $00000AC2 VOL: 0
;PCODE: $00000AC3 VOL: 0
;PCODE: $00000AC4 VOL: 0
;PCODE: $00000AC5 VOL: 0
;PCODE: $00000AC6 VOL: 0
;PCODE: $00000AC7 VOL: 0
;PCODE: $00000AC8 VOL: 0
;PCODE: $00000AC9 VOL: 0
;PCODE: $00000ACA VOL: 0
;PCODE: $00000ACB VOL: 0
; 0002 05E0 #ifdef PRINT_LCD
; 0002 05E1 lcd_putsf_row3(3,"Demo limit 10");
; 0002 05E2 #else
; 0002 05E3 #ifdef SEG7
; 0002 05E4 show7seg('d');
;PCODE: $00000ACC VOL: 0
;PCODE: $00000ACD VOL: 0
;PCODE: $00000ACE VOL: 0
; 0002 05E5 #endif
; 0002 05E6 #endif
; 0002 05E7 
; 0002 05E8 goto end_prog;
;PCODE: $00000ACF VOL: 0
; 0002 05E9 }
; 0002 05EA }
;PCODE: $00000AD0 VOL: 0
; 0002 05EB }// end if(tador==0)
;PCODE: $00000AD1 VOL: 0
; 0002 05EC /*Reset flash programminig global variables*/
; 0002 05ED ResetGlobals();
;PCODE: $00000AD2 VOL: 0
;PCODE: $00000AD3 VOL: 0
; 0002 05EE #ifndef DEBUG_PROTEUS
; 0002 05EF if(Call_EnterProgMode(TRUE)==FALSE)  //low speed
;PCODE: $00000AD4 VOL: 0
;PCODE: $00000AD5 VOL: 0
;PCODE: $00000AD6 VOL: 0
;PCODE: $00000AD7 VOL: 0
;PCODE: $00000AD8 VOL: 0
; 0002 05F0 goto end_prog;
;PCODE: $00000AD9 VOL: 0
; 0002 05F1 Call_Erase();
;PCODE: $00000ADA VOL: 0
;PCODE: $00000ADB VOL: 0
; 0002 05F2 if(Call_WriteProgFuses()==FALSE)
;PCODE: $00000ADC VOL: 0
;PCODE: $00000ADD VOL: 0
;PCODE: $00000ADE VOL: 0
; 0002 05F3 goto end_prog;
;PCODE: $00000ADF VOL: 0
; 0002 05F4 SetHiSpeed();
;PCODE: $00000AE0 VOL: 0
;PCODE: $00000AE1 VOL: 0
; 0002 05F5 verify_flash:
;PCODE: $00000AE2 VOL: 0
; 0002 05F6 if(Call_ResetChip(FALSE)==FALSE) //reset in high speed
;PCODE: $00000AE3 VOL: 0
;PCODE: $00000AE4 VOL: 0
;PCODE: $00000AE5 VOL: 0
;PCODE: $00000AE6 VOL: 0
;PCODE: $00000AE7 VOL: 0
; 0002 05F7 goto end_prog;
;PCODE: $00000AE8 VOL: 0
; 0002 05F8 #endif
; 0002 05F9 #ifdef PRINT_DEBUG
; 0002 05FA if(debug){
; 0002 05FB while(tx_counter);
; 0002 05FC printf("\r\nprog spidiv=%d\r\n",spidiv);
; 0002 05FD while(tx_counter);}
; 0002 05FE #endif
; 0002 05FF if(Call_SetDevType()==FALSE)
;PCODE: $00000AE9 VOL: 0
;PCODE: $00000AEA VOL: 0
;PCODE: $00000AEB VOL: 0
;PCODE: $00000AEC VOL: 0
; 0002 0600 goto end_prog;
;PCODE: $00000AED VOL: 0
; 0002 0601 Call_Erase();
;PCODE: $00000AEE VOL: 0
;PCODE: $00000AEF VOL: 0
; 0002 0602 ResetGlobals();
;PCODE: $00000AF0 VOL: 0
; 0002 0603 g_MemType='F';
;PCODE: $00000AF1 VOL: 0
;PCODE: $00000AF2 VOL: 0
; 0002 0604 if(Call_WriteFlashBin()==FALSE){
;PCODE: $00000AF3 VOL: 0
;PCODE: $00000AF4 VOL: 0
;PCODE: $00000AF5 VOL: 0
; 0002 0605 if(TryDecSpeed()){
;PCODE: $00000AF6 VOL: 0
;PCODE: $00000AF7 VOL: 0
;PCODE: $00000AF8 VOL: 0
; 0002 0606 goto verify_flash;
;PCODE: $00000AF9 VOL: 0
; 0002 0607 }
; 0002 0608 //lcd_putsf(" Fail!");
; 0002 0609 goto end_prog;
;PCODE: $00000AFA VOL: 0
;PCODE: $00000AFB VOL: 0
; 0002 060A }
; 0002 060B #ifdef PRINT_LCD
; 0002 060C if(CanShow){
; 0002 060D itoa((int)((int)(g_CpuFreq/2)/((int)(UBRR0L)+(int)1)),tmpbytes);   // 1=0,1 2=0,1,2
; 0002 060E strcatf(tmpbytes,"Khz  ");
; 0002 060F lcd_puts_row(3,tmpbytes);
; 0002 0610 lcd_putchar((spidiv)+'0');
; 0002 0611 delay_ms(LCD_MSG_LONG_DELAY);
; 0002 0612 delay_ms(LCD_MSG_LONG_DELAY);
; 0002 0613 }
; 0002 0614 lcd_putsf_row(3,"");
; 0002 0615 #endif
; 0002 0616 ResetGlobals();
;PCODE: $00000AFC VOL: 0
;PCODE: $00000AFD VOL: 0
; 0002 0617 if(tmpimage.eepromfile!=0){
;PCODE: $00000AFE VOL: 0
;PCODE: $00000AFF VOL: 0
;PCODE: $00000B00 VOL: 0
;PCODE: $00000B01 VOL: 0
; 0002 0618 if(Call_WriteEeprom()==FALSE)
;PCODE: $00000B02 VOL: 0
;PCODE: $00000B03 VOL: 0
;PCODE: $00000B04 VOL: 0
; 0002 0619 goto end_prog;
;PCODE: $00000B05 VOL: 0
; 0002 061A if(Call_VerifyEeprom()==FALSE)
;PCODE: $00000B06 VOL: 0
;PCODE: $00000B07 VOL: 0
;PCODE: $00000B08 VOL: 0
;PCODE: $00000B09 VOL: 0
; 0002 061B goto end_prog;
;PCODE: $00000B0A VOL: 0
; 0002 061C }
;PCODE: $00000B0B VOL: 0
; 0002 061D if(tmpimage.save_serial!=0){
;PCODE: $00000B0C VOL: 0
;PCODE: $00000B0D VOL: 0
;PCODE: $00000B0E VOL: 0
;PCODE: $00000B0F VOL: 0
;PCODE: $00000B10 VOL: 0
; 0002 061E if(SaveSerialToEepromAndInc()==FALSE){
;PCODE: $00000B11 VOL: 0
;PCODE: $00000B12 VOL: 0
;PCODE: $00000B13 VOL: 0
; 0002 061F #ifdef PRINT_LCD
; 0002 0620 lcd_putsf_row3(3,"SN EE Failed.");
; 0002 0621 #endif
; 0002 0622 goto end_prog;
;PCODE: $00000B14 VOL: 0
; 0002 0623 }
; 0002 0624 }
;PCODE: $00000B15 VOL: 0
; 0002 0625 if(tmpimage.save_calib!=0){
;PCODE: $00000B16 VOL: 0
;PCODE: $00000B17 VOL: 0
;PCODE: $00000B18 VOL: 0
;PCODE: $00000B19 VOL: 0
;PCODE: $00000B1A VOL: 0
; 0002 0626 if(SaveCalibBytesToEeprom()==FALSE){
;PCODE: $00000B1B VOL: 0
;PCODE: $00000B1C VOL: 0
;PCODE: $00000B1D VOL: 0
; 0002 0627 #ifdef PRINT_LCD
; 0002 0628 lcd_putsf_row3(3,"Calib Failed.");
; 0002 0629 #endif
; 0002 062A goto end_prog;
;PCODE: $00000B1E VOL: 0
; 0002 062B }
; 0002 062C }
;PCODE: $00000B1F VOL: 0
; 0002 062D // Set fuses to 'final' state
; 0002 062E if (! programFuses(tmpimage.normfuses, tmpimage.maskfuses)){
;PCODE: $00000B20 VOL: 0
;PCODE: $00000B21 VOL: 0
;PCODE: $00000B22 VOL: 0
;PCODE: $00000B23 VOL: 0
;PCODE: $00000B24 VOL: 0
;PCODE: $00000B25 VOL: 0
;PCODE: $00000B26 VOL: 0
;PCODE: $00000B27 VOL: 0
;PCODE: $00000B28 VOL: 0
;PCODE: $00000B29 VOL: 0
; 0002 062F error("\r\nNormal Fuses fail");
;PCODE: $00000B2A VOL: 0
;PCODE: $00000B2B VOL: 0
;PCODE: $00000B2C VOL: 0
;PCODE: $00000B2D VOL: 0
; 0002 0630 goto end_prog;
;PCODE: $00000B2E VOL: 0
; 0002 0631 }
; 0002 0632 SetHiSpeed();
;PCODE: $00000B2F VOL: 0
;PCODE: $00000B30 VOL: 0
; 0002 0633 #ifdef PRINT_DEBUG
; 0002 0634 if(debug){
; 0002 0635 while(tx_counter);
; 0002 0636 printf("\r\nNormal fuses writing done.");
; 0002 0637 while(tx_counter);}
; 0002 0638 #endif
; 0002 0639 if(Call_ResetChip(TRUE)==FALSE) //low speed
;PCODE: $00000B31 VOL: 0
;PCODE: $00000B32 VOL: 0
;PCODE: $00000B33 VOL: 0
;PCODE: $00000B34 VOL: 0
;PCODE: $00000B35 VOL: 0
; 0002 063A goto end_prog;
;PCODE: $00000B36 VOL: 0
; 0002 063B if (! verifyFuses(tmpimage.normfuses, tmpimage.maskfuses) ) {
;PCODE: $00000B37 VOL: 0
;PCODE: $00000B38 VOL: 0
;PCODE: $00000B39 VOL: 0
;PCODE: $00000B3A VOL: 0
;PCODE: $00000B3B VOL: 0
;PCODE: $00000B3C VOL: 0
;PCODE: $00000B3D VOL: 0
;PCODE: $00000B3E VOL: 0
;PCODE: $00000B3F VOL: 0
;PCODE: $00000B40 VOL: 0
; 0002 063C error("\r\nFailed to verify fuses");
;PCODE: $00000B41 VOL: 0
;PCODE: $00000B42 VOL: 0
;PCODE: $00000B43 VOL: 0
;PCODE: $00000B44 VOL: 0
; 0002 063D goto end_prog;
;PCODE: $00000B45 VOL: 0
; 0002 063E }
; 0002 063F SetHiSpeed();
;PCODE: $00000B46 VOL: 0
;PCODE: $00000B47 VOL: 0
; 0002 0640 #ifdef PRINT_DEBUG
; 0002 0641 if(debug){
; 0002 0642 while(tx_counter);
; 0002 0643 printf("\r\nNormal fuses verified correctly !!!");
; 0002 0644 while(tx_counter);}
; 0002 0645 #endif
; 0002 0646 tmpimage.spidiv=spidiv;
;PCODE: $00000B48 VOL: 0
;PCODE: $00000B49 VOL: 0
;PCODE: $00000B4A VOL: 0
; 0002 0647 //delay_ms(1000);
; 0002 0648 StandaloneMode=PASS;
;PCODE: $00000B4B VOL: 0
;PCODE: $00000B4C VOL: 1
; 0002 0649 LED_PASS_ON();
;PCODE: $00000B4D VOL: 0
;PCODE: $00000B4E VOL: 0
; 0002 064A end_prog:
;PCODE: $00000B4F VOL: 0
; 0002 064B AVR910_ResetTXData();
;PCODE: $00000B50 VOL: 0
; 0002 064C #ifdef PRINT_DEBUG
; 0002 064D if(debug){
; 0002 064E while(tx_counter);
; 0002 064F printf("\r\nLeaving programming mode... ");
; 0002 0650 while(tx_counter);}
; 0002 0651 #endif
; 0002 0652 AVR910_Standalone("L");
;PCODE: $00000B51 VOL: 0
;PCODE: $00000B52 VOL: 0
;PCODE: $00000B53 VOL: 0
;PCODE: $00000B54 VOL: 0
; 0002 0653 #ifdef PRINT_DEBUG
; 0002 0654 if(debug){
; 0002 0655 while(tx_counter);
; 0002 0656 printf(" OK.\n");
; 0002 0657 while(tx_counter);}
; 0002 0658 #endif
; 0002 0659 tmpimage.ProgCounterDone = myimage[folderCounter].ProgCounterDone;
;PCODE: $00000B55 VOL: 0
;PCODE: $00000B56 VOL: 0
;PCODE: $00000B57 VOL: 0
;PCODE: $00000B58 VOL: 0
;PCODE: $00000B59 VOL: 0
;PCODE: $00000B5A VOL: 0
;PCODE: $00000B5B VOL: 0
;PCODE: $00000B5C VOL: 0
; 0002 065A if(StandaloneMode!=PASS){
;PCODE: $00000B5D VOL: 1
;PCODE: $00000B5E VOL: 0
;PCODE: $00000B5F VOL: 0
; 0002 065B CanShow=1;
;PCODE: $00000B60 VOL: 0
;PCODE: $00000B61 VOL: 0
; 0002 065C if(StandaloneMode!=SDFAIL){
;PCODE: $00000B62 VOL: 1
;PCODE: $00000B63 VOL: 0
;PCODE: $00000B64 VOL: 0
; 0002 065D StandaloneMode=FAIL;
;PCODE: $00000B65 VOL: 0
;PCODE: $00000B66 VOL: 1
; 0002 065E }
; 0002 065F #ifdef PRINT_DEBUG
; 0002 0660 if(debug){
; 0002 0661 if(StandaloneMode!=SDFAIL)
; 0002 0662 printf("\r\nFlashing from sdcard Failed .\r\n",tmpimage.ProgCounterDone);
; 0002 0663 else{
; 0002 0664 printf("\r\nSDCARD Failed .\r\n",);
; 0002 0665 if(value==NULL)
; 0002 0666 printf("project.txt file missing or corrupted.\r\n");
; 0002 0667 }
; 0002 0668 while(tx_counter);}
; 0002 0669 #endif
; 0002 066A 
; 0002 066B }
;PCODE: $00000B67 VOL: 0
; 0002 066C else{
;PCODE: $00000B68 VOL: 0
;PCODE: $00000B69 VOL: 0
; 0002 066D CanShow=0;
;PCODE: $00000B6A VOL: 0
;PCODE: $00000B6B VOL: 0
; 0002 066E if(tmpimage.ProgCounterTotal!=0 || eeprom_read_byte(4)!=0x44)
;PCODE: $00000B6C VOL: 0
;PCODE: $00000B6D VOL: 0
;PCODE: $00000B6E VOL: 0
;PCODE: $00000B6F VOL: 0
;PCODE: $00000B70 VOL: 0
;PCODE: $00000B71 VOL: 0
;PCODE: $00000B72 VOL: 0
;PCODE: $00000B73 VOL: 0
;PCODE: $00000B74 VOL: 0
;PCODE: $00000B75 VOL: 0
; 0002 066F tmpimage.ProgCounterDone=++myimage[folderCounter].ProgCounterDone;
;PCODE: $00000B76 VOL: 0
;PCODE: $00000B77 VOL: 0
;PCODE: $00000B78 VOL: 0
;PCODE: $00000B79 VOL: 0
;PCODE: $00000B7A VOL: 0
;PCODE: $00000B7B VOL: 0
;PCODE: $00000B7C VOL: 0
;PCODE: $00000B7D VOL: 0
;PCODE: $00000B7E VOL: 0
;PCODE: $00000B7F VOL: 0
; 0002 0670 #ifdef PRINT_DEBUG
; 0002 0671 if(debug){
; 0002 0672 while(tx_counter);
; 0002 0673 printf("\r\nFlashing from sdcard Passed %u.\r\n",tmpimage.ProgCounterDone);
; 0002 0674 while(tx_counter);}
; 0002 0675 #endif
; 0002 0676 #ifdef PRINT_LCD
; 0002 0677 MsgBufClr();
; 0002 0678 itoa((Counter10ms/100),temptext);
; 0002 0679 lcd_putsf_row(3,"Time ");
; 0002 067A lcd_puts(temptext);
; 0002 067B lcd_putsf("sec");
; 0002 067C delay_ms(500);
; 0002 067D lcd_putsf_row(3,"Success!  ");
; 0002 067E if(tmpimage.ProgCounterTotal!=0 || eeprom_read_byte(4)!=0x44){
; 0002 067F itoa(tmpimage.ProgCounterDone,temptext);
; 0002 0680 lcd_puts(temptext);
; 0002 0681 }
; 0002 0682 
; 0002 0683 #endif
; 0002 0684 Beeps(1,1,500);
;PCODE: $00000B80 VOL: 0
;PCODE: $00000B81 VOL: 0
;PCODE: $00000B82 VOL: 0
;PCODE: $00000B83 VOL: 0
;PCODE: $00000B84 VOL: 0
;PCODE: $00000B85 VOL: 0
;PCODE: $00000B86 VOL: 0
;PCODE: $00000B87 VOL: 0
; 0002 0685 }
;PCODE: $00000B88 VOL: 0
; 0002 0686 }
;PCODE: $00000B89 VOL: 0
;PCODE: $00000B8A VOL: 0
;UCHAR readImagePageSD (ULONG pageaddr, UINT pagesize, UCHAR *page)
; 0002 0690 {
;PCODE: $00000B8B VOL: 0
;PCODE: $00000B8C VOL: 0
; 0002 0691 UINT i;
; 0002 0692 //BOOL firstline = TRUE;
; 0002 0693 UINT page_idx = 0;
; 0002 0694 //byte *beginning = hextext;
; 0002 0695 ULONG lineaddr;
; 0002 0696 UCHAR b, cksum = 0;
; 0002 0697 UCHAR len;
; 0002 0698 
; 0002 0699 //Serial.print("page size = "); Serial.println(pagesize, DEC);
; 0002 069A if(blankpage==FALSE){
;PCODE: $00000B8D VOL: 0
;PCODE: $00000B8E VOL: 0
;	pageaddr -> Y+15
;	pagesize -> Y+13
;	*page -> Y+11
;	i -> R16,R17
;	page_idx -> R18,R19
;	lineaddr -> Y+7
;	b -> R21
;	cksum -> R20
;	len -> Y+6
;PCODE: $00000B8F VOL: 0
;PCODE: $00000B90 VOL: 0
;PCODE: $00000B91 VOL: 0
;PCODE: $00000B92 VOL: 0
;PCODE: $00000B93 VOL: 0
;PCODE: $00000B94 VOL: 0
;PCODE: $00000B95 VOL: 0
; 0002 069B // 'empty' the page by filling it with 0xFF's
; 0002 069C for (i=0; i<pagesize; i++)
;PCODE: $00000B96 VOL: 0
;PCODE: $00000B97 VOL: 0
;PCODE: $00000B98 VOL: 0
;PCODE: $00000B99 VOL: 0
;PCODE: $00000B9A VOL: 0
;PCODE: $00000B9B VOL: 0
;PCODE: $00000B9C VOL: 0
;PCODE: $00000B9D VOL: 0
;PCODE: $00000B9E VOL: 0
; 0002 069D page[i] = 0xFF;
;PCODE: $00000B9F VOL: 0
;PCODE: $00000BA0 VOL: 0
;PCODE: $00000BA1 VOL: 0
;PCODE: $00000BA2 VOL: 0
;PCODE: $00000BA3 VOL: 0
;PCODE: $00000BA4 VOL: 0
;PCODE: $00000BA5 VOL: 0
;PCODE: $00000BA6 VOL: 0
;PCODE: $00000BA7 VOL: 0
;PCODE: $00000BA8 VOL: 0
; 0002 069E blankpage=TRUE;
;PCODE: $00000BA9 VOL: 0
;PCODE: $00000BAA VOL: 0
; 0002 069F }
; 0002 06A0 while (1) {
;PCODE: $00000BAB VOL: 0
;PCODE: $00000BAC VOL: 0
; 0002 06A1 if(EndOfFile)
;PCODE: $00000BAD VOL: 0
;PCODE: $00000BAE VOL: 0
;PCODE: $00000BAF VOL: 0
; 0002 06A2 return 1;
;PCODE: $00000BB0 VOL: 0
;PCODE: $00000BB1 VOL: 0
;PCODE: $00000BB2 VOL: 0
;PCODE: $00000BB3 VOL: 0
; 0002 06A3 if(CanContinueRead==0){
;PCODE: $00000BB4 VOL: 0
;PCODE: $00000BB5 VOL: 0
;PCODE: $00000BB6 VOL: 0
;PCODE: $00000BB7 VOL: 0
; 0002 06A4 // read one line!
; 0002 06A5 if (hextext_read_byte() != ':') {
;PCODE: $00000BB8 VOL: 0
;PCODE: $00000BB9 VOL: 0
;PCODE: $00000BBA VOL: 0
; 0002 06A6 error("No colon?");
;PCODE: $00000BBB VOL: 0
;PCODE: $00000BBC VOL: 0
;PCODE: $00000BBD VOL: 0
;PCODE: $00000BBE VOL: 0
; 0002 06A7 return 0;//break;
;PCODE: $00000BBF VOL: 0
;PCODE: $00000BC0 VOL: 0
;PCODE: $00000BC1 VOL: 0
;PCODE: $00000BC2 VOL: 0
; 0002 06A8 
; 0002 06A9 }
; 0002 06AA // Read the byte count into 'len'
; 0002 06AB len = hexton(hextext_read_byte());
;PCODE: $00000BC3 VOL: 0
;PCODE: $00000BC4 VOL: 0
;PCODE: $00000BC5 VOL: 0
;PCODE: $00000BC6 VOL: 0
;PCODE: $00000BC7 VOL: 0
; 0002 06AC len = (len<<4) + hexton(hextext_read_byte());
;PCODE: $00000BC8 VOL: 0
;PCODE: $00000BC9 VOL: 0
;PCODE: $00000BCA VOL: 0
;PCODE: $00000BCB VOL: 0
;PCODE: $00000BCC VOL: 0
;PCODE: $00000BCD VOL: 0
;PCODE: $00000BCE VOL: 0
;PCODE: $00000BCF VOL: 0
;PCODE: $00000BD0 VOL: 0
; 0002 06AD cksum = len;
;PCODE: $00000BD1 VOL: 0
;PCODE: $00000BD2 VOL: 0
; 0002 06AE 
; 0002 06AF // read high address byte
; 0002 06B0 b = hexton(hextext_read_byte());
;PCODE: $00000BD3 VOL: 0
;PCODE: $00000BD4 VOL: 0
;PCODE: $00000BD5 VOL: 0
;PCODE: $00000BD6 VOL: 0
; 0002 06B1 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000BD7 VOL: 0
;PCODE: $00000BD8 VOL: 0
;PCODE: $00000BD9 VOL: 0
;PCODE: $00000BDA VOL: 0
;PCODE: $00000BDB VOL: 0
;PCODE: $00000BDC VOL: 0
;PCODE: $00000BDD VOL: 0
;PCODE: $00000BDE VOL: 0
;PCODE: $00000BDF VOL: 0
; 0002 06B2 cksum += b;
;PCODE: $00000BE0 VOL: 0
;PCODE: $00000BE1 VOL: 0
; 0002 06B3 lineaddr = b;
;PCODE: $00000BE2 VOL: 0
;PCODE: $00000BE3 VOL: 0
;PCODE: $00000BE4 VOL: 0
; 0002 06B4 
; 0002 06B5 // read low address byte
; 0002 06B6 b = hexton(hextext_read_byte());
;PCODE: $00000BE5 VOL: 0
;PCODE: $00000BE6 VOL: 0
;PCODE: $00000BE7 VOL: 0
;PCODE: $00000BE8 VOL: 0
; 0002 06B7 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000BE9 VOL: 0
;PCODE: $00000BEA VOL: 0
;PCODE: $00000BEB VOL: 0
;PCODE: $00000BEC VOL: 0
;PCODE: $00000BED VOL: 0
;PCODE: $00000BEE VOL: 0
;PCODE: $00000BEF VOL: 0
;PCODE: $00000BF0 VOL: 0
;PCODE: $00000BF1 VOL: 0
; 0002 06B8 cksum += b;
;PCODE: $00000BF2 VOL: 0
;PCODE: $00000BF3 VOL: 0
; 0002 06B9 lineaddr = (lineaddr << 8) + b;
;PCODE: $00000BF4 VOL: 0
;PCODE: $00000BF5 VOL: 0
;PCODE: $00000BF6 VOL: 0
;PCODE: $00000BF7 VOL: 0
;PCODE: $00000BF8 VOL: 0
;PCODE: $00000BF9 VOL: 0
;PCODE: $00000BFA VOL: 0
;PCODE: $00000BFB VOL: 0
;PCODE: $00000BFC VOL: 0
; 0002 06BA lineaddr+=OffsetX16;//ADD OFFSET *16
;PCODE: $00000BFD VOL: 0
;PCODE: $00000BFE VOL: 0
;PCODE: $00000BFF VOL: 0
;PCODE: $00000C00 VOL: 0
; 0002 06BB // example lineaddr=0xFC00 pageaddr=0 pagesize=128 -> (blankpage=true) next time pageaddr=pageaddr+pagesize
; 0002 06BC if (lineaddr >= (pageaddr + pagesize)) {
;PCODE: $00000C01 VOL: 0
;PCODE: $00000C02 VOL: 0
;PCODE: $00000C03 VOL: 0
;PCODE: $00000C04 VOL: 0
;PCODE: $00000C05 VOL: 0
;PCODE: $00000C06 VOL: 0
;PCODE: $00000C07 VOL: 0
; 0002 06BD return 1;//break;
;PCODE: $00000C08 VOL: 0
;PCODE: $00000C09 VOL: 0
;PCODE: $00000C0A VOL: 0
;PCODE: $00000C0B VOL: 0
; 0002 06BE }
; 0002 06BF 
; 0002 06C0 b = hexton(hextext_read_byte()); // record type
;PCODE: $00000C0C VOL: 0
;PCODE: $00000C0D VOL: 0
;PCODE: $00000C0E VOL: 0
;PCODE: $00000C0F VOL: 0
;PCODE: $00000C10 VOL: 0
; 0002 06C1 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000C11 VOL: 0
;PCODE: $00000C12 VOL: 0
;PCODE: $00000C13 VOL: 0
;PCODE: $00000C14 VOL: 0
;PCODE: $00000C15 VOL: 0
;PCODE: $00000C16 VOL: 0
;PCODE: $00000C17 VOL: 0
;PCODE: $00000C18 VOL: 0
;PCODE: $00000C19 VOL: 0
; 0002 06C2 cksum += b;
;PCODE: $00000C1A VOL: 0
;PCODE: $00000C1B VOL: 0
; 0002 06C3 //Serial.print("Record type "); Serial.println(b, HEX);
; 0002 06C4 if (b == 0x1) {
;PCODE: $00000C1C VOL: 0
;PCODE: $00000C1D VOL: 0
;PCODE: $00000C1E VOL: 0
; 0002 06C5 EndOfFile=1;
;PCODE: $00000C1F VOL: 0
;PCODE: $00000C20 VOL: 0
; 0002 06C6 // end record!
; 0002 06C7 return 1;//break;
;PCODE: $00000C21 VOL: 0
;PCODE: $00000C22 VOL: 0
;PCODE: $00000C23 VOL: 0
;PCODE: $00000C24 VOL: 0
; 0002 06C8 }
; 0002 06C9 // offset *16 record!
; 0002 06CA else if (b == 0x2) {
;PCODE: $00000C25 VOL: 0
;PCODE: $00000C26 VOL: 0
;PCODE: $00000C27 VOL: 0
;PCODE: $00000C28 VOL: 0
; 0002 06CB b = hexton(hextext_read_byte());
;PCODE: $00000C29 VOL: 0
;PCODE: $00000C2A VOL: 0
;PCODE: $00000C2B VOL: 0
;PCODE: $00000C2C VOL: 0
; 0002 06CC b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000C2D VOL: 0
;PCODE: $00000C2E VOL: 0
;PCODE: $00000C2F VOL: 0
;PCODE: $00000C30 VOL: 0
;PCODE: $00000C31 VOL: 0
;PCODE: $00000C32 VOL: 0
;PCODE: $00000C33 VOL: 0
;PCODE: $00000C34 VOL: 0
;PCODE: $00000C35 VOL: 0
; 0002 06CD cksum += b;
;PCODE: $00000C36 VOL: 0
;PCODE: $00000C37 VOL: 0
; 0002 06CE OffsetX16=((ULONG)b<<12);
;PCODE: $00000C38 VOL: 0
;PCODE: $00000C39 VOL: 0
;PCODE: $00000C3A VOL: 0
;PCODE: $00000C3B VOL: 0
;PCODE: $00000C3C VOL: 0
;PCODE: $00000C3D VOL: 0
;PCODE: $00000C3E VOL: 0
; 0002 06CF b = hexton(hextext_read_byte());
;PCODE: $00000C3F VOL: 0
;PCODE: $00000C40 VOL: 0
;PCODE: $00000C41 VOL: 0
;PCODE: $00000C42 VOL: 0
; 0002 06D0 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000C43 VOL: 0
;PCODE: $00000C44 VOL: 0
;PCODE: $00000C45 VOL: 0
;PCODE: $00000C46 VOL: 0
;PCODE: $00000C47 VOL: 0
;PCODE: $00000C48 VOL: 0
;PCODE: $00000C49 VOL: 0
;PCODE: $00000C4A VOL: 0
;PCODE: $00000C4B VOL: 0
; 0002 06D1 cksum += b;
;PCODE: $00000C4C VOL: 0
;PCODE: $00000C4D VOL: 0
; 0002 06D2 OffsetX16|=((ULONG)b<<4);
;PCODE: $00000C4E VOL: 0
;PCODE: $00000C4F VOL: 0
;PCODE: $00000C50 VOL: 0
;PCODE: $00000C51 VOL: 0
;PCODE: $00000C52 VOL: 0
;PCODE: $00000C53 VOL: 0
;PCODE: $00000C54 VOL: 0
;PCODE: $00000C55 VOL: 0
;PCODE: $00000C56 VOL: 0
; 0002 06D3 b = hexton(hextext_read_byte());  // chxsum
;PCODE: $00000C57 VOL: 0
;PCODE: $00000C58 VOL: 0
;PCODE: $00000C59 VOL: 0
;PCODE: $00000C5A VOL: 0
; 0002 06D4 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000C5B VOL: 0
;PCODE: $00000C5C VOL: 0
;PCODE: $00000C5D VOL: 0
;PCODE: $00000C5E VOL: 0
;PCODE: $00000C5F VOL: 0
;PCODE: $00000C60 VOL: 0
;PCODE: $00000C61 VOL: 0
;PCODE: $00000C62 VOL: 0
;PCODE: $00000C63 VOL: 0
; 0002 06D5 cksum += b;
;PCODE: $00000C64 VOL: 0
;PCODE: $00000C65 VOL: 0
; 0002 06D6 if (cksum != 0) {
;PCODE: $00000C66 VOL: 0
;PCODE: $00000C67 VOL: 0
; 0002 06D7 error("Bad checksum: ");
;PCODE: $00000C68 VOL: 0
;PCODE: $00000C69 VOL: 0
;PCODE: $00000C6A VOL: 0
;PCODE: $00000C6B VOL: 0
; 0002 06D8 return 0;
;PCODE: $00000C6C VOL: 0
;PCODE: $00000C6D VOL: 0
;PCODE: $00000C6E VOL: 0
;PCODE: $00000C6F VOL: 0
; 0002 06D9 //Serial.print(cksum, HEX);
; 0002 06DA }
; 0002 06DB if (hextext_read_byte() != '\r') {
;PCODE: $00000C70 VOL: 0
;PCODE: $00000C71 VOL: 0
;PCODE: $00000C72 VOL: 0
;PCODE: $00000C73 VOL: 0
; 0002 06DC error("No end of line");
;PCODE: $00000C74 VOL: 0
;PCODE: $00000C75 VOL: 0
;PCODE: $00000C76 VOL: 0
;PCODE: $00000C77 VOL: 0
; 0002 06DD return 0;//break;
;PCODE: $00000C78 VOL: 0
;PCODE: $00000C79 VOL: 0
;PCODE: $00000C7A VOL: 0
;PCODE: $00000C7B VOL: 0
; 0002 06DE }
; 0002 06DF if (hextext_read_byte() != '\n') {
;PCODE: $00000C7C VOL: 0
;PCODE: $00000C7D VOL: 0
;PCODE: $00000C7E VOL: 0
;PCODE: $00000C7F VOL: 0
; 0002 06E0 error("No end of line");
;PCODE: $00000C80 VOL: 0
;PCODE: $00000C81 VOL: 0
;PCODE: $00000C82 VOL: 0
;PCODE: $00000C83 VOL: 0
; 0002 06E1 return 0;//break;
;PCODE: $00000C84 VOL: 0
;PCODE: $00000C85 VOL: 0
;PCODE: $00000C86 VOL: 0
;PCODE: $00000C87 VOL: 0
; 0002 06E2 }
; 0002 06E3 continue;
;PCODE: $00000C88 VOL: 0
;PCODE: $00000C89 VOL: 0
; 0002 06E4 } //no need to stuff
; 0002 06E5 else if (b == 0x3) {
;PCODE: $00000C8A VOL: 0
;PCODE: $00000C8B VOL: 0
;PCODE: $00000C8C VOL: 0
;PCODE: $00000C8D VOL: 0
;PCODE: $00000C8E VOL: 0
; 0002 06E6 b = hexton(hextext_read_byte());
;PCODE: $00000C8F VOL: 0
;PCODE: $00000C90 VOL: 0
;PCODE: $00000C91 VOL: 0
;PCODE: $00000C92 VOL: 0
; 0002 06E7 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000C93 VOL: 0
;PCODE: $00000C94 VOL: 0
;PCODE: $00000C95 VOL: 0
;PCODE: $00000C96 VOL: 0
;PCODE: $00000C97 VOL: 0
;PCODE: $00000C98 VOL: 0
;PCODE: $00000C99 VOL: 0
;PCODE: $00000C9A VOL: 0
;PCODE: $00000C9B VOL: 0
; 0002 06E8 cksum += b;
;PCODE: $00000C9C VOL: 0
;PCODE: $00000C9D VOL: 0
; 0002 06E9 b = hexton(hextext_read_byte());
;PCODE: $00000C9E VOL: 0
;PCODE: $00000C9F VOL: 0
;PCODE: $00000CA0 VOL: 0
;PCODE: $00000CA1 VOL: 0
; 0002 06EA b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000CA2 VOL: 0
;PCODE: $00000CA3 VOL: 0
;PCODE: $00000CA4 VOL: 0
;PCODE: $00000CA5 VOL: 0
;PCODE: $00000CA6 VOL: 0
;PCODE: $00000CA7 VOL: 0
;PCODE: $00000CA8 VOL: 0
;PCODE: $00000CA9 VOL: 0
;PCODE: $00000CAA VOL: 0
; 0002 06EB cksum += b;
;PCODE: $00000CAB VOL: 0
;PCODE: $00000CAC VOL: 0
; 0002 06EC b = hexton(hextext_read_byte());
;PCODE: $00000CAD VOL: 0
;PCODE: $00000CAE VOL: 0
;PCODE: $00000CAF VOL: 0
;PCODE: $00000CB0 VOL: 0
; 0002 06ED b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000CB1 VOL: 0
;PCODE: $00000CB2 VOL: 0
;PCODE: $00000CB3 VOL: 0
;PCODE: $00000CB4 VOL: 0
;PCODE: $00000CB5 VOL: 0
;PCODE: $00000CB6 VOL: 0
;PCODE: $00000CB7 VOL: 0
;PCODE: $00000CB8 VOL: 0
;PCODE: $00000CB9 VOL: 0
; 0002 06EE cksum += b;
;PCODE: $00000CBA VOL: 0
;PCODE: $00000CBB VOL: 0
; 0002 06EF b = hexton(hextext_read_byte());
;PCODE: $00000CBC VOL: 0
;PCODE: $00000CBD VOL: 0
;PCODE: $00000CBE VOL: 0
;PCODE: $00000CBF VOL: 0
; 0002 06F0 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000CC0 VOL: 0
;PCODE: $00000CC1 VOL: 0
;PCODE: $00000CC2 VOL: 0
;PCODE: $00000CC3 VOL: 0
;PCODE: $00000CC4 VOL: 0
;PCODE: $00000CC5 VOL: 0
;PCODE: $00000CC6 VOL: 0
;PCODE: $00000CC7 VOL: 0
;PCODE: $00000CC8 VOL: 0
; 0002 06F1 cksum += b;
;PCODE: $00000CC9 VOL: 0
;PCODE: $00000CCA VOL: 0
; 0002 06F2 b = hexton(hextext_read_byte());  // chxsum
;PCODE: $00000CCB VOL: 0
;PCODE: $00000CCC VOL: 0
;PCODE: $00000CCD VOL: 0
;PCODE: $00000CCE VOL: 0
; 0002 06F3 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000CCF VOL: 0
;PCODE: $00000CD0 VOL: 0
;PCODE: $00000CD1 VOL: 0
;PCODE: $00000CD2 VOL: 0
;PCODE: $00000CD3 VOL: 0
;PCODE: $00000CD4 VOL: 0
;PCODE: $00000CD5 VOL: 0
;PCODE: $00000CD6 VOL: 0
;PCODE: $00000CD7 VOL: 0
; 0002 06F4 cksum += b;
;PCODE: $00000CD8 VOL: 0
;PCODE: $00000CD9 VOL: 0
; 0002 06F5 if (cksum != 0) {
;PCODE: $00000CDA VOL: 0
;PCODE: $00000CDB VOL: 0
; 0002 06F6 error("Bad checksum: ");
;PCODE: $00000CDC VOL: 0
;PCODE: $00000CDD VOL: 0
;PCODE: $00000CDE VOL: 0
;PCODE: $00000CDF VOL: 0
; 0002 06F7 return 0;//break;
;PCODE: $00000CE0 VOL: 0
;PCODE: $00000CE1 VOL: 0
;PCODE: $00000CE2 VOL: 0
;PCODE: $00000CE3 VOL: 0
; 0002 06F8 //Serial.print(cksum, HEX);
; 0002 06F9 }
; 0002 06FA if (hextext_read_byte() != '\r') {
;PCODE: $00000CE4 VOL: 0
;PCODE: $00000CE5 VOL: 0
;PCODE: $00000CE6 VOL: 0
;PCODE: $00000CE7 VOL: 0
; 0002 06FB error("No end of line");
;PCODE: $00000CE8 VOL: 0
;PCODE: $00000CE9 VOL: 0
;PCODE: $00000CEA VOL: 0
;PCODE: $00000CEB VOL: 0
; 0002 06FC return 0;//break;
;PCODE: $00000CEC VOL: 0
;PCODE: $00000CED VOL: 0
;PCODE: $00000CEE VOL: 0
;PCODE: $00000CEF VOL: 0
; 0002 06FD }
; 0002 06FE if (hextext_read_byte() != '\n') {
;PCODE: $00000CF0 VOL: 0
;PCODE: $00000CF1 VOL: 0
;PCODE: $00000CF2 VOL: 0
;PCODE: $00000CF3 VOL: 0
; 0002 06FF error("No end of line");
;PCODE: $00000CF4 VOL: 0
;PCODE: $00000CF5 VOL: 0
;PCODE: $00000CF6 VOL: 0
;PCODE: $00000CF7 VOL: 0
; 0002 0700 return 0;//break;
;PCODE: $00000CF8 VOL: 0
;PCODE: $00000CF9 VOL: 0
;PCODE: $00000CFA VOL: 0
;PCODE: $00000CFB VOL: 0
; 0002 0701 }
; 0002 0702 continue;
;PCODE: $00000CFC VOL: 0
;PCODE: $00000CFD VOL: 0
; 0002 0703 }
; 0002 0704 i=0;
;PCODE: $00000CFE VOL: 0
;PCODE: $00000CFF VOL: 0
;PCODE: $00000D00 VOL: 0
;PCODE: $00000D01 VOL: 0
;PCODE: $00000D02 VOL: 0
; 0002 0705 }
; 0002 0706 else{
;PCODE: $00000D03 VOL: 0
;PCODE: $00000D04 VOL: 0
; 0002 0707 i=Save_i;
;PCODE: $00000D05 VOL: 0
;PCODE: $00000D06 VOL: 0
;PCODE: $00000D07 VOL: 0
; 0002 0708 cksum=Save_cksum;
;PCODE: $00000D08 VOL: 0
;PCODE: $00000D09 VOL: 0
; 0002 0709 len=Save_len;
;PCODE: $00000D0A VOL: 0
;PCODE: $00000D0B VOL: 0
; 0002 070A CanContinueRead=0;
;PCODE: $00000D0C VOL: 0
;PCODE: $00000D0D VOL: 0
; 0002 070B }
;PCODE: $00000D0E VOL: 0
; 0002 070C //blankpage=FALSE;
; 0002 070D for ( ; i < len; i++) {
;PCODE: $00000D0F VOL: 0
;PCODE: $00000D10 VOL: 0
;PCODE: $00000D11 VOL: 0
;PCODE: $00000D12 VOL: 0
;PCODE: $00000D13 VOL: 0
;PCODE: $00000D14 VOL: 0
;PCODE: $00000D15 VOL: 0
;PCODE: $00000D16 VOL: 0
;PCODE: $00000D17 VOL: 0
; 0002 070E // read 'n' bytes
; 0002 070F b = hexton(hextext_read_byte());
;PCODE: $00000D18 VOL: 0
;PCODE: $00000D19 VOL: 0
;PCODE: $00000D1A VOL: 0
;PCODE: $00000D1B VOL: 0
; 0002 0710 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000D1C VOL: 0
;PCODE: $00000D1D VOL: 0
;PCODE: $00000D1E VOL: 0
;PCODE: $00000D1F VOL: 0
;PCODE: $00000D20 VOL: 0
;PCODE: $00000D21 VOL: 0
;PCODE: $00000D22 VOL: 0
;PCODE: $00000D23 VOL: 0
;PCODE: $00000D24 VOL: 0
; 0002 0711 
; 0002 0712 cksum += b;
;PCODE: $00000D25 VOL: 0
;PCODE: $00000D26 VOL: 0
; 0002 0713 if(blankpage!=FALSE)
;PCODE: $00000D27 VOL: 0
;PCODE: $00000D28 VOL: 0
;PCODE: $00000D29 VOL: 0
; 0002 0714 if(b!=0xff)
;PCODE: $00000D2A VOL: 0
;PCODE: $00000D2B VOL: 0
;PCODE: $00000D2C VOL: 0
; 0002 0715 blankpage=FALSE;
;PCODE: $00000D2D VOL: 0
;PCODE: $00000D2E VOL: 0
; 0002 0716 page[page_idx] = b;
;PCODE: $00000D2F VOL: 0
;PCODE: $00000D30 VOL: 0
;PCODE: $00000D31 VOL: 0
;PCODE: $00000D32 VOL: 0
;PCODE: $00000D33 VOL: 0
;PCODE: $00000D34 VOL: 0
; 0002 0717 page_idx++;
;PCODE: $00000D35 VOL: 0
;PCODE: $00000D36 VOL: 0
; 0002 0718 
; 0002 0719 if (page_idx > (pagesize-1)) {
;PCODE: $00000D37 VOL: 0
;PCODE: $00000D38 VOL: 0
;PCODE: $00000D39 VOL: 0
;PCODE: $00000D3A VOL: 0
; 0002 071A CanContinueRead=1;
;PCODE: $00000D3B VOL: 0
;PCODE: $00000D3C VOL: 0
; 0002 071B //Save_lineaddr=lineaddr;
; 0002 071C Save_i=i+1;
;PCODE: $00000D3D VOL: 0
;PCODE: $00000D3E VOL: 0
;PCODE: $00000D3F VOL: 0
; 0002 071D Save_cksum=cksum;
;PCODE: $00000D40 VOL: 0
;PCODE: $00000D41 VOL: 0
; 0002 071E Save_len=len;
;PCODE: $00000D42 VOL: 0
;PCODE: $00000D43 VOL: 0
; 0002 071F //error("Too much code");
; 0002 0720 return 1;//break;
;PCODE: $00000D44 VOL: 0
;PCODE: $00000D45 VOL: 0
;PCODE: $00000D46 VOL: 0
;PCODE: $00000D47 VOL: 0
; 0002 0721 }
; 0002 0722 }
;PCODE: $00000D48 VOL: 0
;PCODE: $00000D49 VOL: 0
;PCODE: $00000D4A VOL: 0
;PCODE: $00000D4B VOL: 0
;PCODE: $00000D4C VOL: 0
;PCODE: $00000D4D VOL: 0
; 0002 0723 if(CanContinueRead)
;PCODE: $00000D4E VOL: 0
;PCODE: $00000D4F VOL: 0
;PCODE: $00000D50 VOL: 0
; 0002 0724 return 1;//break;
;PCODE: $00000D51 VOL: 0
;PCODE: $00000D52 VOL: 0
;PCODE: $00000D53 VOL: 0
;PCODE: $00000D54 VOL: 0
; 0002 0725 b = hexton(hextext_read_byte());  // chxsum
;PCODE: $00000D55 VOL: 0
;PCODE: $00000D56 VOL: 0
;PCODE: $00000D57 VOL: 0
;PCODE: $00000D58 VOL: 0
;PCODE: $00000D59 VOL: 0
; 0002 0726 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000D5A VOL: 0
;PCODE: $00000D5B VOL: 0
;PCODE: $00000D5C VOL: 0
;PCODE: $00000D5D VOL: 0
;PCODE: $00000D5E VOL: 0
;PCODE: $00000D5F VOL: 0
;PCODE: $00000D60 VOL: 0
;PCODE: $00000D61 VOL: 0
;PCODE: $00000D62 VOL: 0
; 0002 0727 cksum += b;
;PCODE: $00000D63 VOL: 0
;PCODE: $00000D64 VOL: 0
; 0002 0728 if (cksum != 0) {
;PCODE: $00000D65 VOL: 0
;PCODE: $00000D66 VOL: 0
; 0002 0729 error("Bad checksum: ");
;PCODE: $00000D67 VOL: 0
;PCODE: $00000D68 VOL: 0
;PCODE: $00000D69 VOL: 0
;PCODE: $00000D6A VOL: 0
; 0002 072A return 0;//break;
;PCODE: $00000D6B VOL: 0
;PCODE: $00000D6C VOL: 0
;PCODE: $00000D6D VOL: 0
;PCODE: $00000D6E VOL: 0
; 0002 072B //Serial.print(cksum, HEX);
; 0002 072C }
; 0002 072D if (hextext_read_byte() != '\r') {
;PCODE: $00000D6F VOL: 0
;PCODE: $00000D70 VOL: 0
;PCODE: $00000D71 VOL: 0
;PCODE: $00000D72 VOL: 0
; 0002 072E error("No end of line");
;PCODE: $00000D73 VOL: 0
;PCODE: $00000D74 VOL: 0
;PCODE: $00000D75 VOL: 0
;PCODE: $00000D76 VOL: 0
; 0002 072F return 0;//break;
;PCODE: $00000D77 VOL: 0
;PCODE: $00000D78 VOL: 0
;PCODE: $00000D79 VOL: 0
;PCODE: $00000D7A VOL: 0
; 0002 0730 }
; 0002 0731 if (hextext_read_byte() != '\n') {
;PCODE: $00000D7B VOL: 0
;PCODE: $00000D7C VOL: 0
;PCODE: $00000D7D VOL: 0
;PCODE: $00000D7E VOL: 0
; 0002 0732 error("No end of line");
;PCODE: $00000D7F VOL: 0
;PCODE: $00000D80 VOL: 0
;PCODE: $00000D81 VOL: 0
;PCODE: $00000D82 VOL: 0
; 0002 0733 return 0;//break;
;PCODE: $00000D83 VOL: 0
;PCODE: $00000D84 VOL: 0
;PCODE: $00000D85 VOL: 0
;PCODE: $00000D86 VOL: 0
; 0002 0734 }
; 0002 0735 if (page_idx == pagesize)
;PCODE: $00000D87 VOL: 0
;PCODE: $00000D88 VOL: 0
;PCODE: $00000D89 VOL: 0
;PCODE: $00000D8A VOL: 0
; 0002 0736 return 0;//break;
;PCODE: $00000D8B VOL: 0
;PCODE: $00000D8C VOL: 0
;PCODE: $00000D8D VOL: 0
;PCODE: $00000D8E VOL: 0
; 0002 0737 }
;PCODE: $00000D8F VOL: 0
;PCODE: $00000D90 VOL: 0
;PCODE: $00000D91 VOL: 0
; 0002 0738 return 0;//return hextext;
;PCODE: $00000D92 VOL: 0
;PCODE: $00000D93 VOL: 0
;PCODE: $00000D94 VOL: 0
;PCODE: $00000D95 VOL: 0
; 0002 0739 }
;PCODE: $00000D96 VOL: 0
;UCHAR flashPage (UCHAR *pagebuff, UINT pagesize) {
; 0002 073D UCHAR flashPage (UCHAR *pagebuff, UINT pagesize) {
;PCODE: $00000D97 VOL: 0
;PCODE: $00000D98 VOL: 0
; 0002 073E //SPI.setClockDivider(CLOCKSPEED_FLASH);
; 0002 073F UINT i;
; 0002 0740 for (i=0; i < (pagesize/2); i++) {
;PCODE: $00000D99 VOL: 0
;PCODE: $00000D9A VOL: 0
;	*pagebuff -> Y+4
;	pagesize -> Y+2
;	i -> R16,R17
;PCODE: $00000D9B VOL: 0
;PCODE: $00000D9C VOL: 0
;PCODE: $00000D9D VOL: 0
;PCODE: $00000D9E VOL: 0
;PCODE: $00000D9F VOL: 0
;PCODE: $00000DA0 VOL: 0
;PCODE: $00000DA1 VOL: 0
;PCODE: $00000DA2 VOL: 0
;PCODE: $00000DA3 VOL: 0
;PCODE: $00000DA4 VOL: 0
; 0002 0741 AVR910_ResetTXData();//clear send to uart tx buffer
;PCODE: $00000DA5 VOL: 0
; 0002 0742 FIFO_Write(pagebuff[2*i]);
;PCODE: $00000DA6 VOL: 0
;PCODE: $00000DA7 VOL: 0
;PCODE: $00000DA8 VOL: 0
;PCODE: $00000DA9 VOL: 0
;PCODE: $00000DAA VOL: 0
;PCODE: $00000DAB VOL: 0
;PCODE: $00000DAC VOL: 0
; 0002 0743 FIFO_Write(pagebuff[2*i+1]);
;PCODE: $00000DAD VOL: 0
;PCODE: $00000DAE VOL: 0
;PCODE: $00000DAF VOL: 0
;PCODE: $00000DB0 VOL: 0
;PCODE: $00000DB1 VOL: 0
;PCODE: $00000DB2 VOL: 0
;PCODE: $00000DB3 VOL: 0
;PCODE: $00000DB4 VOL: 0
; 0002 0744 AVR910_Command();
;PCODE: $00000DB5 VOL: 0
; 0002 0745 }
;PCODE: $00000DB6 VOL: 0
;PCODE: $00000DB7 VOL: 0
;PCODE: $00000DB8 VOL: 0
;PCODE: $00000DB9 VOL: 0
;PCODE: $00000DBA VOL: 0
; 0002 0746 return TRUE;
;PCODE: $00000DBB VOL: 0
;PCODE: $00000DBC VOL: 0
;PCODE: $00000DBD VOL: 0
;PCODE: $00000DBE VOL: 0
;PCODE: $00000DBF VOL: 0
;PCODE: $00000DC0 VOL: 0
;PCODE: $00000DC1 VOL: 0
; 0002 0747 }
;PCODE: $00000DC2 VOL: 0
;UCHAR WriteChipEeprom(UCHAR *data, UINT len, UINT startaddr)
; 0002 074B {
;PCODE: $00000DC3 VOL: 0
;PCODE: $00000DC4 VOL: 0
; 0002 074C UINT i;
; 0002 074D AVR910_ResetTXData();//clear send to uart tx buffer
;PCODE: $00000DC5 VOL: 0
;PCODE: $00000DC6 VOL: 0
;	*data -> Y+6
;	len -> Y+4
;	startaddr -> Y+2
;	i -> R16,R17
;PCODE: $00000DC7 VOL: 0
; 0002 074E // 1. 'A,0x00(high),0x01(low)' set address to write to eeprom. ACK response
; 0002 074F FIFO_Write('A');FIFO_Write(startaddr>>8);FIFO_Write(startaddr&0xff);AVR910_Command();
;PCODE: $00000DC8 VOL: 0
;PCODE: $00000DC9 VOL: 0
;PCODE: $00000DCA VOL: 0
;PCODE: $00000DCB VOL: 0
;PCODE: $00000DCC VOL: 0
;PCODE: $00000DCD VOL: 0
;PCODE: $00000DCE VOL: 0
;PCODE: $00000DCF VOL: 0
;PCODE: $00000DD0 VOL: 0
;PCODE: $00000DD1 VOL: 0
;PCODE: $00000DD2 VOL: 0
; 0002 0750 for(i=0;(i<len)&&(g_Addr<tmpimage.eepromsizebytes);i++){
;PCODE: $00000DD3 VOL: 0
;PCODE: $00000DD4 VOL: 0
;PCODE: $00000DD5 VOL: 0
;PCODE: $00000DD6 VOL: 0
;PCODE: $00000DD7 VOL: 0
;PCODE: $00000DD8 VOL: 0
;PCODE: $00000DD9 VOL: 0
;PCODE: $00000DDA VOL: 0
;PCODE: $00000DDB VOL: 0
;PCODE: $00000DDC VOL: 0
;PCODE: $00000DDD VOL: 0
;PCODE: $00000DDE VOL: 0
;PCODE: $00000DDF VOL: 0
;PCODE: $00000DE0 VOL: 0
;PCODE: $00000DE1 VOL: 0
;PCODE: $00000DE2 VOL: 0
;PCODE: $00000DE3 VOL: 0
;PCODE: $00000DE4 VOL: 0
; 0002 0751 // 2   'D' - write byte to eeprom  and inc g_Addr
; 0002 0752 FIFO_Write('D');FIFO_Write(*(data+i));AVR910_Command();
;PCODE: $00000DE5 VOL: 0
;PCODE: $00000DE6 VOL: 0
;PCODE: $00000DE7 VOL: 0
;PCODE: $00000DE8 VOL: 0
;PCODE: $00000DE9 VOL: 0
;PCODE: $00000DEA VOL: 0
;PCODE: $00000DEB VOL: 0
;PCODE: $00000DEC VOL: 0
;PCODE: $00000DED VOL: 0
;PCODE: $00000DEE VOL: 0
; 0002 0753 if(g_txBuf[0]!=ACK){
;PCODE: $00000DEF VOL: 0
;PCODE: $00000DF0 VOL: 0
;PCODE: $00000DF1 VOL: 0
; 0002 0754 return FALSE;
;PCODE: $00000DF2 VOL: 0
;PCODE: $00000DF3 VOL: 0
;PCODE: $00000DF4 VOL: 0
;PCODE: $00000DF5 VOL: 0
;PCODE: $00000DF6 VOL: 0
;PCODE: $00000DF7 VOL: 0
;PCODE: $00000DF8 VOL: 0
; 0002 0755 }
; 0002 0756 #ifdef PRINT_DEBUG
; 0002 0757 if(debug){
; 0002 0758 while(tx_counter);
; 0002 0759 printf("\r\nee adr=%u data=%02X .",g_Addr-1,*(data+i));
; 0002 075A while(tx_counter);}
; 0002 075B #endif
; 0002 075C }
;PCODE: $00000DF9 VOL: 0
;PCODE: $00000DFA VOL: 0
;PCODE: $00000DFB VOL: 0
;PCODE: $00000DFC VOL: 0
;PCODE: $00000DFD VOL: 0
;PCODE: $00000DFE VOL: 0
; 0002 075D return TRUE;
;PCODE: $00000DFF VOL: 0
;PCODE: $00000E00 VOL: 0
;PCODE: $00000E01 VOL: 0
;PCODE: $00000E02 VOL: 0
;PCODE: $00000E03 VOL: 0
;PCODE: $00000E04 VOL: 0
;PCODE: $00000E05 VOL: 0
; 0002 075E }
;PCODE: $00000E06 VOL: 0
;UCHAR VerifyChipEeprom(UCHAR *data, UINT len, UINT startaddr)
; 0002 0762 {
;PCODE: $00000E07 VOL: 0
;PCODE: $00000E08 VOL: 0
; 0002 0763 UINT i;
; 0002 0764 AVR910_ResetTXData();//clear send to uart tx buffer
;PCODE: $00000E09 VOL: 0
;PCODE: $00000E0A VOL: 0
;	*data -> Y+6
;	len -> Y+4
;	startaddr -> Y+2
;	i -> R16,R17
;PCODE: $00000E0B VOL: 0
; 0002 0765 // 1. 'A,0x00(high),0x01(low)' set address to write to eeprom. ACK response
; 0002 0766 FIFO_Write('A');FIFO_Write(startaddr>>8);FIFO_Write(startaddr&0xff);AVR910_Command();
;PCODE: $00000E0C VOL: 0
;PCODE: $00000E0D VOL: 0
;PCODE: $00000E0E VOL: 0
;PCODE: $00000E0F VOL: 0
;PCODE: $00000E10 VOL: 0
;PCODE: $00000E11 VOL: 0
;PCODE: $00000E12 VOL: 0
;PCODE: $00000E13 VOL: 0
;PCODE: $00000E14 VOL: 0
;PCODE: $00000E15 VOL: 0
;PCODE: $00000E16 VOL: 0
; 0002 0767 for(i=0;(i<len)&&(g_Addr<tmpimage.eepromsizebytes);i++){
;PCODE: $00000E17 VOL: 0
;PCODE: $00000E18 VOL: 0
;PCODE: $00000E19 VOL: 0
;PCODE: $00000E1A VOL: 0
;PCODE: $00000E1B VOL: 0
;PCODE: $00000E1C VOL: 0
;PCODE: $00000E1D VOL: 0
;PCODE: $00000E1E VOL: 0
;PCODE: $00000E1F VOL: 0
;PCODE: $00000E20 VOL: 0
;PCODE: $00000E21 VOL: 0
;PCODE: $00000E22 VOL: 0
;PCODE: $00000E23 VOL: 0
;PCODE: $00000E24 VOL: 0
;PCODE: $00000E25 VOL: 0
;PCODE: $00000E26 VOL: 0
;PCODE: $00000E27 VOL: 0
;PCODE: $00000E28 VOL: 0
; 0002 0768 // 2   'd' - read byte from eeprom  and inc g_Addr
; 0002 0769 FIFO_Write('d');AVR910_Command();
;PCODE: $00000E29 VOL: 0
;PCODE: $00000E2A VOL: 0
;PCODE: $00000E2B VOL: 0
;PCODE: $00000E2C VOL: 0
; 0002 076A if(g_txBuf[0]!=*(data+i)){
;PCODE: $00000E2D VOL: 0
;PCODE: $00000E2E VOL: 0
;PCODE: $00000E2F VOL: 0
;PCODE: $00000E30 VOL: 0
;PCODE: $00000E31 VOL: 0
;PCODE: $00000E32 VOL: 0
;PCODE: $00000E33 VOL: 0
; 0002 076B return FALSE;
;PCODE: $00000E34 VOL: 0
;PCODE: $00000E35 VOL: 0
;PCODE: $00000E36 VOL: 0
;PCODE: $00000E37 VOL: 0
;PCODE: $00000E38 VOL: 0
;PCODE: $00000E39 VOL: 0
;PCODE: $00000E3A VOL: 0
; 0002 076C }
; 0002 076D #ifdef PRINT_DEBUG
; 0002 076E if(debug){
; 0002 076F while(tx_counter);
; 0002 0770 printf("\r\nbuf adr=%u data=%02X : ee adr=%u data=%02X .",i,*(data+i),g_Addr-1,g_txBuf[0]);
; 0002 0771 while(tx_counter);}
; 0002 0772 #endif
; 0002 0773 }
;PCODE: $00000E3B VOL: 0
;PCODE: $00000E3C VOL: 0
;PCODE: $00000E3D VOL: 0
;PCODE: $00000E3E VOL: 0
;PCODE: $00000E3F VOL: 0
;PCODE: $00000E40 VOL: 0
; 0002 0774 return TRUE;
;PCODE: $00000E41 VOL: 0
;PCODE: $00000E42 VOL: 0
;PCODE: $00000E43 VOL: 0
;PCODE: $00000E44 VOL: 0
;PCODE: $00000E45 VOL: 0
;PCODE: $00000E46 VOL: 0
;PCODE: $00000E47 VOL: 0
; 0002 0775 }
;PCODE: $00000E48 VOL: 0
;UCHAR ReadChipEeprom(void)
; 0002 0779 {
;PCODE: $00000E49 VOL: 0
;PCODE: $00000E4A VOL: 0
; 0002 077A UINT i;
; 0002 077B AVR910_ResetTXData();//clear send to uart tx buffer
;PCODE: $00000E4B VOL: 0
;PCODE: $00000E4C VOL: 0
;	i -> R16,R17
;PCODE: $00000E4D VOL: 0
; 0002 077C // 1. 'A,0x00(high),0x01(low)' set address to write to eeprom. ACK response
; 0002 077D FIFO_Write('A');FIFO_Write(0);FIFO_Write(0);AVR910_Command();
;PCODE: $00000E4E VOL: 0
;PCODE: $00000E4F VOL: 0
;PCODE: $00000E50 VOL: 0
;PCODE: $00000E51 VOL: 0
;PCODE: $00000E52 VOL: 0
;PCODE: $00000E53 VOL: 0
;PCODE: $00000E54 VOL: 0
;PCODE: $00000E55 VOL: 0
;PCODE: $00000E56 VOL: 0
;PCODE: $00000E57 VOL: 0
; 0002 077E for(i=0;i<(tmpimage.eepromsizebytes);i++){
;PCODE: $00000E58 VOL: 0
;PCODE: $00000E59 VOL: 0
;PCODE: $00000E5A VOL: 0
;PCODE: $00000E5B VOL: 0
;PCODE: $00000E5C VOL: 0
;PCODE: $00000E5D VOL: 0
;PCODE: $00000E5E VOL: 0
;PCODE: $00000E5F VOL: 0
;PCODE: $00000E60 VOL: 0
;PCODE: $00000E61 VOL: 0
; 0002 077F // 2   'd' - read byte from eeprom  and inc g_Addr
; 0002 0780 FIFO_Write('d');AVR910_Command();
;PCODE: $00000E62 VOL: 0
;PCODE: $00000E63 VOL: 0
;PCODE: $00000E64 VOL: 0
;PCODE: $00000E65 VOL: 0
; 0002 0781 //g_txBuf[0];
; 0002 0782 }
;PCODE: $00000E66 VOL: 0
;PCODE: $00000E67 VOL: 0
;PCODE: $00000E68 VOL: 0
;PCODE: $00000E69 VOL: 0
;PCODE: $00000E6A VOL: 0
; 0002 0783 return TRUE;
;PCODE: $00000E6B VOL: 0
;PCODE: $00000E6C VOL: 0
;PCODE: $00000E6D VOL: 0
; 0002 0784 }
;PCODE: $00000E6E VOL: 0
;UCHAR verifyImageSD ()  {
; 0002 0789 UCHAR verifyImageSD ()  {
;PCODE: $00000E6F VOL: 0
;PCODE: $00000E70 VOL: 0
; 0002 078A ULONG lineaddr;
; 0002 078B UCHAR len;
; 0002 078C UCHAR b, cksum = 0;
; 0002 078D UCHAR i;
; 0002 078E 
; 0002 078F #ifdef PRINT_LCD
; 0002 0790 if(CanShow){
; 0002 0791 itoa((int)((int)(g_CpuFreq/2)/((int)(UBRR0L)+(int)1)),tmpbytes);   // 1=0,1 2=0,1,2
; 0002 0792 strcatf(tmpbytes,"Khz  ");
; 0002 0793 lcd_puts_row(3,tmpbytes);
; 0002 0794 delay_ms(200);
; 0002 0795 }
; 0002 0796 lcd_putsf_row(3,"Reading ");
; 0002 0797 #endif
; 0002 0798 while (1) {
;PCODE: $00000E71 VOL: 0
;PCODE: $00000E72 VOL: 0
;	lineaddr -> Y+4
;	len -> R17
;	b -> R16
;	cksum -> R19
;	i -> R18
;PCODE: $00000E73 VOL: 0
;PCODE: $00000E74 VOL: 0
;PCODE: $00000E75 VOL: 0
; 0002 0799 #ifdef PRINT_LCD
; 0002 079A if(CanShow){
; 0002 079B lcd_gotoxy(9,3);
; 0002 079C itoa((int)((float)((float)lineaddr/(float)tmpimage.chipsize)*100),&temptext[0]);
; 0002 079D if((strlen(temptext))<3){
; 0002 079E lcd_puts(temptext);
; 0002 079F lcd_putsf("%");
; 0002 07A0 }
; 0002 07A1 }
; 0002 07A2 #endif
; 0002 07A3 // read one line!
; 0002 07A4 if (hextext_read_byte() != ':') {
;PCODE: $00000E76 VOL: 0
;PCODE: $00000E77 VOL: 0
;PCODE: $00000E78 VOL: 0
; 0002 07A5 error("No colon");
;PCODE: $00000E79 VOL: 0
;PCODE: $00000E7A VOL: 0
;PCODE: $00000E7B VOL: 0
;PCODE: $00000E7C VOL: 0
; 0002 07A6 return FALSE;
;PCODE: $00000E7D VOL: 0
;PCODE: $00000E7E VOL: 0
;PCODE: $00000E7F VOL: 0
;PCODE: $00000E80 VOL: 0
; 0002 07A7 }
; 0002 07A8 len = hexton(hextext_read_byte());
;PCODE: $00000E81 VOL: 0
;PCODE: $00000E82 VOL: 0
;PCODE: $00000E83 VOL: 0
;PCODE: $00000E84 VOL: 0
;PCODE: $00000E85 VOL: 0
; 0002 07A9 len = (len<<4) + hexton(hextext_read_byte());
;PCODE: $00000E86 VOL: 0
;PCODE: $00000E87 VOL: 0
;PCODE: $00000E88 VOL: 0
;PCODE: $00000E89 VOL: 0
;PCODE: $00000E8A VOL: 0
;PCODE: $00000E8B VOL: 0
;PCODE: $00000E8C VOL: 0
;PCODE: $00000E8D VOL: 0
;PCODE: $00000E8E VOL: 0
; 0002 07AA cksum = len;
;PCODE: $00000E8F VOL: 0
;PCODE: $00000E90 VOL: 0
; 0002 07AB 
; 0002 07AC b = hexton(hextext_read_byte()); // record type
;PCODE: $00000E91 VOL: 0
;PCODE: $00000E92 VOL: 0
;PCODE: $00000E93 VOL: 0
;PCODE: $00000E94 VOL: 0
; 0002 07AD b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000E95 VOL: 0
;PCODE: $00000E96 VOL: 0
;PCODE: $00000E97 VOL: 0
;PCODE: $00000E98 VOL: 0
;PCODE: $00000E99 VOL: 0
;PCODE: $00000E9A VOL: 0
;PCODE: $00000E9B VOL: 0
;PCODE: $00000E9C VOL: 0
;PCODE: $00000E9D VOL: 0
; 0002 07AE cksum += b;
;PCODE: $00000E9E VOL: 0
;PCODE: $00000E9F VOL: 0
; 0002 07AF lineaddr = b;
;PCODE: $00000EA0 VOL: 0
;PCODE: $00000EA1 VOL: 0
;PCODE: $00000EA2 VOL: 0
; 0002 07B0 b = hexton(hextext_read_byte()); // record type
;PCODE: $00000EA3 VOL: 0
;PCODE: $00000EA4 VOL: 0
;PCODE: $00000EA5 VOL: 0
;PCODE: $00000EA6 VOL: 0
; 0002 07B1 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000EA7 VOL: 0
;PCODE: $00000EA8 VOL: 0
;PCODE: $00000EA9 VOL: 0
;PCODE: $00000EAA VOL: 0
;PCODE: $00000EAB VOL: 0
;PCODE: $00000EAC VOL: 0
;PCODE: $00000EAD VOL: 0
;PCODE: $00000EAE VOL: 0
;PCODE: $00000EAF VOL: 0
; 0002 07B2 cksum += b;
;PCODE: $00000EB0 VOL: 0
;PCODE: $00000EB1 VOL: 0
; 0002 07B3 lineaddr = (lineaddr << 8) + b;
;PCODE: $00000EB2 VOL: 0
;PCODE: $00000EB3 VOL: 0
;PCODE: $00000EB4 VOL: 0
;PCODE: $00000EB5 VOL: 0
;PCODE: $00000EB6 VOL: 0
;PCODE: $00000EB7 VOL: 0
;PCODE: $00000EB8 VOL: 0
;PCODE: $00000EB9 VOL: 0
;PCODE: $00000EBA VOL: 0
; 0002 07B4 lineaddr+=OffsetX16;//ADD OFFSET *16
;PCODE: $00000EBB VOL: 0
;PCODE: $00000EBC VOL: 0
;PCODE: $00000EBD VOL: 0
;PCODE: $00000EBE VOL: 0
; 0002 07B5 b = hexton(hextext_read_byte()); // record type
;PCODE: $00000EBF VOL: 0
;PCODE: $00000EC0 VOL: 0
;PCODE: $00000EC1 VOL: 0
;PCODE: $00000EC2 VOL: 0
; 0002 07B6 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000EC3 VOL: 0
;PCODE: $00000EC4 VOL: 0
;PCODE: $00000EC5 VOL: 0
;PCODE: $00000EC6 VOL: 0
;PCODE: $00000EC7 VOL: 0
;PCODE: $00000EC8 VOL: 0
;PCODE: $00000EC9 VOL: 0
;PCODE: $00000ECA VOL: 0
;PCODE: $00000ECB VOL: 0
; 0002 07B7 cksum += b;
;PCODE: $00000ECC VOL: 0
;PCODE: $00000ECD VOL: 0
; 0002 07B8 
; 0002 07B9 //Serial.print("Record type "); Serial.println(b, HEX);
; 0002 07BA if (b == 0x1) {
;PCODE: $00000ECE VOL: 0
;PCODE: $00000ECF VOL: 0
;PCODE: $00000ED0 VOL: 0
; 0002 07BB // end record!
; 0002 07BC break;
;PCODE: $00000ED1 VOL: 0
; 0002 07BD }
; 0002 07BE // offset *16 record!
; 0002 07BF else if (b == 0x2) {
;PCODE: $00000ED2 VOL: 0
;PCODE: $00000ED3 VOL: 0
;PCODE: $00000ED4 VOL: 0
;PCODE: $00000ED5 VOL: 0
;PCODE: $00000ED6 VOL: 0
; 0002 07C0 b = hexton(hextext_read_byte());
;PCODE: $00000ED7 VOL: 0
;PCODE: $00000ED8 VOL: 0
;PCODE: $00000ED9 VOL: 0
;PCODE: $00000EDA VOL: 0
; 0002 07C1 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000EDB VOL: 0
;PCODE: $00000EDC VOL: 0
;PCODE: $00000EDD VOL: 0
;PCODE: $00000EDE VOL: 0
;PCODE: $00000EDF VOL: 0
;PCODE: $00000EE0 VOL: 0
;PCODE: $00000EE1 VOL: 0
;PCODE: $00000EE2 VOL: 0
;PCODE: $00000EE3 VOL: 0
; 0002 07C2 cksum += b;
;PCODE: $00000EE4 VOL: 0
;PCODE: $00000EE5 VOL: 0
; 0002 07C3 OffsetX16=((ULONG)b<<12);
;PCODE: $00000EE6 VOL: 0
;PCODE: $00000EE7 VOL: 0
;PCODE: $00000EE8 VOL: 0
;PCODE: $00000EE9 VOL: 0
;PCODE: $00000EEA VOL: 0
;PCODE: $00000EEB VOL: 0
;PCODE: $00000EEC VOL: 0
; 0002 07C4 b = hexton(hextext_read_byte());
;PCODE: $00000EED VOL: 0
;PCODE: $00000EEE VOL: 0
;PCODE: $00000EEF VOL: 0
;PCODE: $00000EF0 VOL: 0
; 0002 07C5 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000EF1 VOL: 0
;PCODE: $00000EF2 VOL: 0
;PCODE: $00000EF3 VOL: 0
;PCODE: $00000EF4 VOL: 0
;PCODE: $00000EF5 VOL: 0
;PCODE: $00000EF6 VOL: 0
;PCODE: $00000EF7 VOL: 0
;PCODE: $00000EF8 VOL: 0
;PCODE: $00000EF9 VOL: 0
; 0002 07C6 cksum += b;
;PCODE: $00000EFA VOL: 0
;PCODE: $00000EFB VOL: 0
; 0002 07C7 OffsetX16|=((ULONG)b<<4);
;PCODE: $00000EFC VOL: 0
;PCODE: $00000EFD VOL: 0
;PCODE: $00000EFE VOL: 0
;PCODE: $00000EFF VOL: 0
;PCODE: $00000F00 VOL: 0
;PCODE: $00000F01 VOL: 0
;PCODE: $00000F02 VOL: 0
;PCODE: $00000F03 VOL: 0
;PCODE: $00000F04 VOL: 0
; 0002 07C8 b = hexton(hextext_read_byte());  // chxsum
;PCODE: $00000F05 VOL: 0
;PCODE: $00000F06 VOL: 0
;PCODE: $00000F07 VOL: 0
;PCODE: $00000F08 VOL: 0
; 0002 07C9 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000F09 VOL: 0
;PCODE: $00000F0A VOL: 0
;PCODE: $00000F0B VOL: 0
;PCODE: $00000F0C VOL: 0
;PCODE: $00000F0D VOL: 0
;PCODE: $00000F0E VOL: 0
;PCODE: $00000F0F VOL: 0
;PCODE: $00000F10 VOL: 0
;PCODE: $00000F11 VOL: 0
; 0002 07CA cksum += b;
;PCODE: $00000F12 VOL: 0
;PCODE: $00000F13 VOL: 0
; 0002 07CB if (cksum != 0) {
;PCODE: $00000F14 VOL: 0
;PCODE: $00000F15 VOL: 0
; 0002 07CC error("Bad checksum: ");
;PCODE: $00000F16 VOL: 0
;PCODE: $00000F17 VOL: 0
;PCODE: $00000F18 VOL: 0
;PCODE: $00000F19 VOL: 0
; 0002 07CD //Serial.print(cksum, HEX);
; 0002 07CE }
; 0002 07CF if (hextext_read_byte() != '\r') {
;PCODE: $00000F1A VOL: 0
;PCODE: $00000F1B VOL: 0
;PCODE: $00000F1C VOL: 0
;PCODE: $00000F1D VOL: 0
; 0002 07D0 error("No end of line");
;PCODE: $00000F1E VOL: 0
;PCODE: $00000F1F VOL: 0
;PCODE: $00000F20 VOL: 0
;PCODE: $00000F21 VOL: 0
; 0002 07D1 return FALSE;
;PCODE: $00000F22 VOL: 0
;PCODE: $00000F23 VOL: 0
;PCODE: $00000F24 VOL: 0
;PCODE: $00000F25 VOL: 0
; 0002 07D2 }
; 0002 07D3 if (hextext_read_byte() != '\n') {
;PCODE: $00000F26 VOL: 0
;PCODE: $00000F27 VOL: 0
;PCODE: $00000F28 VOL: 0
;PCODE: $00000F29 VOL: 0
; 0002 07D4 error("No end of line");
;PCODE: $00000F2A VOL: 0
;PCODE: $00000F2B VOL: 0
;PCODE: $00000F2C VOL: 0
;PCODE: $00000F2D VOL: 0
; 0002 07D5 break;
;PCODE: $00000F2E VOL: 0
; 0002 07D6 }
; 0002 07D7 continue;
;PCODE: $00000F2F VOL: 0
;PCODE: $00000F30 VOL: 0
; 0002 07D8 }
; 0002 07D9 else if (b == 0x3) {
;PCODE: $00000F31 VOL: 0
;PCODE: $00000F32 VOL: 0
;PCODE: $00000F33 VOL: 0
;PCODE: $00000F34 VOL: 0
;PCODE: $00000F35 VOL: 0
; 0002 07DA b = hexton(hextext_read_byte());
;PCODE: $00000F36 VOL: 0
;PCODE: $00000F37 VOL: 0
;PCODE: $00000F38 VOL: 0
;PCODE: $00000F39 VOL: 0
; 0002 07DB b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000F3A VOL: 0
;PCODE: $00000F3B VOL: 0
;PCODE: $00000F3C VOL: 0
;PCODE: $00000F3D VOL: 0
;PCODE: $00000F3E VOL: 0
;PCODE: $00000F3F VOL: 0
;PCODE: $00000F40 VOL: 0
;PCODE: $00000F41 VOL: 0
;PCODE: $00000F42 VOL: 0
; 0002 07DC cksum += b;
;PCODE: $00000F43 VOL: 0
;PCODE: $00000F44 VOL: 0
; 0002 07DD b = hexton(hextext_read_byte());
;PCODE: $00000F45 VOL: 0
;PCODE: $00000F46 VOL: 0
;PCODE: $00000F47 VOL: 0
;PCODE: $00000F48 VOL: 0
; 0002 07DE b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000F49 VOL: 0
;PCODE: $00000F4A VOL: 0
;PCODE: $00000F4B VOL: 0
;PCODE: $00000F4C VOL: 0
;PCODE: $00000F4D VOL: 0
;PCODE: $00000F4E VOL: 0
;PCODE: $00000F4F VOL: 0
;PCODE: $00000F50 VOL: 0
;PCODE: $00000F51 VOL: 0
; 0002 07DF cksum += b;
;PCODE: $00000F52 VOL: 0
;PCODE: $00000F53 VOL: 0
; 0002 07E0 b = hexton(hextext_read_byte());
;PCODE: $00000F54 VOL: 0
;PCODE: $00000F55 VOL: 0
;PCODE: $00000F56 VOL: 0
;PCODE: $00000F57 VOL: 0
; 0002 07E1 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000F58 VOL: 0
;PCODE: $00000F59 VOL: 0
;PCODE: $00000F5A VOL: 0
;PCODE: $00000F5B VOL: 0
;PCODE: $00000F5C VOL: 0
;PCODE: $00000F5D VOL: 0
;PCODE: $00000F5E VOL: 0
;PCODE: $00000F5F VOL: 0
;PCODE: $00000F60 VOL: 0
; 0002 07E2 cksum += b;
;PCODE: $00000F61 VOL: 0
;PCODE: $00000F62 VOL: 0
; 0002 07E3 b = hexton(hextext_read_byte());
;PCODE: $00000F63 VOL: 0
;PCODE: $00000F64 VOL: 0
;PCODE: $00000F65 VOL: 0
;PCODE: $00000F66 VOL: 0
; 0002 07E4 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000F67 VOL: 0
;PCODE: $00000F68 VOL: 0
;PCODE: $00000F69 VOL: 0
;PCODE: $00000F6A VOL: 0
;PCODE: $00000F6B VOL: 0
;PCODE: $00000F6C VOL: 0
;PCODE: $00000F6D VOL: 0
;PCODE: $00000F6E VOL: 0
;PCODE: $00000F6F VOL: 0
; 0002 07E5 cksum += b;
;PCODE: $00000F70 VOL: 0
;PCODE: $00000F71 VOL: 0
; 0002 07E6 b = hexton(hextext_read_byte());  // chxsum
;PCODE: $00000F72 VOL: 0
;PCODE: $00000F73 VOL: 0
;PCODE: $00000F74 VOL: 0
;PCODE: $00000F75 VOL: 0
; 0002 07E7 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000F76 VOL: 0
;PCODE: $00000F77 VOL: 0
;PCODE: $00000F78 VOL: 0
;PCODE: $00000F79 VOL: 0
;PCODE: $00000F7A VOL: 0
;PCODE: $00000F7B VOL: 0
;PCODE: $00000F7C VOL: 0
;PCODE: $00000F7D VOL: 0
;PCODE: $00000F7E VOL: 0
; 0002 07E8 cksum += b;
;PCODE: $00000F7F VOL: 0
;PCODE: $00000F80 VOL: 0
; 0002 07E9 if (cksum != 0) {
;PCODE: $00000F81 VOL: 0
;PCODE: $00000F82 VOL: 0
; 0002 07EA error("Bad checksum: ");
;PCODE: $00000F83 VOL: 0
;PCODE: $00000F84 VOL: 0
;PCODE: $00000F85 VOL: 0
;PCODE: $00000F86 VOL: 0
; 0002 07EB //Serial.print(cksum, HEX);
; 0002 07EC }
; 0002 07ED if (hextext_read_byte() != '\r') {
;PCODE: $00000F87 VOL: 0
;PCODE: $00000F88 VOL: 0
;PCODE: $00000F89 VOL: 0
;PCODE: $00000F8A VOL: 0
; 0002 07EE error("No end of line");
;PCODE: $00000F8B VOL: 0
;PCODE: $00000F8C VOL: 0
;PCODE: $00000F8D VOL: 0
;PCODE: $00000F8E VOL: 0
; 0002 07EF return FALSE;
;PCODE: $00000F8F VOL: 0
;PCODE: $00000F90 VOL: 0
;PCODE: $00000F91 VOL: 0
;PCODE: $00000F92 VOL: 0
; 0002 07F0 }
; 0002 07F1 if (hextext_read_byte() != '\n') {
;PCODE: $00000F93 VOL: 0
;PCODE: $00000F94 VOL: 0
;PCODE: $00000F95 VOL: 0
;PCODE: $00000F96 VOL: 0
; 0002 07F2 error("No end of line");
;PCODE: $00000F97 VOL: 0
;PCODE: $00000F98 VOL: 0
;PCODE: $00000F99 VOL: 0
;PCODE: $00000F9A VOL: 0
; 0002 07F3 break;
;PCODE: $00000F9B VOL: 0
; 0002 07F4 }
; 0002 07F5 continue;
;PCODE: $00000F9C VOL: 0
;PCODE: $00000F9D VOL: 0
; 0002 07F6 }
; 0002 07F7 for (i=0; i < len; i++) {
;PCODE: $00000F9E VOL: 0
;PCODE: $00000F9F VOL: 0
;PCODE: $00000FA0 VOL: 0
;PCODE: $00000FA1 VOL: 0
;PCODE: $00000FA2 VOL: 0
;PCODE: $00000FA3 VOL: 0
;PCODE: $00000FA4 VOL: 0
;PCODE: $00000FA5 VOL: 0
;PCODE: $00000FA6 VOL: 0
;PCODE: $00000FA7 VOL: 0
;PCODE: $00000FA8 VOL: 0
;PCODE: $00000FA9 VOL: 0
; 0002 07F8 // read 'n' bytes
; 0002 07F9 b = hexton(hextext_read_byte());
;PCODE: $00000FAA VOL: 0
;PCODE: $00000FAB VOL: 0
;PCODE: $00000FAC VOL: 0
;PCODE: $00000FAD VOL: 0
; 0002 07FA b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000FAE VOL: 0
;PCODE: $00000FAF VOL: 0
;PCODE: $00000FB0 VOL: 0
;PCODE: $00000FB1 VOL: 0
;PCODE: $00000FB2 VOL: 0
;PCODE: $00000FB3 VOL: 0
;PCODE: $00000FB4 VOL: 0
;PCODE: $00000FB5 VOL: 0
;PCODE: $00000FB6 VOL: 0
; 0002 07FB cksum += b;
;PCODE: $00000FB7 VOL: 0
;PCODE: $00000FB8 VOL: 0
; 0002 07FC // verify this byte!
; 0002 07FD if (lineaddr % 2) {
;PCODE: $00000FB9 VOL: 0
;PCODE: $00000FBA VOL: 0
;PCODE: $00000FBB VOL: 0
; 0002 07FE // for 'high' bytes:
; 0002 07FF if (b != g_txBuf[0]){//(spi_transaction(0x28, lineaddr >> 9, lineaddr / 2, 0) & 0xFF)) {
;PCODE: $00000FBC VOL: 0
;PCODE: $00000FBD VOL: 0
;PCODE: $00000FBE VOL: 0
; 0002 0800 #ifdef PRINT_DEBUG
; 0002 0801 if(debug){
; 0002 0802 printf("verification error at address 0x%X",lineaddr);
; 0002 0803 while(tx_counter);}
; 0002 0804 #endif //puthexchars(lineaddr>>8);puthexchars(lineaddr&0xff);
; 0002 0805 #ifdef PRINT_DEBUG
; 0002 0806 if(debug){
; 0002 0807 printf(" Should be 0x%X",b);
; 0002 0808 while(tx_counter);}
; 0002 0809 #endif //puthexchars(b);
; 0002 080A #ifdef PRINT_DEBUG
; 0002 080B if(debug){
; 0002 080C printf(" not 0x%X",g_txBuf[0]);
; 0002 080D while(tx_counter);}
; 0002 080E #endif
; 0002 080F //puthexchars(g_txBuf[0]);//Serial.println((spi_transaction(0x28, lineaddr >> 9, lineaddr / 2, 0) & 0xFF), HEX);
; 0002 0810 #ifdef PRINT_LCD
; 0002 0811 itoa(lineaddr,tmpbytes);
; 0002 0812 lcd_putsf_row(0,"lineaddr ");
; 0002 0813 lcd_puts(tmpbytes);
; 0002 0814 lcd_putsf_row(1,"RD:");
; 0002 0815 itoa(g_txBuf[0],tmpbytes);
; 0002 0816 lcd_puts(tmpbytes);
; 0002 0817 lcd_putsf("WR:");
; 0002 0818 itoa(b,tmpbytes);
; 0002 0819 lcd_puts(tmpbytes);
; 0002 081A delay_ms(1000);
; 0002 081B //error("Test flash fail");
; 0002 081C #endif
; 0002 081D return FALSE;
;PCODE: $00000FBF VOL: 0
;PCODE: $00000FC0 VOL: 0
;PCODE: $00000FC1 VOL: 0
;PCODE: $00000FC2 VOL: 0
; 0002 081E }
; 0002 081F } else {
;PCODE: $00000FC3 VOL: 0
;PCODE: $00000FC4 VOL: 0
;PCODE: $00000FC5 VOL: 0
; 0002 0820 // for 'low bytes'
; 0002 0821 AVR910_ResetTXData();
;PCODE: $00000FC6 VOL: 0
; 0002 0822 // 1. 'A,0x00,0x01' set address to read from flash. ACK response
; 0002 0823 // 2   'R' - read high byte then low byte
; 0002 0824 FIFO_Write('A');FIFO_Write(lineaddr>>9);FIFO_Write(lineaddr>>1);AVR910_Command();
;PCODE: $00000FC7 VOL: 0
;PCODE: $00000FC8 VOL: 0
;PCODE: $00000FC9 VOL: 0
;PCODE: $00000FCA VOL: 0
;PCODE: $00000FCB VOL: 0
;PCODE: $00000FCC VOL: 0
;PCODE: $00000FCD VOL: 0
;PCODE: $00000FCE VOL: 0
;PCODE: $00000FCF VOL: 0
;PCODE: $00000FD0 VOL: 0
;PCODE: $00000FD1 VOL: 0
;PCODE: $00000FD2 VOL: 0
;PCODE: $00000FD3 VOL: 0
; 0002 0825 if(g_txBuf[0]!=ACK){
;PCODE: $00000FD4 VOL: 0
;PCODE: $00000FD5 VOL: 0
;PCODE: $00000FD6 VOL: 0
; 0002 0826 //puts("\r\nSetAddr FAIL");
; 0002 0827 return FALSE;
;PCODE: $00000FD7 VOL: 0
;PCODE: $00000FD8 VOL: 0
;PCODE: $00000FD9 VOL: 0
;PCODE: $00000FDA VOL: 0
; 0002 0828 }
; 0002 0829 AVR910_ResetTXData();
;PCODE: $00000FDB VOL: 0
;PCODE: $00000FDC VOL: 0
; 0002 082A AVR910_Standalone("R");
;PCODE: $00000FDD VOL: 0
;PCODE: $00000FDE VOL: 0
;PCODE: $00000FDF VOL: 0
;PCODE: $00000FE0 VOL: 0
; 0002 082B if (b != g_txBuf[1]){//(spi_transaction(0x28, lineaddr >> 9, lineaddr / 2, 0) & 0xFF)) {
;PCODE: $00000FE1 VOL: 0
;PCODE: $00000FE2 VOL: 0
;PCODE: $00000FE3 VOL: 0
;PCODE: $00000FE4 VOL: 0
; 0002 082C #ifdef PRINT_DEBUG
; 0002 082D if(debug){
; 0002 082E printf("\r\n0=%02x 1=%02x  \r\n",g_txBuf[0],g_txBuf[1]);
; 0002 082F printf("verification error at address 0x%X",lineaddr);
; 0002 0830 while(tx_counter);}
; 0002 0831 #endif //puthexchars(lineaddr>>8);puthexchars(lineaddr&0xff);
; 0002 0832 #ifdef PRINT_DEBUG
; 0002 0833 if(debug){
; 0002 0834 printf(" Should be 0x%X",b);
; 0002 0835 while(tx_counter);}
; 0002 0836 #endif // puthexchars(b);
; 0002 0837 #ifdef PRINT_DEBUG
; 0002 0838 if(debug){
; 0002 0839 printf(" not 0x%X",g_txBuf[1]);
; 0002 083A while(tx_counter);}
; 0002 083B #endif
; 0002 083C //puthexchars(g_txBuf[1]);//Serial.println((spi_transaction(0x28, lineaddr >> 9, lineaddr / 2, 0) & 0xFF), HEX);
; 0002 083D 
; 0002 083E #ifdef PRINT_LCD
; 0002 083F itoa(lineaddr,tmpbytes);
; 0002 0840 lcd_putsf_row(0,"lineaddr ");
; 0002 0841 lcd_puts(tmpbytes);
; 0002 0842 lcd_putsf_row(1,"RD:");
; 0002 0843 itoa(g_txBuf[1],tmpbytes);
; 0002 0844 lcd_puts(tmpbytes);
; 0002 0845 lcd_putsf("WR:");
; 0002 0846 itoa(b,tmpbytes);
; 0002 0847 lcd_puts(tmpbytes);
; 0002 0848 delay_ms(1000);
; 0002 0849 //error("Test flash fail");
; 0002 084A #endif
; 0002 084B 
; 0002 084C return FALSE;
;PCODE: $00000FE5 VOL: 0
;PCODE: $00000FE6 VOL: 0
;PCODE: $00000FE7 VOL: 0
;PCODE: $00000FE8 VOL: 0
; 0002 084D }
; 0002 084E }
;PCODE: $00000FE9 VOL: 0
;PCODE: $00000FEA VOL: 0
; 0002 084F lineaddr++;
;PCODE: $00000FEB VOL: 0
;PCODE: $00000FEC VOL: 0
;PCODE: $00000FED VOL: 0
; 0002 0850 }
;PCODE: $00000FEE VOL: 0
;PCODE: $00000FEF VOL: 0
;PCODE: $00000FF0 VOL: 0
;PCODE: $00000FF1 VOL: 0
;PCODE: $00000FF2 VOL: 0
; 0002 0851 
; 0002 0852 b = hexton(hextext_read_byte());  // chxsum
;PCODE: $00000FF3 VOL: 0
;PCODE: $00000FF4 VOL: 0
;PCODE: $00000FF5 VOL: 0
;PCODE: $00000FF6 VOL: 0
; 0002 0853 b = (b<<4) + hexton(hextext_read_byte());
;PCODE: $00000FF7 VOL: 0
;PCODE: $00000FF8 VOL: 0
;PCODE: $00000FF9 VOL: 0
;PCODE: $00000FFA VOL: 0
;PCODE: $00000FFB VOL: 0
;PCODE: $00000FFC VOL: 0
;PCODE: $00000FFD VOL: 0
;PCODE: $00000FFE VOL: 0
;PCODE: $00000FFF VOL: 0
; 0002 0854 cksum += b;
;PCODE: $00001000 VOL: 0
;PCODE: $00001001 VOL: 0
; 0002 0855 if (cksum != 0) {
;PCODE: $00001002 VOL: 0
;PCODE: $00001003 VOL: 0
; 0002 0856 error("Bad checksum: ");
;PCODE: $00001004 VOL: 0
;PCODE: $00001005 VOL: 0
;PCODE: $00001006 VOL: 0
;PCODE: $00001007 VOL: 0
; 0002 0857 #ifdef PRINT_DEBUG
; 0002 0858 if(debug){
; 0002 0859 printf("0x%x",cksum);
; 0002 085A while(tx_counter);}
; 0002 085B #endif
; 0002 085C return FALSE;
;PCODE: $00001008 VOL: 0
;PCODE: $00001009 VOL: 0
;PCODE: $0000100A VOL: 0
;PCODE: $0000100B VOL: 0
; 0002 085D }
; 0002 085E if (hextext_read_byte() != '\r') {
;PCODE: $0000100C VOL: 0
;PCODE: $0000100D VOL: 0
;PCODE: $0000100E VOL: 0
;PCODE: $0000100F VOL: 0
; 0002 085F error("No end of line");
;PCODE: $00001010 VOL: 0
;PCODE: $00001011 VOL: 0
;PCODE: $00001012 VOL: 0
;PCODE: $00001013 VOL: 0
; 0002 0860 return FALSE;
;PCODE: $00001014 VOL: 0
;PCODE: $00001015 VOL: 0
;PCODE: $00001016 VOL: 0
;PCODE: $00001017 VOL: 0
; 0002 0861 }
; 0002 0862 if (hextext_read_byte() != '\n') {
;PCODE: $00001018 VOL: 0
;PCODE: $00001019 VOL: 0
;PCODE: $0000101A VOL: 0
;PCODE: $0000101B VOL: 0
; 0002 0863 error("No end of line");
;PCODE: $0000101C VOL: 0
;PCODE: $0000101D VOL: 0
;PCODE: $0000101E VOL: 0
;PCODE: $0000101F VOL: 0
; 0002 0864 return FALSE;
;PCODE: $00001020 VOL: 0
;PCODE: $00001021 VOL: 0
;PCODE: $00001022 VOL: 0
;PCODE: $00001023 VOL: 0
; 0002 0865 }
; 0002 0866 }
;PCODE: $00001024 VOL: 0
;PCODE: $00001025 VOL: 0
;PCODE: $00001026 VOL: 0
; 0002 0867 return TRUE;
;PCODE: $00001027 VOL: 0
;PCODE: $00001028 VOL: 0
;PCODE: $00001029 VOL: 0
;PCODE: $0000102A VOL: 0
; 0002 0868 }
;PCODE: $0000102B VOL: 0
;UCHAR programFuses (UCHAR *fuses,UCHAR *fusemask)
; 0002 086F {
;PCODE: $0000102C VOL: 0
;PCODE: $0000102D VOL: 0
; 0002 0870 //SPI.setClockDivider(CLOCKSPEED_FUSES);
; 0002 0871 UCHAR f;
; 0002 0872 SetLowSpeed();
;PCODE: $0000102E VOL: 0
;	*fuses -> Y+3
;	*fusemask -> Y+1
;	f -> R17
;PCODE: $0000102F VOL: 0
; 0002 0873 #ifdef PRINT_DEBUG
; 0002 0874 if(debug){
; 0002 0875 while(tx_counter);
; 0002 0876 printf("\r\nSetting fuses");
; 0002 0877 while(tx_counter);}
; 0002 0878 #endif
; 0002 0879 #ifdef PRINT_LCD
; 0002 087A lcd_putsf_row(3,"Setting fuses");
; 0002 087B #endif
; 0002 087C f = pgm_read_byte(&fuses[FUSE_LOW]) | ~pgm_read_byte(&fusemask[FUSE_LOW]);//0x00 | ~0x01=0xFE  = 0xFE
;PCODE: $00001030 VOL: 0
;PCODE: $00001031 VOL: 0
;PCODE: $00001032 VOL: 0
;PCODE: $00001033 VOL: 0
;PCODE: $00001034 VOL: 0
;PCODE: $00001035 VOL: 0
;PCODE: $00001036 VOL: 0
;PCODE: $00001037 VOL: 0
;PCODE: $00001038 VOL: 0
;PCODE: $00001039 VOL: 0
;PCODE: $0000103A VOL: 0
;PCODE: $0000103B VOL: 0
;PCODE: $0000103C VOL: 0
; 0002 087D if (pgm_read_byte(&fusemask[FUSE_LOW])) {
;PCODE: $0000103D VOL: 0
;PCODE: $0000103E VOL: 0
;PCODE: $0000103F VOL: 0
;PCODE: $00001040 VOL: 0
;PCODE: $00001041 VOL: 0
;PCODE: $00001042 VOL: 0
; 0002 087E #ifdef PRINT_DEBUG
; 0002 087F if(debug){
; 0002 0880 printf("\r\n  Set Low Fuses to: 0x%02x",f);
; 0002 0881 while(tx_counter);}
; 0002 0882 #endif
; 0002 0883 AVR910_ResetTXData();
;PCODE: $00001043 VOL: 0
; 0002 0884 FIFO_Write('f');//write low fuses
;PCODE: $00001044 VOL: 0
;PCODE: $00001045 VOL: 0
;PCODE: $00001046 VOL: 0
; 0002 0885 FIFO_Write(f);
;PCODE: $00001047 VOL: 0
;PCODE: $00001048 VOL: 0
; 0002 0886 AVR910_Command();
;PCODE: $00001049 VOL: 0
; 0002 0887 AVR910_ResetTXData();
;PCODE: $0000104A VOL: 0
; 0002 0888 }
; 0002 0889 f = pgm_read_byte(&fuses[FUSE_HIGH]) | ~pgm_read_byte(&fusemask[FUSE_HIGH]);
;PCODE: $0000104B VOL: 0
;PCODE: $0000104C VOL: 0
;PCODE: $0000104D VOL: 0
;PCODE: $0000104E VOL: 0
;PCODE: $0000104F VOL: 0
;PCODE: $00001050 VOL: 0
;PCODE: $00001051 VOL: 0
;PCODE: $00001052 VOL: 0
;PCODE: $00001053 VOL: 0
;PCODE: $00001054 VOL: 0
;PCODE: $00001055 VOL: 0
;PCODE: $00001056 VOL: 0
;PCODE: $00001057 VOL: 0
;PCODE: $00001058 VOL: 0
; 0002 088A if (pgm_read_byte(&fusemask[FUSE_HIGH])) {
;PCODE: $00001059 VOL: 0
;PCODE: $0000105A VOL: 0
;PCODE: $0000105B VOL: 0
;PCODE: $0000105C VOL: 0
;PCODE: $0000105D VOL: 0
;PCODE: $0000105E VOL: 0
; 0002 088B #ifdef PRINT_DEBUG
; 0002 088C if(debug){
; 0002 088D printf("\r\n  Set High Fuse to: 0x%02x",f);
; 0002 088E while(tx_counter);}
; 0002 088F #endif
; 0002 0890 AVR910_ResetTXData();
;PCODE: $0000105F VOL: 0
; 0002 0891 FIFO_Write('n');//write high fuses
;PCODE: $00001060 VOL: 0
;PCODE: $00001061 VOL: 0
;PCODE: $00001062 VOL: 0
; 0002 0892 FIFO_Write(f);
;PCODE: $00001063 VOL: 0
;PCODE: $00001064 VOL: 0
; 0002 0893 AVR910_Command();
;PCODE: $00001065 VOL: 0
; 0002 0894 AVR910_ResetTXData();
;PCODE: $00001066 VOL: 0
; 0002 0895 }
; 0002 0896 f = pgm_read_byte(&fuses[FUSE_EXT]) | ~pgm_read_byte(&fusemask[FUSE_EXT]);
;PCODE: $00001067 VOL: 0
;PCODE: $00001068 VOL: 0
;PCODE: $00001069 VOL: 0
;PCODE: $0000106A VOL: 0
;PCODE: $0000106B VOL: 0
;PCODE: $0000106C VOL: 0
;PCODE: $0000106D VOL: 0
;PCODE: $0000106E VOL: 0
;PCODE: $0000106F VOL: 0
;PCODE: $00001070 VOL: 0
;PCODE: $00001071 VOL: 0
;PCODE: $00001072 VOL: 0
;PCODE: $00001073 VOL: 0
;PCODE: $00001074 VOL: 0
; 0002 0897 if (pgm_read_byte(&fusemask[FUSE_EXT])) {
;PCODE: $00001075 VOL: 0
;PCODE: $00001076 VOL: 0
;PCODE: $00001077 VOL: 0
;PCODE: $00001078 VOL: 0
;PCODE: $00001079 VOL: 0
;PCODE: $0000107A VOL: 0
; 0002 0898 #ifdef PRINT_DEBUG
; 0002 0899 if(debug){
; 0002 089A printf("\r\n  Set Ext Fuse to: 0x%02x",f);
; 0002 089B while(tx_counter);}
; 0002 089C #endif
; 0002 089D AVR910_ResetTXData();
;PCODE: $0000107B VOL: 0
; 0002 089E FIFO_Write('o');//write ext fuses
;PCODE: $0000107C VOL: 0
;PCODE: $0000107D VOL: 0
;PCODE: $0000107E VOL: 0
; 0002 089F FIFO_Write(f);
;PCODE: $0000107F VOL: 0
;PCODE: $00001080 VOL: 0
; 0002 08A0 AVR910_Command();
;PCODE: $00001081 VOL: 0
; 0002 08A1 AVR910_ResetTXData();
;PCODE: $00001082 VOL: 0
; 0002 08A2 }
; 0002 08A3 f = pgm_read_byte(&fuses[FUSE_PROT]) | ~pgm_read_byte(&fusemask[FUSE_PROT]); //used when hex in flash
;PCODE: $00001083 VOL: 0
;PCODE: $00001084 VOL: 0
;PCODE: $00001085 VOL: 0
;PCODE: $00001086 VOL: 0
;PCODE: $00001087 VOL: 0
;PCODE: $00001088 VOL: 0
;PCODE: $00001089 VOL: 0
;PCODE: $0000108A VOL: 0
;PCODE: $0000108B VOL: 0
;PCODE: $0000108C VOL: 0
;PCODE: $0000108D VOL: 0
;PCODE: $0000108E VOL: 0
; 0002 08A4 if (pgm_read_byte(&fusemask[FUSE_PROT])) {
;PCODE: $0000108F VOL: 0
;PCODE: $00001090 VOL: 0
;PCODE: $00001091 VOL: 0
;PCODE: $00001092 VOL: 0
;PCODE: $00001093 VOL: 0
; 0002 08A5 #ifdef PRINT_DEBUG
; 0002 08A6 if(debug){
; 0002 08A7 printf("\r\n  Set Lock Fuse to: 0x%02x",f);
; 0002 08A8 while(tx_counter);}
; 0002 08A9 #endif
; 0002 08AA AVR910_ResetTXData();
;PCODE: $00001094 VOL: 0
; 0002 08AB FIFO_Write('l');//write lock fuses
;PCODE: $00001095 VOL: 0
;PCODE: $00001096 VOL: 0
;PCODE: $00001097 VOL: 0
; 0002 08AC FIFO_Write(f);
;PCODE: $00001098 VOL: 0
;PCODE: $00001099 VOL: 0
; 0002 08AD AVR910_Command();
;PCODE: $0000109A VOL: 0
; 0002 08AE AVR910_ResetTXData();
;PCODE: $0000109B VOL: 0
; 0002 08AF }
; 0002 08B0 return TRUE;			/* */
;PCODE: $0000109C VOL: 0
;PCODE: $0000109D VOL: 0
;PCODE: $0000109E VOL: 0
;PCODE: $0000109F VOL: 0
;PCODE: $000010A0 VOL: 0
;PCODE: $000010A1 VOL: 0
; 0002 08B1 }
;PCODE: $000010A2 VOL: 0
;UCHAR verifyFuses (UCHAR *fuses, UCHAR *fusemask)
; 0002 08B7 {
;PCODE: $000010A3 VOL: 0
;PCODE: $000010A4 VOL: 0
; 0002 08B8 //SPI.setClockDivider(CLOCKSPEED_FUSES);
; 0002 08B9 UCHAR f;
; 0002 08BA UCHAR readfuse;
; 0002 08BB SetLowSpeed();
;PCODE: $000010A5 VOL: 0
;PCODE: $000010A6 VOL: 0
;	*fuses -> Y+4
;	*fusemask -> Y+2
;	f -> R17
;	readfuse -> R16
;PCODE: $000010A7 VOL: 0
; 0002 08BC #ifdef PRINT_DEBUG
; 0002 08BD if(debug){
; 0002 08BE printf("\r\nVerifying fuses...");
; 0002 08BF while(tx_counter);}
; 0002 08C0 #endif
; 0002 08C1 #ifdef PRINT_LCD
; 0002 08C2 lcd_putsf_row(3,"Verify fuses.");
; 0002 08C3 #endif
; 0002 08C4 f = pgm_read_byte(&fuses[FUSE_LOW]) | ~pgm_read_byte(&fusemask[FUSE_LOW]);
;PCODE: $000010A8 VOL: 0
;PCODE: $000010A9 VOL: 0
;PCODE: $000010AA VOL: 0
;PCODE: $000010AB VOL: 0
;PCODE: $000010AC VOL: 0
;PCODE: $000010AD VOL: 0
;PCODE: $000010AE VOL: 0
;PCODE: $000010AF VOL: 0
;PCODE: $000010B0 VOL: 0
;PCODE: $000010B1 VOL: 0
;PCODE: $000010B2 VOL: 0
;PCODE: $000010B3 VOL: 0
;PCODE: $000010B4 VOL: 0
; 0002 08C5 if (pgm_read_byte(&fusemask[FUSE_LOW])) {
;PCODE: $000010B5 VOL: 0
;PCODE: $000010B6 VOL: 0
;PCODE: $000010B7 VOL: 0
;PCODE: $000010B8 VOL: 0
;PCODE: $000010B9 VOL: 0
;PCODE: $000010BA VOL: 0
; 0002 08C6 AVR910_Standalone("F");  // low fuse
;PCODE: $000010BB VOL: 0
;PCODE: $000010BC VOL: 0
;PCODE: $000010BD VOL: 0
;PCODE: $000010BE VOL: 0
; 0002 08C7 readfuse=g_txBuf[0];
;PCODE: $000010BF VOL: 0
;PCODE: $000010C0 VOL: 0
; 0002 08C8 readfuse |= ~pgm_read_byte(&fusemask[FUSE_LOW]);
;PCODE: $000010C1 VOL: 0
;PCODE: $000010C2 VOL: 0
;PCODE: $000010C3 VOL: 0
;PCODE: $000010C4 VOL: 0
;PCODE: $000010C5 VOL: 0
;PCODE: $000010C6 VOL: 0
;PCODE: $000010C7 VOL: 0
; 0002 08C9 #ifdef PRINT_DEBUG
; 0002 08CA if(debug){
; 0002 08CB printf("\r\n  Low Fuse Writen: 0x%02x",f); printf("\r\n  Low Fuse Readed: 0x%02x",readfuse);
; 0002 08CC while(tx_counter);}
; 0002 08CD #endif
; 0002 08CE if (readfuse != f)
;PCODE: $000010C8 VOL: 0
;PCODE: $000010C9 VOL: 0
;PCODE: $000010CA VOL: 0
; 0002 08CF return FALSE;
;PCODE: $000010CB VOL: 0
;PCODE: $000010CC VOL: 0
;PCODE: $000010CD VOL: 0
;PCODE: $000010CE VOL: 0
;PCODE: $000010CF VOL: 0
;PCODE: $000010D0 VOL: 0
;PCODE: $000010D1 VOL: 0
; 0002 08D0 }
;PCODE: $000010D2 VOL: 0
; 0002 08D1 f = pgm_read_byte(&fuses[FUSE_HIGH]) | ~pgm_read_byte(&fusemask[FUSE_HIGH]);
;PCODE: $000010D3 VOL: 0
;PCODE: $000010D4 VOL: 0
;PCODE: $000010D5 VOL: 0
;PCODE: $000010D6 VOL: 0
;PCODE: $000010D7 VOL: 0
;PCODE: $000010D8 VOL: 0
;PCODE: $000010D9 VOL: 0
;PCODE: $000010DA VOL: 0
;PCODE: $000010DB VOL: 0
;PCODE: $000010DC VOL: 0
;PCODE: $000010DD VOL: 0
;PCODE: $000010DE VOL: 0
;PCODE: $000010DF VOL: 0
;PCODE: $000010E0 VOL: 0
; 0002 08D2 if (pgm_read_byte(&fusemask[FUSE_HIGH])) {
;PCODE: $000010E1 VOL: 0
;PCODE: $000010E2 VOL: 0
;PCODE: $000010E3 VOL: 0
;PCODE: $000010E4 VOL: 0
;PCODE: $000010E5 VOL: 0
;PCODE: $000010E6 VOL: 0
; 0002 08D3 AVR910_Standalone("N"); // high fuse
;PCODE: $000010E7 VOL: 0
;PCODE: $000010E8 VOL: 0
;PCODE: $000010E9 VOL: 0
;PCODE: $000010EA VOL: 0
; 0002 08D4 readfuse=g_txBuf[0];
;PCODE: $000010EB VOL: 0
;PCODE: $000010EC VOL: 0
; 0002 08D5 readfuse |= ~pgm_read_byte(&fusemask[FUSE_HIGH]);
;PCODE: $000010ED VOL: 0
;PCODE: $000010EE VOL: 0
;PCODE: $000010EF VOL: 0
;PCODE: $000010F0 VOL: 0
;PCODE: $000010F1 VOL: 0
;PCODE: $000010F2 VOL: 0
;PCODE: $000010F3 VOL: 0
; 0002 08D6 #ifdef PRINT_DEBUG
; 0002 08D7 if(debug){
; 0002 08D8 printf("\r\n  High Fuse Writen: 0x%02x",f); printf("\r\n  High Fuse Readed: 0x%02x",readfuse);
; 0002 08D9 while(tx_counter);}
; 0002 08DA #endif
; 0002 08DB if (readfuse != f)
;PCODE: $000010F4 VOL: 0
;PCODE: $000010F5 VOL: 0
;PCODE: $000010F6 VOL: 0
; 0002 08DC return FALSE;
;PCODE: $000010F7 VOL: 0
;PCODE: $000010F8 VOL: 0
;PCODE: $000010F9 VOL: 0
;PCODE: $000010FA VOL: 0
;PCODE: $000010FB VOL: 0
;PCODE: $000010FC VOL: 0
;PCODE: $000010FD VOL: 0
; 0002 08DD }
;PCODE: $000010FE VOL: 0
; 0002 08DE f = pgm_read_byte(&fuses[FUSE_EXT]) | ~pgm_read_byte(&fusemask[FUSE_EXT]);
;PCODE: $000010FF VOL: 0
;PCODE: $00001100 VOL: 0
;PCODE: $00001101 VOL: 0
;PCODE: $00001102 VOL: 0
;PCODE: $00001103 VOL: 0
;PCODE: $00001104 VOL: 0
;PCODE: $00001105 VOL: 0
;PCODE: $00001106 VOL: 0
;PCODE: $00001107 VOL: 0
;PCODE: $00001108 VOL: 0
;PCODE: $00001109 VOL: 0
;PCODE: $0000110A VOL: 0
;PCODE: $0000110B VOL: 0
;PCODE: $0000110C VOL: 0
; 0002 08DF if (pgm_read_byte(&fusemask[FUSE_EXT])) {
;PCODE: $0000110D VOL: 0
;PCODE: $0000110E VOL: 0
;PCODE: $0000110F VOL: 0
;PCODE: $00001110 VOL: 0
;PCODE: $00001111 VOL: 0
;PCODE: $00001112 VOL: 0
; 0002 08E0 AVR910_Standalone("O"); // ext fuse
;PCODE: $00001113 VOL: 0
;PCODE: $00001114 VOL: 0
;PCODE: $00001115 VOL: 0
;PCODE: $00001116 VOL: 0
; 0002 08E1 readfuse=g_txBuf[0];
;PCODE: $00001117 VOL: 0
;PCODE: $00001118 VOL: 0
; 0002 08E2 readfuse |= ~pgm_read_byte(&fusemask[FUSE_EXT]);
;PCODE: $00001119 VOL: 0
;PCODE: $0000111A VOL: 0
;PCODE: $0000111B VOL: 0
;PCODE: $0000111C VOL: 0
;PCODE: $0000111D VOL: 0
;PCODE: $0000111E VOL: 0
;PCODE: $0000111F VOL: 0
; 0002 08E3 #ifdef PRINT_DEBUG
; 0002 08E4 if(debug){
; 0002 08E5 printf("\r\n  Ext Fuse Writen: 0x%02x",f); printf("\r\n  Ext Fuse Readed: 0x%02x",readfuse);
; 0002 08E6 while(tx_counter);}
; 0002 08E7 #endif
; 0002 08E8 if (readfuse != f)
;PCODE: $00001120 VOL: 0
;PCODE: $00001121 VOL: 0
;PCODE: $00001122 VOL: 0
; 0002 08E9 return FALSE;
;PCODE: $00001123 VOL: 0
;PCODE: $00001124 VOL: 0
;PCODE: $00001125 VOL: 0
;PCODE: $00001126 VOL: 0
;PCODE: $00001127 VOL: 0
;PCODE: $00001128 VOL: 0
;PCODE: $00001129 VOL: 0
; 0002 08EA }
;PCODE: $0000112A VOL: 0
; 0002 08EB f = pgm_read_byte(&fuses[FUSE_PROT]) | ~pgm_read_byte(&fusemask[FUSE_PROT]);
;PCODE: $0000112B VOL: 0
;PCODE: $0000112C VOL: 0
;PCODE: $0000112D VOL: 0
;PCODE: $0000112E VOL: 0
;PCODE: $0000112F VOL: 0
;PCODE: $00001130 VOL: 0
;PCODE: $00001131 VOL: 0
;PCODE: $00001132 VOL: 0
;PCODE: $00001133 VOL: 0
;PCODE: $00001134 VOL: 0
;PCODE: $00001135 VOL: 0
;PCODE: $00001136 VOL: 0
; 0002 08EC if (pgm_read_byte(&fusemask[FUSE_PROT])) {
;PCODE: $00001137 VOL: 0
;PCODE: $00001138 VOL: 0
;PCODE: $00001139 VOL: 0
;PCODE: $0000113A VOL: 0
;PCODE: $0000113B VOL: 0
; 0002 08ED AVR910_Standalone("Q");  // lock fuse
;PCODE: $0000113C VOL: 0
;PCODE: $0000113D VOL: 0
;PCODE: $0000113E VOL: 0
;PCODE: $0000113F VOL: 0
; 0002 08EE readfuse=g_txBuf[0];
;PCODE: $00001140 VOL: 0
;PCODE: $00001141 VOL: 0
; 0002 08EF readfuse |= ~pgm_read_byte(&fusemask[FUSE_PROT]);
;PCODE: $00001142 VOL: 0
;PCODE: $00001143 VOL: 0
;PCODE: $00001144 VOL: 0
;PCODE: $00001145 VOL: 0
;PCODE: $00001146 VOL: 0
;PCODE: $00001147 VOL: 0
; 0002 08F0 #ifdef PRINT_DEBUG
; 0002 08F1 if(debug){
; 0002 08F2 printf("\r\n  Lock Fuse Writen: 0x%02x",f); printf("\r\n  Lock Fuse Readed: 0x%02x",readfuse);
; 0002 08F3 while(tx_counter);}
; 0002 08F4 #endif
; 0002 08F5 if (readfuse != f)
;PCODE: $00001148 VOL: 0
;PCODE: $00001149 VOL: 0
;PCODE: $0000114A VOL: 0
; 0002 08F6 return FALSE;
;PCODE: $0000114B VOL: 0
;PCODE: $0000114C VOL: 0
;PCODE: $0000114D VOL: 0
;PCODE: $0000114E VOL: 0
;PCODE: $0000114F VOL: 0
;PCODE: $00001150 VOL: 0
;PCODE: $00001151 VOL: 0
; 0002 08F7 }
;PCODE: $00001152 VOL: 0
; 0002 08F8 return TRUE;			/* */
;PCODE: $00001153 VOL: 0
;PCODE: $00001154 VOL: 0
;PCODE: $00001155 VOL: 0
;PCODE: $00001156 VOL: 0
;PCODE: $00001157 VOL: 0
;PCODE: $00001158 VOL: 0
;PCODE: $00001159 VOL: 0
;PCODE: $0000115A VOL: 0
; 0002 08F9 }
;PCODE: $0000115B VOL: 0
