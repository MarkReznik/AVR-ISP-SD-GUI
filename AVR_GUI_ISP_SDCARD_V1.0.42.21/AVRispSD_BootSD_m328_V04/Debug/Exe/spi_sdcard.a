;#include "spi_sdcard.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;
;
;void SPI_init()
; 0003 0007 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 0008     // set CS, MOSI and SCK to output
; 0003 0009     DDR_SPI |= (1 << CS) | (1 << MOSI) | (1 << SCK);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0003 000A     PORT_SPI|=(1 << CS);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0003 000B     // enable pull up resistor in MISO
; 0003 000C     DDR_SPI &= ~(1 << MISO);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0003 000D     //PORT_SPI &= ~(1 << MISO);
; 0003 000E     PORT_SPI |= (1 << MISO);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0003 000F 
; 0003 0010     // enable SPI, set as master, and clock to fosc/128
; 0003 0011     SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0003 0012 }
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;
;unsigned char SPI_transfer(unsigned char data)
; 0003 0015 {
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0003 0016     // load data into register
; 0003 0017     SPDR = data;
;PCODE: $0000001E VOL: 0
;	data -> Y+0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0003 0018 
; 0003 0019     // Wait for transmission complete
; 0003 001A     while(!(SPSR & (1 << SPIF)));
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0003 001B 
; 0003 001C     // return SPDR
; 0003 001D     return SPDR;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0003 001E }
;PCODE: $0000002A VOL: 0
;
;
;void SD_powerUpSeq()
; 0003 0022 {
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0003 0023     unsigned char i;
; 0003 0024 
; 0003 0025     SPI_init();
;PCODE: $0000002D VOL: 0
;	i -> R17
;PCODE: $0000002E VOL: 0
; 0003 0026 
; 0003 0027     // make sure card is deselected
; 0003 0028     CS_DISABLE();
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0003 0029 
; 0003 002A     // give SD card time to power up
; 0003 002B     delay_ms(1);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0003 002C 
; 0003 002D     // send 80 clock cycles to synchronize
; 0003 002E     for(i = 0; i < 10; i++)
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0003 002F         SPI_transfer(0xFF);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0003 0032 PORTB |= (1 << 2       );
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0003 0033     SPI_transfer(0xFF);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0003 0034 }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;
;unsigned char SD_command(unsigned char cmd, unsigned long arg, unsigned char crc)
; 0003 0037 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0003 0038     unsigned char res;//,count;
; 0003 0039     // transmit command to sd card
; 0003 003A     SPI_transfer(cmd|0x40);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;	cmd -> Y+6
;	arg -> Y+2
;	crc -> Y+1
;	res -> R17
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0003 003B 
; 0003 003C     // transmit argument
; 0003 003D     SPI_transfer((unsigned char)(arg >> 24));
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0003 003E     SPI_transfer((unsigned char)(arg >> 16));
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0003 003F     SPI_transfer((unsigned char)(arg >> 8));
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0003 0040     SPI_transfer((unsigned char)(arg));
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0003 0041 
; 0003 0042     // transmit crc
; 0003 0043     SPI_transfer(crc|0x01);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0003 0044 
; 0003 0045     //wait response R1
; 0003 0046     res = SD_readRes1();
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0003 0047     /*
; 0003 0048     do {
; 0003 0049      res=SPI_transfer(0xFF);;
; 0003 004A      count++;
; 0003 004B     } while ( ((res&0x80)!=0x00)&&(count<0xff) );
; 0003 004C     */
; 0003 004D     return res;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0003 004E }
;PCODE: $0000006E VOL: 0
;
;
;unsigned char SD_readRes1()
; 0003 0052 {
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0003 0053     unsigned char res1;
; 0003 0054     unsigned int i = 0;
; 0003 0055 
; 0003 0056     // keep polling until actual data received
; 0003 0057     //while((res1 = SPI_transfer(0xFF)) == 0xFF)
; 0003 0058     while(((res1 = SPI_transfer(0xFF))&0x80) != 0x00)
;PCODE: $00000071 VOL: 0
;	res1 -> R17
;	i -> R18,R19
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0003 0059     {
; 0003 005A         i++;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0003 005B 
; 0003 005C         // if no data received for (254)8 bytes, break
; 0003 005D         if(i > 0x1FF) break;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0003 005E     }
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0003 005F 
; 0003 0060     return res1;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0003 0061 }
;PCODE: $00000087 VOL: 0
;
;unsigned char SD_goIdleState()
; 0003 0064 {
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0003 0065     unsigned char res1;
; 0003 0066     // assert chip select
; 0003 0067     SPI_transfer(0xFF);
;PCODE: $0000008A VOL: 0
;	res1 -> R17
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0003 0068     CS_ENABLE();
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0003 0069     //SPI_transfer(0xFF);
; 0003 006A 
; 0003 006B     // send CMD0
; 0003 006C     res1 = SD_command(CMD0, CMD0_ARG, CMD0_CRC);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0003 006D 
; 0003 006E     // read response
; 0003 006F     //res1 = SD_readRes1();
; 0003 0070 
; 0003 0071     // deassert chip select
; 0003 0072     SPI_transfer(0xFF);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0003 0073     CS_DISABLE();
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0003 0074     SPI_transfer(0xFF);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0003 0075 
; 0003 0076     return res1;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0003 0077 }
;PCODE: $0000009F VOL: 0
;
;void SD_readRes7(unsigned char *res)
; 0003 007A {
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0003 007B     // read response 1 in R7
; 0003 007C     //res[0] = SD_readRes1();
; 0003 007D 
; 0003 007E     // if error reading R1, return
; 0003 007F     if(res[0] > 1) return;
;PCODE: $000000A2 VOL: 0
;	*res -> Y+0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0003 0080 
; 0003 0081     // read remaining bytes
; 0003 0082     res[1] = SPI_transfer(0xFF);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0003 0083     res[2] = SPI_transfer(0xFF);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0003 0084     res[3] = SPI_transfer(0xFF);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0003 0085     res[4] = SPI_transfer(0xFF);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0003 0086 }
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;
;void SD_sendIfCond(unsigned char *res)
; 0003 0089 {
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0003 008A     // assert chip select
; 0003 008B     SPI_transfer(0xFF);
;PCODE: $000000BF VOL: 0
;	*res -> Y+0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0003 008C     CS_ENABLE();
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0003 008D     //SPI_transfer(0xFF);
; 0003 008E 
; 0003 008F     // send CMD8
; 0003 0090     res[0]=SD_command(CMD8, CMD8_ARG, CMD8_CRC);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0003 0091 
; 0003 0092     // read response
; 0003 0093     SD_readRes7(res);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0003 0094 
; 0003 0095     // deassert chip select
; 0003 0096     SPI_transfer(0xFF);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0003 0097     CS_DISABLE();
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0003 0098     SPI_transfer(0xFF);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0003 0099 }
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;
;/*
;void SD_readRes3_7(unsigned char *res)
;{
;    // read R1
;    //res[0] = SD_readRes1();
;
;    // if error reading R1, return
;    if(res[0] > 1) return;
;
;    // read remaining bytes
;    res[1] = SPI_transfer(0xFF);
;    res[2] = SPI_transfer(0xFF);
;    res[3] = SPI_transfer(0xFF);
;    res[4] = SPI_transfer(0xFF);
;}
;*/
;
;void SD_readOCR(unsigned char *res)
; 0003 00AD {
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0003 00AE     // assert chip select
; 0003 00AF     SPI_transfer(0xFF);
;PCODE: $000000D9 VOL: 0
;	*res -> Y+0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0003 00B0     CS_ENABLE();
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0003 00B1     //SPI_transfer(0xFF);
; 0003 00B2 
; 0003 00B3     // send CMD58
; 0003 00B4     res[0] = SD_command(CMD58, CMD58_ARG, CMD58_CRC);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0003 00B5 
; 0003 00B6     // read response
; 0003 00B7     //SD_readRes3_7(res);
; 0003 00B8     SD_readRes7(res);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0003 00B9 
; 0003 00BA     // deassert chip select
; 0003 00BB     SPI_transfer(0xFF);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0003 00BC     CS_DISABLE();
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0003 00BD     SPI_transfer(0xFF);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0003 00BE }
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;
;unsigned char SD_sendApp()
; 0003 00C1 {
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0003 00C2     unsigned char res1;
; 0003 00C3     // assert chip select
; 0003 00C4     SPI_transfer(0xFF);
;PCODE: $000000F3 VOL: 0
;	res1 -> R17
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0003 00C5     CS_ENABLE();
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0003 00C6     //SPI_transfer(0xFF);
; 0003 00C7 
; 0003 00C8     // send CMD0
; 0003 00C9     res1 = SD_command(CMD55, CMD55_ARG, CMD55_CRC);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0003 00CA 
; 0003 00CB     // read response
; 0003 00CC     //res1 = SD_readRes1();
; 0003 00CD 
; 0003 00CE     // deassert chip select
; 0003 00CF     SPI_transfer(0xFF);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0003 00D0     CS_DISABLE();
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0003 00D1     SPI_transfer(0xFF);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0003 00D2 
; 0003 00D3     return res1;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0003 00D4 }
;PCODE: $00000108 VOL: 0
;
;unsigned char SD_sendOpCond()
; 0003 00D7 {
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0003 00D8     unsigned char res1;
; 0003 00D9     // assert chip select
; 0003 00DA     SPI_transfer(0xFF);
;PCODE: $0000010B VOL: 0
;	res1 -> R17
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0003 00DB     CS_ENABLE();
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0003 00DC     //SPI_transfer(0xFF);
; 0003 00DD 
; 0003 00DE     // send CMD0
; 0003 00DF     res1 =  SD_command(ACMD41, ACMD41_ARG, ACMD41_CRC);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0003 00E0 
; 0003 00E1     // read response
; 0003 00E2     //res1 = SD_readRes1();
; 0003 00E3 
; 0003 00E4     // deassert chip select
; 0003 00E5     SPI_transfer(0xFF);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0003 00E6     CS_DISABLE();
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0003 00E7     SPI_transfer(0xFF);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0003 00E8 
; 0003 00E9     return res1;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0003 00EA }
;PCODE: $00000120 VOL: 0
;
;unsigned char SD_init()
; 0003 00ED {
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0003 00EE     unsigned char res[5], cmdAttempts = 0;
; 0003 00EF 
; 0003 00F0     SD_powerUpSeq();
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;	res -> Y+1
;	cmdAttempts -> R17
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0003 00F1 
; 0003 00F2     // command card to idle
; 0003 00F3     while((res[0] = SD_goIdleState()) != 0x01)
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0003 00F4     {
; 0003 00F5         //putchar('I');putchar('d');
; 0003 00F6         //putchar(res[0]);
; 0003 00F7         cmdAttempts++;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0003 00F8         if(cmdAttempts > 100) return SD_ERROR;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0003 00F9     }
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0003 00FA 
; 0003 00FB 
; 0003 00FC 
; 0003 00FD     // send interface conditions
; 0003 00FE     SD_sendIfCond(res);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0003 00FF 
; 0003 0100     //printhex("If",res[0],1);
; 0003 0101 
; 0003 0102     if(res[0] != 0x01)
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0003 0103     {
; 0003 0104         return SD_ERROR;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0003 0105     }
; 0003 0106 
; 0003 0107     // check echo pattern
; 0003 0108     if(res[4] != 0xAA)
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0003 0109     {
; 0003 010A         return SD_ERROR;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0003 010B     }
; 0003 010C 
; 0003 010D     // attempt to initialize card
; 0003 010E     cmdAttempts = 0;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0003 010F     do
;PCODE: $00000150 VOL: 0
; 0003 0110     {
; 0003 0111         if(cmdAttempts > 100) return SD_ERROR;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0003 0112 
; 0003 0113         // send app cmd
; 0003 0114         res[0] = SD_sendApp();
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0003 0115 
; 0003 0116         // if no error in response
; 0003 0117         if(res[0] < 2)
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0003 0118         {
; 0003 0119             res[0] = SD_sendOpCond();
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0003 011A         }
; 0003 011B 
; 0003 011C         // wait
; 0003 011D         if(res[0] != SD_READY)
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0003 011E             delay_ms(10);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0003 011F 
; 0003 0120         cmdAttempts++;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0003 0121     }
; 0003 0122     while(res[0] != SD_READY);
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0003 0123 
; 0003 0124     // read OCR
; 0003 0125     SD_readOCR(res);
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0003 0126 
; 0003 0127     // check card is ready
; 0003 0128     if(!(res[1] & 0x80)) return SD_ERROR;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0003 0129 
; 0003 012A     return SD_SUCCESS;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0003 012B }
;PCODE: $00000181 VOL: 0
;
;#define CMD17                   17
;#define CMD17_CRC               0x00
;#define SD_MAX_READ_ATTEMPTS    1563
;
;/*******************************************************************************
; Read single 512 byte block
; token = 0xFE - Successful read
; token = 0x0X - Data error
; token = 0xFF - Timeout
;*******************************************************************************/
;unsigned char SD_readSingleBlock(unsigned long addr, unsigned char *buf, unsigned char *token)
; 0003 0138 {
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0003 0139     unsigned char res1, read;
; 0003 013A     unsigned int i, readAttempts;
; 0003 013B     addr*=512UL;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;	addr -> Y+10
;	*buf -> Y+8
;	*token -> Y+6
;	res1 -> R17
;	read -> R16
;	i -> R18,R19
;	readAttempts -> R20,R21
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0003 013C     // set token to none
; 0003 013D     *token = 0xFF;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0003 013E 
; 0003 013F     // assert chip select
; 0003 0140     SPI_transfer(0xFF);
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0003 0141     CS_ENABLE();
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0003 0142     //SPI_transfer(0xFF);
; 0003 0143 
; 0003 0144     // send CMD17
; 0003 0145     res1 = SD_command(CMD17, addr, CMD17_CRC);
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0003 0146 
; 0003 0147     // read R1
; 0003 0148     //res1 = SD_readRes1();
; 0003 0149 
; 0003 014A     // if response received from card
; 0003 014B     if(res1 != 0xFF)
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0003 014C     {
; 0003 014D         // wait for a response token (timeout = 100ms)
; 0003 014E         readAttempts = 0;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0003 014F         while(++readAttempts != SD_MAX_READ_ATTEMPTS)
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0003 0150             if((read = SPI_transfer(0xFF)) != 0xFF) break;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0003 0151 
; 0003 0152         // if response token is 0xFE
; 0003 0153         if(read == 0xFE)
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0003 0154         {
; 0003 0155             // read 512 byte block
; 0003 0156             for(i = 0; i < 512; i++) *buf++ = SPI_transfer(0xFF);
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0003 0159 SPI_transfer(0xFF);
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0003 015A             SPI_transfer(0xFF);
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0003 015B         }
; 0003 015C 
; 0003 015D         // set token to card response
; 0003 015E         *token = read;
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0003 015F     }
; 0003 0160 
; 0003 0161     // deassert chip select
; 0003 0162     SPI_transfer(0xFF);
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0003 0163     CS_DISABLE();
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0003 0164     SPI_transfer(0xFF);
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0003 0165     if(read==0xFE)
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0003 0166         return res1;
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0003 0167     else
;PCODE: $000001DB VOL: 0
; 0003 0168         return SD_ERROR;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0003 0169 }
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;
;
;#ifdef PRINT_DEBUG
;void putchar(char c)
;{
;    while ((UCSR0A & (1<<UDRE0))==0);
;    UDR0=c;
;}
;
;void printhex(flash char *str,unsigned long var,unsigned char len)
;{
;    unsigned char value;
;    putstr(str);
;    putstr(":0x");
;    for(;len>0;len--)
;    {
;        //0x12345678  len=4
;        value=(var>>((len-1)*8)+4)&0x0F;
;        if(value<10){
;            putchar(value+'0');
;        }
;        else{
;            putchar(value-10+'A');
;        }
;        value=(var>>((len-1)*8))&0x0F;
;        if(value<10){
;            putchar(value+'0');
;        }
;        else{
;            putchar(value-10+'A');
;        }
;    }
;    putchar('\r');
;}
;
;void putstr(flash char *str)
;{
;    while(*str){
;        putchar(*str++);
;    }
;}
;void USART_Flush( void )
;{
;    unsigned char dummy;
;    while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
;}
;
;unsigned char recchar(void)
;{
;    //unsigned char delay=0;
;    // Wait for data to be received
;    //while ( !(UCSR0A & (1<<RXC0)) && ++delay);
;    if( !(UCSR0A & (1<<RXC0)))
;        return 0;
;    else
;        return UDR0;
;}
;#endif
