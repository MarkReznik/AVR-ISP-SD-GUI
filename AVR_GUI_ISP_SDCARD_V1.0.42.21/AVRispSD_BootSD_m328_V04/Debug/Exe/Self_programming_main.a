;// This file has been prepared for Doxygen automatic documentation generation.
;/*! \file ********************************************************************
;*
;* Atmel Corporation
;*
;* - File              : Self_programming_main.c
;* - Compiler          :
;*
;* - Support mail      : avr@atmel.com
;*
;* - Supported devices : This example is written for ATmega128.
;*
;* - AppNote           : AVR106 - C functions for reading and writing
;*                       to flash memory.
;*
;* - Description       : SDcard app loader for m328.
;*
;* $Revision: 2.0 $
;* $Date: March 20, 2020 15:18:52 UTC $
;*
;*****************************************************************************/
;/*
;Bootloader from SD card for AVR ISD SD project
;Version history:
;0.1: Initial
;0.2: Add Support only FAT32
;0.3: Add Support FAT16
;0.4: Removed debug points
;
;*/
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include "flash.h"
;PCODE: $0000000D VOL: 0
     #define WR_SPMCR_REG_R22 out 0x37,r22
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;#include "Self_programming.h"
;
;#include "spi_sdcard.h"
;
;#define SDBUF_SIZE  512
;#define PAGES_PER_SDBUF (SDBUF_SIZE/PAGESIZE)
;
;
;
;unsigned char result[5], sdBuf[SDBUF_SIZE], testBuf[PAGESIZE], token, SectorsPerCluster;
;unsigned long appStartAdr,adr,SectorsPerFat,fat_begin_lba;
;unsigned long cluster_begin_lba,fat_file_adr,fat_file_next_adr,filesize,readbytes;
;unsigned int RootEntryCnt, appPages, pagesCnt, bytesChecksum, checksumCnt;
;//(unsigned long)fat_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors;
;//(unsigned long)cluster_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors + (Number_of_FATs * Sectors_Per_FA ...
;//(unsigned char)sectors_per_cluster = BPB_SecPerClus;
;//(unsigned long)root_dir_first_cluster = BPB_RootClus;
;//void testWrite();
;void errorSD(unsigned char error_step);
;unsigned long buf2num(unsigned char *buf,unsigned char len);
;unsigned char compbuf(const unsigned char *src,unsigned char *dest);
;void (*app_pointer)(void) = (void(*)(void))0x0000;
;
;enum partition_types{DOS=0,FAT16,FAT32} partition_type;
;
;void main( void ){
; 0002 003B void main( void ){

	.CSEG
;PCODE: $00000010 VOL: 0
; 0002 003C 
; 0002 003D   unsigned int i,j;
; 0002 003E   unsigned char rollNum;
; 0002 003F   //partition_types ;
; 0002 0040 
; 0002 0041   /* initialize the USART control register
; 0002 0042    TX and RX enabled, no interrupts, 8 data bits */
; 0002 0043 
; 0002 0044 #ifdef PRINT_DEBUG
; 0002 0045 UCSR0A=0x00;
; 0002 0046 UCSR0B=0x18;
; 0002 0047 UCSR0C=0x06;
; 0002 0048 
; 0002 0049 //UBRR0H=UBRR >> 8;
; 0002 004A UBRR0L=UBRR & 0xFF;
; 0002 004B #else
; 0002 004C 
; 0002 004D // Analog Comparator: Off
; 0002 004E //ACSR=0x80;
; 0002 004F //setup ADC buttons
; 0002 0050 //DIDR0=0x00;
; 0002 0051 ADMUX=ADC_VREF_TYPE & 0xff;  //0x20 AREF=reference, Left align=only MSB resd., ch=0
;	i -> R16,R17
;	j -> R18,R19
;	rollNum -> R21
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0002 0052 ADCSRA=0x83;    //  Prescaler=8 (1Mhz), Freerun.
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0002 0053 //ADCSRB=0x00;    //
; 0002 0054 #endif
; 0002 0055 
; 0002 0056 
; 0002 0057 LED_OK_DDR.PIN_LED_OK=1;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0002 0058 LED_OK_ON();
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0002 0059 LED_ERR_DDR.PIN_LED_ERR=1;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0002 005A LED_ERR_OFF();
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0002 005B 
; 0002 005C delay_ms(250);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0002 005D 
; 0002 005E i=0;j=0;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0002 005F 
; 0002 0060 //putstr("Start\r");
; 0002 0061 #ifndef PRINT_DEBUG
; 0002 0062 while(1)
;PCODE: $00000024 VOL: 0
; 0002 0063 {
; 0002 0064     if((TestADCs()==((1<<BUTTON_DOWN)))&&(j>10))
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0002 0065     {
; 0002 0066         LED_OK_OFF();LED_ERR_OFF();
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0002 0067         if(++j>20 && i==0){
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0002 0068             break;
;PCODE: $0000003E VOL: 0
; 0002 0069         }
; 0002 006A         i=0;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0002 006B     }
; 0002 006C     else
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0002 006D     {
; 0002 006E         if(TestADCs()==((1<<BUTTON_STOP))){
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0002 006F             LED_OK_TGL(); //toggle OK LED to show initiated STOP button press. Wait for DOWN press
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0002 0070             if(j<11){
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0002 0071                 j++;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0002 0072             }
; 0002 0073         }
;PCODE: $00000056 VOL: 0
; 0002 0074         else{
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0002 0075             j=0;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0002 0076             LED_ERR_TGL();
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0002 0077             //go to app after 1 sec
; 0002 0078             if(++i>10){
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0002 0079                 LED_OK_OFF();LED_ERR_OFF();
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0002 007A                 app_pointer();
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0002 007B 
; 0002 007C             }
; 0002 007D         }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0002 007E     }
;PCODE: $00000072 VOL: 0
; 0002 007F     delay_ms(100);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0002 0080     //i++;j++;
; 0002 0081 }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0002 0082 #endif
; 0002 0083 
; 0002 0084   if((result[0]=SD_init())!=SD_SUCCESS)
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0002 0085   {
; 0002 0086     errorSD(1);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0002 0087   }
; 0002 0088   LED_OK_TGL();
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0002 0089   //putchar('i');
; 0002 008A   // read MBR get FAT start sector
; 0002 008B   if((result[0]=SD_readSingleBlock(0, sdBuf, &token))!=SD_SUCCESS)
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0002 008C   {
; 0002 008D     errorSD(2);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0002 008E   }
; 0002 008F   LED_OK_TGL();
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0002 0090   //putchar('1');
; 0002 0091   partition_type=FAT32;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0002 0092   if(sdBuf[0x1C2]<6){
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0002 0093     partition_type=DOS;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0002 0094   }
; 0002 0095   else if(sdBuf[0x1C2]<8){
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0002 0096     partition_type=FAT16;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0002 0097   }
; 0002 0098 
; 0002 0099 #ifdef PRINT_DEBUG
; 0002 009A   //printhex("2",partition_type,1);
; 0002 009B #endif
; 0002 009C   //select algoritm for FAT parse
; 0002 009D   //if((compbuf("MSDOS",&sdBuf[3])==0)||(partition_type==7)||(partition_type==6)||(partition_type==0xE)||(partition_type ...
; 0002 009E   if(partition_type != DOS)
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0002 009F   {
; 0002 00A0     adr=buf2num(&sdBuf[445+9],4);//FAT start sector. 1 sector = 512 bytes
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0002 00A1 
; 0002 00A2     //load and read FAT ID (1st) sector. Get FAT info. Secors per Cluster and etc..
; 0002 00A3     if((result[0]=SD_readSingleBlock(adr, sdBuf, &token))!=SD_SUCCESS)
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0002 00A4     {
; 0002 00A5     //putchar('e');//putchar('r');//putchar(result[0]);//putchar(token);
; 0002 00A6         errorSD(3);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0002 00A7     }
; 0002 00A8     fat_begin_lba=buf2num(&sdBuf[0x0E],2);//reserved sectors
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0002 00A9     fat_begin_lba+=adr;//first sector of FAT data
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0002 00AA     //printhex("3a",fat_begin_lba,4);
; 0002 00AB   }
; 0002 00AC   else//DOS parsing
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0002 00AD   {
; 0002 00AE     fat_begin_lba=buf2num(&sdBuf[0x0E],2);//(reserved sectors)first sector of FAT data
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0002 00AF     //putchar('2');//putchar('b');
; 0002 00B0   }
;PCODE: $000000D8 VOL: 0
; 0002 00B1 
; 0002 00B2   //printhex("3",fat_begin_lba,4);
; 0002 00B3 
; 0002 00B4   SectorsPerCluster=sdBuf[0x0D];// 8 sectors per cluster
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0002 00B5   //printhex("SpC",SectorsPerCluster,1);
; 0002 00B6 
; 0002 00B7   //if((partition_type==4)||(partition_type==6)||(partition_type==0xE)) //FAT/12/16
; 0002 00B8   if(partition_type != FAT32)
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0002 00B9   {
; 0002 00BA       SectorsPerFat=buf2num(&sdBuf[22],2); // 0xF10 for test sdcard
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0002 00BB       RootEntryCnt= buf2num(&sdBuf[11],2)>>4;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0002 00BC   }
; 0002 00BD   else{//FAT32
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0002 00BE       SectorsPerFat=buf2num(&sdBuf[0x24],4); // 0xF10 for test sdcard
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0002 00BF       RootEntryCnt=0;
;PCODE: $000000F6 VOL: 0
; 0002 00C0   }
;PCODE: $000000F7 VOL: 0
; 0002 00C1   //printhex("SpF",SectorsPerFat,4);
; 0002 00C2 
; 0002 00C3   //read the FAT fils/directories info from Root Directory cluster (usually 2),Number_of_Reserved_Sectors (usually 0x20) ...
; 0002 00C4   //(unsigned long)fat_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors;
; 0002 00C5   //fat_begin_lba=adr+0x20;//first sector of FAT data
; 0002 00C6   //(unsigned long)cluster_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors + (Number_of_FATs * Sectors_Per_ ...
; 0002 00C7   //Number_of_FATs always 2. Offset 0x10 8bit
; 0002 00C8   cluster_begin_lba=fat_begin_lba+(2*SectorsPerFat);//number of sector where data begin
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0002 00C9   //printhex("cbl",cluster_begin_lba,4);
; 0002 00CA   //read root dir (sector 2 but always offset 2 too then 0) to find folder 0 FAT reference. and find Flash.dat sector
; 0002 00CB   //lba_addr = cluster_begin_lba + (cluster_number - 2) * sectors_per_cluster;
; 0002 00CC   adr=cluster_begin_lba +(2-2)*SectorsPerCluster;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0002 00CD   //adr*=512UL;
; 0002 00CE   result[1]=0;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0002 00CF   LED_OK_TGL();
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0002 00D0   for(i=0;i<SectorsPerCluster;i++)
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0002 00D1   {
; 0002 00D2       if((result[0]=SD_readSingleBlock(adr, sdBuf, &token))!=SD_SUCCESS){
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0002 00D3         errorSD(4);
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0002 00D4       }
; 0002 00D5 #ifdef PRINT_DEBUG
; 0002 00D6       printhex("4",adr,4);
; 0002 00D7 #endif
; 0002 00D8       for(j=0;j<(16);j++)
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0002 00D9       {
; 0002 00DA            //putchar('5');
; 0002 00DB            if((result[1]=compbuf("0          ",&sdBuf[j*32]))!=0)
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0002 00DC            {
; 0002 00DD                 break;
;PCODE: $00000138 VOL: 0
; 0002 00DE            }
; 0002 00DF       }
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0002 00E0       //putchar('6');
; 0002 00E1       if(result[1]!=0)
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0002 00E2       {
; 0002 00E3         //putchar('7');
; 0002 00E4         fat_file_adr =buf2num(&sdBuf[j*32+0x14],2)<<16;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0002 00E5         fat_file_adr|=buf2num(&sdBuf[j*32+0x1A],2);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0002 00E6         break;
;PCODE: $00000156 VOL: 0
; 0002 00E7       }
; 0002 00E8       else
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0002 00E9       {
; 0002 00EA         adr++;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0002 00EB       }
;PCODE: $0000015D VOL: 0
; 0002 00EC       LED_OK_TGL();
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0002 00ED   }
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0002 00EE   if(result[1]==0)
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0002 00EF   {
; 0002 00F0       //putchar('f');//putchar('0');
; 0002 00F1       errorSD(5);//folder '0' not found
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0002 00F2   }
; 0002 00F3 
; 0002 00F4   adr=cluster_begin_lba+ RootEntryCnt +(fat_file_adr-2)*SectorsPerCluster;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0002 00F5   /*
; 0002 00F6   printhex("7",cluster_begin_lba,4);
; 0002 00F7   printhex("7",RootEntryCnt,4);
; 0002 00F8   printhex("7",fat_file_adr,4);
; 0002 00F9   printhex("7",SectorsPerCluster,4);
; 0002 00FA   printhex("7",adr,4);
; 0002 00FB   */
; 0002 00FC 
; 0002 00FD   LED_OK_TGL();
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0002 00FE   for(i=0;i<SectorsPerCluster;i++)
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0002 00FF   {
; 0002 0100       //putchar('9');
; 0002 0101 #ifdef PRINT_DEBUG
; 0002 0102       //printhex("8",adr,4);
; 0002 0103 #endif
; 0002 0104       if((result[0]=SD_readSingleBlock(adr, sdBuf, &token))!=SD_SUCCESS)
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0002 0105       {
; 0002 0106         errorSD(6);
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0002 0107       }
; 0002 0108       //putchar('A');
; 0002 0109       for(j=0;j<(16);j++)
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0002 010A       {
; 0002 010B            //putchar('B');
; 0002 010C            if((result[1]=compbuf("FLASH   ",&sdBuf[j*32]))!=0)
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0002 010D            {
; 0002 010E                 //putchar('C');
; 0002 010F                 break;
;PCODE: $000001B9 VOL: 0
; 0002 0110            }
; 0002 0111       }
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0002 0112       if(result[1]!=0)
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0002 0113       {
; 0002 0114         //putchar('D');
; 0002 0115         //read 1st number of cluster where data placed
; 0002 0116         fat_file_adr =buf2num(&sdBuf[j*32+0x14],2)<<16;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0002 0117         fat_file_adr|=buf2num(&sdBuf[j*32+0x1A],2);
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0002 0118         filesize = buf2num(&sdBuf[j*32+0x1C],8);
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0002 0119         break;
;PCODE: $000001DF VOL: 0
; 0002 011A       }
; 0002 011B       else
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0002 011C       {
; 0002 011D         adr++;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0002 011E       }
;PCODE: $000001E6 VOL: 0
; 0002 011F       LED_OK_TGL();
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0002 0120   }
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0002 0121 
; 0002 0122   if(result[1]==0)
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0002 0123   {
; 0002 0124       //putchar('f');//putchar('0');
; 0002 0125       errorSD(16);//folder '0' not found
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0002 0126   }
; 0002 0127 
; 0002 0128   //check FAT for chain of clusters to read
; 0002 0129   readbytes=0;
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0002 012A   while((fat_file_adr != 0x0FFFFFFFUL) && (fat_file_adr != 0xFFFF))
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0002 012B   {
; 0002 012C     //read where next cluster from FAT, check that not EOF
; 0002 012D #ifdef PRINT_DEBUG
; 0002 012E     //printhex("7a",fat_file_adr,4);
; 0002 012F     //printhex("7b",fat_begin_lba,4);
; 0002 0130 #endif
; 0002 0131     if((result[0]=SD_readSingleBlock(fat_begin_lba+(fat_file_adr>>8), sdBuf, &token))!=SD_SUCCESS){
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0002 0132         errorSD(7);
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0002 0133     }
; 0002 0134     if(partition_type!=FAT32){ //FAT/12/16
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0002 0135         fat_file_next_adr=buf2num(&sdBuf[(fat_file_adr<<1)%0x200],2);
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0002 0136     }
; 0002 0137     else{//FAT32
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0002 0138         fat_file_next_adr=buf2num(&sdBuf[(fat_file_adr<<2)%0x200],4);
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0002 0139     }
;PCODE: $0000022F VOL: 0
; 0002 013A #ifdef PRINT_DEBUG
; 0002 013B     //printhex("7c",fat_file_next_adr,4);
; 0002 013C #endif
; 0002 013D     //putchar('E');
; 0002 013E     adr=cluster_begin_lba+ RootEntryCnt +(fat_file_adr-2)*SectorsPerCluster;
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0002 013F     for(i=0;i<SectorsPerCluster;i++)
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0002 0140     {
; 0002 0141         //read data from next sector of file cluster
; 0002 0142 #ifdef PRINT_DEBUG
; 0002 0143         //printhex("8",adr,4);
; 0002 0144 #endif
; 0002 0145         if((result[0]=SD_readSingleBlock(adr, sdBuf, &token))!=SD_SUCCESS){
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0002 0146             errorSD(8);
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0002 0147         }
; 0002 0148         //putchar('F');
; 0002 0149         //address 2000 = start adr flash app 3 bytes, flash pages 2 bytes, checksum 2 bytes
; 0002 014A         //app bytes starts from 2048, roll 0x88
; 0002 014B         if(readbytes==0)
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0002 014C         {
; 0002 014D             for(rollNum=1;rollNum!=0;rollNum++)
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0002 014E             {
; 0002 014F                 for(j=0;j<10;j++)
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0002 0150                 {
; 0002 0151                     testBuf[j]=(sdBuf[j]<<1)|(sdBuf[j]>>7);  //ROL
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0002 0152                     testBuf[j]^=rollNum;//0x88;  //XOR
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0002 0153                 }
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0002 0154                 if(compbuf("[settings]",testBuf))
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0002 0155                 {
; 0002 0156                     //printhex("rol=",rollNum,1);
; 0002 0157                     break;
;PCODE: $0000028A VOL: 0
; 0002 0158                 }
; 0002 0159             }
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0002 015A             if(rollNum==0){
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0002 015B                  errorSD(9);
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0002 015C             }
; 0002 015D         }
;PCODE: $00000295 VOL: 0
; 0002 015E         for(j=0;j<512;j++)
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0002 015F         {
; 0002 0160             sdBuf[j]=(sdBuf[j]<<1)|(sdBuf[j]>>7);  //ROL
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0002 0161             sdBuf[j]^=rollNum;//0x88;  //XOR
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0002 0162             checksumCnt+=sdBuf[j];
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0002 0163             //if(readbytes>2000)
; 0002 0164                 ////putchar(sdBuf[j]);
; 0002 0165         }
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0002 0166         readbytes+=512;
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0002 0167         //read app data
; 0002 0168         if(readbytes>2048)
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0002 0169         {
; 0002 016A            for(pagesCnt=0;pagesCnt<PAGES_PER_SDBUF;pagesCnt++)
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0002 016B            {
; 0002 016C                LED_OK_TGL();
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0002 016D                if(WriteFlashPage(appStartAdr, &sdBuf[pagesCnt*(int)PAGESIZE])==0)
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0002 016E                {
; 0002 016F                     errorSD(10);
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0002 0170                }
; 0002 0171                appStartAdr+=PAGESIZE;
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0002 0172                appPages--;
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0002 0173                if(appPages==0)
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0002 0174                {
; 0002 0175                     LED_OK_OFF();LED_ERR_OFF();
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0002 0176                     //putchar('P');putchar('\r');
; 0002 0177                     app_pointer();
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0002 0178                }
; 0002 0179            }
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0002 017A         }
; 0002 017B         //read app start adr, num of pages, checksum
; 0002 017C         else if(readbytes>=2000)//Offset=512-48=464
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0002 017D         {
; 0002 017E            if(PAGESIZE!=((((unsigned int)sdBuf[478]<<8)|((unsigned int)sdBuf[479]))<<1))
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0002 017F            {
; 0002 0180                errorSD(11);
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0002 0181            }
; 0002 0182            appStartAdr=(unsigned long)sdBuf[464]<<16;
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0002 0183            appStartAdr|=(unsigned long)sdBuf[465]<<8;
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0002 0184            appStartAdr|=(unsigned long)sdBuf[466];
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0002 0185            appPages=(unsigned int)sdBuf[467]<<8;
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0002 0186            appPages|=(unsigned int)sdBuf[468];
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0002 0187            bytesChecksum=(unsigned int)sdBuf[469]<<8;
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0002 0188            bytesChecksum|=(unsigned int)sdBuf[470];
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
; 0002 0189            checksumCnt=0;
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0002 018A            //putchar('a');//putchar('d');//putchar('r');//putchar(sdBuf[464]);//putchar(sdBuf[465]);//putchar(sdBuf[466] ...
; 0002 018B         }
; 0002 018C         if((fat_file_next_adr == 0x0FFFFFFFUL) || (fat_file_next_adr == 0xFFFF)){
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0002 018D             if(readbytes >= filesize)
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0002 018E             {
; 0002 018F                 break;
;PCODE: $00000349 VOL: 0
; 0002 0190             }
; 0002 0191             else if(i>=(SectorsPerCluster-1))
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0002 0192             {
; 0002 0193                 //printhex("12a",readbytes,4);
; 0002 0194                 //printhex("12b",filesize,4);
; 0002 0195                 errorSD(12);
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0002 0196             }
; 0002 0197         }
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0002 0198         adr++;
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
; 0002 0199     }
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
; 0002 019A     fat_file_adr = fat_file_next_adr;
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0002 019B   }
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
; 0002 019C   while(1);
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0002 019D }
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0

	.DSEG
_0x4003D:
	.BYTE 0x20
;
;unsigned char compbuf(const unsigned char *src,unsigned char *dest)
; 0002 01A0 {

	.CSEG
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0002 01A1     while(*src)
;PCODE: $0000036B VOL: 0
;	*src -> Y+2
;	*dest -> Y+0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0002 01A2     {
; 0002 01A3         if(*src++ != *dest++)
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0002 01A4             return 0;
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0002 01A5         //src++;dest++;
; 0002 01A6         //len--;
; 0002 01A7     }
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
; 0002 01A8     return 1;
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0002 01A9 }
;PCODE: $00000382 VOL: 0
;
;void errorSD(unsigned char error_step)
; 0002 01AC {
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
; 0002 01AD     unsigned char i;
; 0002 01AE #ifdef PRINT_DEBUG
; 0002 01AF     printhex("err:",error_step,1);
; 0002 01B0 #endif
; 0002 01B1     PORTC.1=0;
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;	error_step -> Y+1
;	i -> R17
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
; 0002 01B2     LED_OK_OFF();
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
; 0002 01B3     for(i=0;i<error_step;i++){
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0002 01B4         LED_ERR_OFF();
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0002 01B5         delay_ms(300);
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0002 01B6         LED_ERR_ON();
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0002 01B7         delay_ms(300);
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
; 0002 01B8     }
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
; 0002 01B9 
; 0002 01BA     while(1);
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
; 0002 01BB }
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;
;unsigned long buf2num(unsigned char *buf,unsigned char len)
; 0002 01BE {
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
; 0002 01BF     unsigned long num=0;
; 0002 01C0     //unsigned char i;
; 0002 01C1     for(;len>0;len--)
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;	*buf -> Y+5
;	len -> Y+4
;	num -> Y+0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0002 01C2     {
; 0002 01C3         num<<=8;
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
; 0002 01C4         num|=buf[len-1];
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0002 01C5     }
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
; 0002 01C6     return num;
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
; 0002 01C7 }
;PCODE: $000003D4 VOL: 0
;
;#ifndef PRINT_DEBUG
;unsigned char TestADCs()
; 0002 01CB {
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
; 0002 01CC     unsigned char StateOfButtons=0;
; 0002 01CD     unsigned char adc_data;
; 0002 01CE     ADMUX=(6 | (ADC_VREF_TYPE & 0xff)); //ADC6 ch=6, ADC7 ch=7
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;	StateOfButtons -> R17
;	adc_data -> R16
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
; 0002 01CF     // Delay needed for the stabilization of the ADC input voltage
; 0002 01D0     delay_us(20);
;PCODE: $000003DD VOL: 0
; 0002 01D1     // Start the AD conversion
; 0002 01D2     ADCSRA|=0x40;
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
; 0002 01D3     while(ADCSRA&(1<<ADSC));//while(ADC_DONE==FALSE);
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0002 01D4     adc_data=ADCH;
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
; 0002 01D5     if(adc_data<50)
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
; 0002 01D6         StateOfButtons|=1<<BUTTON_DOWN;
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
; 0002 01D7     else if(adc_data<150)
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
; 0002 01D8         StateOfButtons|=1<<BUTTON_STOP;
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
; 0002 01D9     ADMUX=(7 | (ADC_VREF_TYPE & 0xff)); //ADC6 ch=6, ADC7 ch=7
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
; 0002 01DA     // Delay needed for the stabilization of the ADC input voltage
; 0002 01DB     delay_us(20);
;PCODE: $000003F9 VOL: 0
; 0002 01DC     // Start the AD conversion
; 0002 01DD     ADCSRA|=0x40;
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
; 0002 01DE     while(ADCSRA&(1<<ADSC));//while(ADC_DONE==FALSE);
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
; 0002 01DF     adc_data=ADCH;
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0002 01E0     if(adc_data<50)
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
; 0002 01E1         StateOfButtons|=1<<BUTTON_UP;
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
; 0002 01E2     else if(adc_data<150)
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
; 0002 01E3         StateOfButtons|=1<<BUTTON_START;
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
; 0002 01E4     if(StateOfButtons)
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
; 0002 01E5         return StateOfButtons;
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
; 0002 01E6     return (1<<BUTTONS_RELEASED);
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
; 0002 01E7 }
;PCODE: $0000041C VOL: 0
;
;#endif
